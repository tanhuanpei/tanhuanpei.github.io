{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537930092727},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537930092727},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537930092727},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1537930092727},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1537930092727},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1537930092727},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1537930092727},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537930092727},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1537930092727},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1537930092727},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1537930092727},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1537930092727},{"_id":"themes/next/_config.yml","hash":"cc31c820fac48d00c36136474b725be80afa5703","modified":1537931467191},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1537930092727},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1537930092727},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1537930092755},{"_id":"source/_posts/Android性能优化【ANR机制总结与问题分析】.md","hash":"73ea69438c883957e9ec5d14ad77b3d2bcd50653","modified":1545119718031},{"_id":"source/_posts/Android性能优化【数据结构篇】.md","hash":"ac077f534a6d55537084d906f4a60b603b7fed4a","modified":1545119718031},{"_id":"source/_posts/Android架构组件-LiveData使用与源码分析.md","hash":"a3702b3ecb40931fb0106deff956509cf974c33e","modified":1545138604999},{"_id":"source/_posts/Hexo简易教程.md","hash":"0a8c6fbea029553e52fb534d7d5a6f40ee410b13","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门.md","hash":"95f2a69061e4523987ac6e18cdba6d6dce80496a","modified":1545119718031},{"_id":"source/_posts/工具汇总.md","hash":"bd0b568bc66b5c736caf13b689feb65207315a7b","modified":1545119718031},{"_id":"source/about/index.md","hash":"809f2df789fbcbd1ffa10022a509e86faac5a7f0","modified":1545119718031},{"_id":"themes/next/.git/HEAD","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1537930092723},{"_id":"themes/next/.git/config","hash":"6d8c51c824f20fbfdc7351710f44f6158f3852b3","modified":1537929631247},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537929628975},{"_id":"themes/next/.git/index","hash":"548a0eba98b5c54315c4800c160371e334f45b90","modified":1537930092771},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1537930092703},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1537930092727},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1537930092727},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1537930092727},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1537930092735},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1537930092735},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1537930092735},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1537930092735},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1537930092735},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1537930092735},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1537930092739},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1537930092739},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1537930092739},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1537930092739},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1537930092739},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1537930092739},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1537930092739},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1537930092743},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1537930092755},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1537930092755},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1537930092755},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1537930092755},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1537930092755},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1537930092755},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1537930092755},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1537930092755},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537930092755},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537930092771},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537930092771},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537930092771},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092755},{"_id":"source/_posts/使用AS开发gradle插件入门/1.png","hash":"6170aae86d86b4ffa8a1e3dbbb96728e333edd49","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门/2.png","hash":"80ad7248d7047dabebce232b7af0aab1d2bf7746","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门/3.png","hash":"b10e1c60b647e955474c473dad08325795407fa5","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门/4.png","hash":"234de57d5ea5a0b953678013231370a7669a7208","modified":1545119718031},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1537929628967},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537929628967},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537929628967},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1537929628967},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537929628967},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1537929628967},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1537929628967},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1537929628967},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1537929628967},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537929628975},{"_id":"themes/next/.git/logs/HEAD","hash":"5ebbf295073192ab78dac930bf0b54b3d7995e7f","modified":1537930092723},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537930092743},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537930092743},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537930092743},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1537930092743},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1537930092743},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1537930092743},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1537930092743},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1537930092743},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1537930092751},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1537930092751},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1537930092751},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1537930092751},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1537930092751},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1537930092751},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1537930092751},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1537930092751},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1537930092751},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1537930092751},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1537930092755},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1537930092755},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1537930092755},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537930092755},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537930092755},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1537930092755},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1537930092755},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1537930092755},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1537930092755},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1537930092755},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1537930092755},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1537930092755},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1537930092755},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1537930092755},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1537930092755},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1537930092755},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537930092755},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537930092755},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537930092755},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537930092755},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537930092755},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537930092755},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537930092759},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537930092759},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537930092759},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537930092759},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537930092759},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537930092759},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537930092759},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537930092759},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092751},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092751},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092755},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092755},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092755},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092755},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537930092755},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537930092751},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537930092751},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537930092751},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537930092751},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537930092751},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537930092751},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537930092751},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537930092751},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1537930092751},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1537930092751},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537930092751},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537930092751},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537930092751},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537930092751},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1537930092751},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1537930092751},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1537930092751},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1537930092751},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1537930092755},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1537930092755},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537930092755},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1537930092755},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537930092755},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537930092755},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1537930092755},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537930092755},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1537930092755},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1537930092755},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1537930092755},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1537930092755},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1537930092755},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1537930092755},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1537930092759},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1537930092759},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1537930092759},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1537930092759},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1537930092759},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537930092759},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1537930092759},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1537930092759},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1537930092759},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1537930092759},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1537930092759},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1537930092759},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1537930092759},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1537930092759},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1537930092763},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1537930092763},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1537930092763},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1537930092763},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1537930092767},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1537930092767},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1537930092767},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1537930092767},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1537930092767},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1537930092767},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1537930092767},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1537930092767},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1537930092771},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1537930092771},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1537930092771},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1537930092771},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1537930092771},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537930092771},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537930092771},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537930092771},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537930092767},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537930092703},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1537930092755},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537930092755},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1537930092755},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1537930092755},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537930092755},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1537930092755},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537930092755},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537930092755},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1537930092755},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1537930092759},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1537930092759},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1537930092759},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1537930092763},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1537930092763},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1537930092763},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1537930092771},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1537930092771},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1537930092759},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537930092767},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537930092767},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537930092771},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d0aa67c00abe52727eb061ad1c0d54fd02884cf5","modified":1537930092723},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537930092755},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537930092755},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537930092755},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1537930092759},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1537930092759},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1537930092759},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1537930092759},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1537930092763},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537930092763},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1537930092767},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.idx","hash":"be430c584ec6e1499b87f9e416e72d0fbc2e3a26","modified":1537930092631},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1537930092759},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1537930092771},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1537930092767},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.pack","hash":"eee901eb2f4a4df31eaa41634f4e9de643c3fb4e","modified":1537930092631}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2018-07-24T09:26:45.000Z","_content":"\n- 但行好事，莫问前程\n\n- [GitHub](https://github.com/tanhuanpei/)","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-07-24 17:26:45\n---\n\n- 但行好事，莫问前程\n\n- [GitHub](https://github.com/tanhuanpei/)","updated":"2018-12-18T07:55:18.031Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjptrtb540007b7vxzebx8phe","content":"<ul>\n<li><p>但行好事，莫问前程</p>\n</li>\n<li><p><a href=\"https://github.com/tanhuanpei/\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>但行好事，莫问前程</p>\n</li>\n<li><p><a href=\"https://github.com/tanhuanpei/\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n</li>\n</ul>\n"}],"Post":[{"title":"Android性能优化【ANR机制总结与问题分析】","date":"2018-09-12T12:36:22.000Z","_content":"","source":"_posts/Android性能优化【ANR机制总结与问题分析】.md","raw":"---\ntitle: Android性能优化【ANR机制总结与问题分析】\ndate: 2018-09-12 20:36:22\ntags:\n---\n","slug":"Android性能优化【ANR机制总结与问题分析】","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptrtb1a0000b7vxx63fuqlc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Android性能优化【数据结构篇】","date":"2018-07-27T07:42:56.000Z","_content":"","source":"_posts/Android性能优化【数据结构篇】.md","raw":"---\ntitle: Android性能优化【数据结构篇】\ndate: 2018-07-27 15:42:56\ntags:\n---\n","slug":"Android性能优化【数据结构篇】","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptrtb1h0001b7vx7ka0l6pb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hexo简易教程","_content":"\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n\n\n### 新建文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n文章目录在  source/_posts/My Niew Post.md\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动本地服务器\n\n``` bash\n$ hexo server\n```\n一般地址为 http://localhost:4000/\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程服务器\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/Hexo简易教程.md","raw":"---\ntitle: Hexo简易教程\n---\n\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n\n\n### 新建文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n文章目录在  source/_posts/My Niew Post.md\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动本地服务器\n\n``` bash\n$ hexo server\n```\n一般地址为 http://localhost:4000/\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程服务器\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"Hexo简易教程","published":1,"date":"2018-12-18T07:55:18.031Z","updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptrtb1i0002b7vx9al4ykfp","content":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n</ul>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>文章目录在  source/_posts/My Niew Post.md<br>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>一般地址为 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署到远程服务器\"><a href=\"#部署到远程服务器\" class=\"headerlink\" title=\"部署到远程服务器\"></a>部署到远程服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n</ul>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>文章目录在  source/_posts/My Niew Post.md<br>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>一般地址为 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署到远程服务器\"><a href=\"#部署到远程服务器\" class=\"headerlink\" title=\"部署到远程服务器\"></a>部署到远程服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"工具汇总","date":"2018-08-01T02:54:12.000Z","_content":"\n\n### 反编译\n\nJadx","source":"_posts/工具汇总.md","raw":"---\ntitle: 工具汇总\ndate: 2018-08-01 10:54:12\ntags:\n---\n\n\n### 反编译\n\nJadx","slug":"工具汇总","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptrtb1j0003b7vxao8ein6i","content":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>Jadx</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>Jadx</p>\n"},{"title":"使用AS开发gradle插件 (一)","date":"2018-07-05T11:45:51.000Z","_content":"\n# 0X00 前言\nGradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。\n# 0X01 在项目中使用Android gradle插件\n配置插件路径，在Project目录中的build.gradle添加\n```\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.0'\n    }\n```\n使用具体插件，在主Module目录中的build.gradle添加\n```\napply plugin: 'com.android.application'\n```\n# 0X02 自定义插件\n我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，\n1.新建一个Module，选择Android Library。\n2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。\n3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：\n![QQ截图20170123114005](/使用AS开发gradle插件入门/1.png)\n4.修改Module中的 ``build.gradle``文件，引入groovy和maven相关依赖\n```\napply plugin: 'groovy'\napply plugin: 'maven'\n\ndependencies {\n    compile gradleApi()\n    compile localGroovy()\n}\n```\n5.创建插件类``TimeImpl.groovy``，继承 ``Plugin<Project>``，实现``apply``方法。\n\n```\npublic class TimeImpl implements Plugin<Project> {\n\n    @Override\n    void apply(Project project) {\n        project.gradle.addListener(new TimeListener())\n    }\n}\n\n```\n\n在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类\n```\nimplementation-class = com.thp.plugin.TimeImpl\n```\n![QQ截图20170123114005](/使用AS开发gradle插件入门/2.png)\n\n6.在``build.gradle``配置插件版本和发布到本地仓库\n\n```\ngroup = 'com.thp.plugin'\nversion = '1.0.0'\n\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uri('../repo'))\n        }\n    }\n}\n```\n这时候，右侧的gradle Toolbar就会在module下多出一个task\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/3.png)\n\n点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/4.png)\n\n\n\n# 0X03 项目中引用插件\n在app module的``build.gradle``上添加\n```\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n            url uri('../repo')\n        }\n    }\n\n    dependencies {\n        classpath 'com.thp.plugin:gradletime:1.0.0'\n    }\n}\n\napply plugin: 'gradle.time'\n\n```\n以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。\n\n# 中文文档\n- [深入理解Android之Gradle-邓凡平](http://www.infoq.com/cn/articles/android-in-depth-gradle) \n- [Gradle User Guide 中文版](https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details)\n- [拥抱Android Studio系列](http://kvh.io/cn/tags/EmbraceAndroidStudio/)\n\n# 外籍文档\n\n- [Groovy Documentation](http://www.groovy-lang.org/documentation.html) ：Groovy 的详细介绍文档\n- [Groovy API Reference](http://www.groovy-lang.org/api.html) ：Groovy 的 API 文档\n- [Gradle User Guid](https://docs.gradle.org/current/userguide/userguide.html)：Gradle 的详细介绍文档\n- [Gradle Build Language Reference](https://docs.gradle.org/current/dsl/) : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查\n- [Android Plugin DSL Reference](http://google.github.io/android-gradle-dsl/current/index.html) : 使用 Android 插件必备","source":"_posts/使用AS开发gradle插件入门.md","raw":"---\ntitle: 使用AS开发gradle插件 (一)\ndate: 2018-07-05 19:45:51\ntags: gradle插件\n---\n\n# 0X00 前言\nGradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。\n# 0X01 在项目中使用Android gradle插件\n配置插件路径，在Project目录中的build.gradle添加\n```\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.0'\n    }\n```\n使用具体插件，在主Module目录中的build.gradle添加\n```\napply plugin: 'com.android.application'\n```\n# 0X02 自定义插件\n我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，\n1.新建一个Module，选择Android Library。\n2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。\n3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：\n![QQ截图20170123114005](/使用AS开发gradle插件入门/1.png)\n4.修改Module中的 ``build.gradle``文件，引入groovy和maven相关依赖\n```\napply plugin: 'groovy'\napply plugin: 'maven'\n\ndependencies {\n    compile gradleApi()\n    compile localGroovy()\n}\n```\n5.创建插件类``TimeImpl.groovy``，继承 ``Plugin<Project>``，实现``apply``方法。\n\n```\npublic class TimeImpl implements Plugin<Project> {\n\n    @Override\n    void apply(Project project) {\n        project.gradle.addListener(new TimeListener())\n    }\n}\n\n```\n\n在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类\n```\nimplementation-class = com.thp.plugin.TimeImpl\n```\n![QQ截图20170123114005](/使用AS开发gradle插件入门/2.png)\n\n6.在``build.gradle``配置插件版本和发布到本地仓库\n\n```\ngroup = 'com.thp.plugin'\nversion = '1.0.0'\n\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uri('../repo'))\n        }\n    }\n}\n```\n这时候，右侧的gradle Toolbar就会在module下多出一个task\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/3.png)\n\n点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/4.png)\n\n\n\n# 0X03 项目中引用插件\n在app module的``build.gradle``上添加\n```\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n            url uri('../repo')\n        }\n    }\n\n    dependencies {\n        classpath 'com.thp.plugin:gradletime:1.0.0'\n    }\n}\n\napply plugin: 'gradle.time'\n\n```\n以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。\n\n# 中文文档\n- [深入理解Android之Gradle-邓凡平](http://www.infoq.com/cn/articles/android-in-depth-gradle) \n- [Gradle User Guide 中文版](https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details)\n- [拥抱Android Studio系列](http://kvh.io/cn/tags/EmbraceAndroidStudio/)\n\n# 外籍文档\n\n- [Groovy Documentation](http://www.groovy-lang.org/documentation.html) ：Groovy 的详细介绍文档\n- [Groovy API Reference](http://www.groovy-lang.org/api.html) ：Groovy 的 API 文档\n- [Gradle User Guid](https://docs.gradle.org/current/userguide/userguide.html)：Gradle 的详细介绍文档\n- [Gradle Build Language Reference](https://docs.gradle.org/current/dsl/) : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查\n- [Android Plugin DSL Reference](http://google.github.io/android-gradle-dsl/current/index.html) : 使用 Android 插件必备","slug":"使用AS开发gradle插件入门","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptrtb1k0004b7vx7p2yb0yr","content":"<h1 id=\"0X00-前言\"><a href=\"#0X00-前言\" class=\"headerlink\" title=\"0X00 前言\"></a>0X00 前言</h1><p>Gradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。</p>\n<h1 id=\"0X01-在项目中使用Android-gradle插件\"><a href=\"#0X01-在项目中使用Android-gradle插件\" class=\"headerlink\" title=\"0X01 在项目中使用Android gradle插件\"></a>0X01 在项目中使用Android gradle插件</h1><p>配置插件路径，在Project目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    classpath &apos;com.android.tools.build:gradle:3.0.0&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用具体插件，在主Module目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-自定义插件\"><a href=\"#0X02-自定义插件\" class=\"headerlink\" title=\"0X02 自定义插件\"></a>0X02 自定义插件</h1><p>我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，<br>1.新建一个Module，选择Android Library。<br>2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。<br>3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：<br><img src=\"/2018/07/05/使用AS开发gradle插件入门/1.png\" alt=\"QQ截图20170123114005\"><br>4.修改Module中的 <code>build.gradle</code>文件，引入groovy和maven相关依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;groovy&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile gradleApi()</span><br><span class=\"line\">    compile localGroovy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.创建插件类<code>TimeImpl.groovy</code>，继承 <code>Plugin&lt;Project&gt;</code>，实现<code>apply</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TimeImpl implements Plugin&lt;Project&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    void apply(Project project) &#123;</span><br><span class=\"line\">        project.gradle.addListener(new TimeListener())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation-class = com.thp.plugin.TimeImpl</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/2.png\" alt=\"QQ截图20170123114005\"></p>\n<p>6.在<code>build.gradle</code>配置插件版本和发布到本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group = &apos;com.thp.plugin&apos;</span><br><span class=\"line\">version = &apos;1.0.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uri(&apos;../repo&apos;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，右侧的gradle Toolbar就会在module下多出一个task</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/3.png\" alt=\"QQ截图20170123114005\"></p>\n<p>点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/4.png\" alt=\"QQ截图20170123114005\"></p>\n<h1 id=\"0X03-项目中引用插件\"><a href=\"#0X03-项目中引用插件\" class=\"headerlink\" title=\"0X03 项目中引用插件\"></a>0X03 项目中引用插件</h1><p>在app module的<code>build.gradle</code>上添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url uri(&apos;../repo&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.thp.plugin:gradletime:1.0.0&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;gradle.time&apos;</span><br></pre></td></tr></table></figure></p>\n<p>以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。</p>\n<h1 id=\"中文文档\"><a href=\"#中文文档\" class=\"headerlink\" title=\"中文文档\"></a>中文文档</h1><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/android-in-depth-gradle\" target=\"_blank\" rel=\"noopener\">深入理解Android之Gradle-邓凡平</a> </li>\n<li><a href=\"https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details\" target=\"_blank\" rel=\"noopener\">Gradle User Guide 中文版</a></li>\n<li><a href=\"http://kvh.io/cn/tags/EmbraceAndroidStudio/\" target=\"_blank\" rel=\"noopener\">拥抱Android Studio系列</a></li>\n</ul>\n<h1 id=\"外籍文档\"><a href=\"#外籍文档\" class=\"headerlink\" title=\"外籍文档\"></a>外籍文档</h1><ul>\n<li><a href=\"http://www.groovy-lang.org/documentation.html\" target=\"_blank\" rel=\"noopener\">Groovy Documentation</a> ：Groovy 的详细介绍文档</li>\n<li><a href=\"http://www.groovy-lang.org/api.html\" target=\"_blank\" rel=\"noopener\">Groovy API Reference</a> ：Groovy 的 API 文档</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/userguide.html\" target=\"_blank\" rel=\"noopener\">Gradle User Guid</a>：Gradle 的详细介绍文档</li>\n<li><a href=\"https://docs.gradle.org/current/dsl/\" target=\"_blank\" rel=\"noopener\">Gradle Build Language Reference</a> : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查</li>\n<li><a href=\"http://google.github.io/android-gradle-dsl/current/index.html\" target=\"_blank\" rel=\"noopener\">Android Plugin DSL Reference</a> : 使用 Android 插件必备</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-前言\"><a href=\"#0X00-前言\" class=\"headerlink\" title=\"0X00 前言\"></a>0X00 前言</h1><p>Gradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。</p>\n<h1 id=\"0X01-在项目中使用Android-gradle插件\"><a href=\"#0X01-在项目中使用Android-gradle插件\" class=\"headerlink\" title=\"0X01 在项目中使用Android gradle插件\"></a>0X01 在项目中使用Android gradle插件</h1><p>配置插件路径，在Project目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    classpath &apos;com.android.tools.build:gradle:3.0.0&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用具体插件，在主Module目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-自定义插件\"><a href=\"#0X02-自定义插件\" class=\"headerlink\" title=\"0X02 自定义插件\"></a>0X02 自定义插件</h1><p>我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，<br>1.新建一个Module，选择Android Library。<br>2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。<br>3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：<br><img src=\"/2018/07/05/使用AS开发gradle插件入门/1.png\" alt=\"QQ截图20170123114005\"><br>4.修改Module中的 <code>build.gradle</code>文件，引入groovy和maven相关依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;groovy&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile gradleApi()</span><br><span class=\"line\">    compile localGroovy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.创建插件类<code>TimeImpl.groovy</code>，继承 <code>Plugin&lt;Project&gt;</code>，实现<code>apply</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TimeImpl implements Plugin&lt;Project&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    void apply(Project project) &#123;</span><br><span class=\"line\">        project.gradle.addListener(new TimeListener())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation-class = com.thp.plugin.TimeImpl</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/2.png\" alt=\"QQ截图20170123114005\"></p>\n<p>6.在<code>build.gradle</code>配置插件版本和发布到本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group = &apos;com.thp.plugin&apos;</span><br><span class=\"line\">version = &apos;1.0.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uri(&apos;../repo&apos;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，右侧的gradle Toolbar就会在module下多出一个task</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/3.png\" alt=\"QQ截图20170123114005\"></p>\n<p>点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/4.png\" alt=\"QQ截图20170123114005\"></p>\n<h1 id=\"0X03-项目中引用插件\"><a href=\"#0X03-项目中引用插件\" class=\"headerlink\" title=\"0X03 项目中引用插件\"></a>0X03 项目中引用插件</h1><p>在app module的<code>build.gradle</code>上添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url uri(&apos;../repo&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.thp.plugin:gradletime:1.0.0&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;gradle.time&apos;</span><br></pre></td></tr></table></figure></p>\n<p>以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。</p>\n<h1 id=\"中文文档\"><a href=\"#中文文档\" class=\"headerlink\" title=\"中文文档\"></a>中文文档</h1><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/android-in-depth-gradle\" target=\"_blank\" rel=\"noopener\">深入理解Android之Gradle-邓凡平</a> </li>\n<li><a href=\"https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details\" target=\"_blank\" rel=\"noopener\">Gradle User Guide 中文版</a></li>\n<li><a href=\"http://kvh.io/cn/tags/EmbraceAndroidStudio/\" target=\"_blank\" rel=\"noopener\">拥抱Android Studio系列</a></li>\n</ul>\n<h1 id=\"外籍文档\"><a href=\"#外籍文档\" class=\"headerlink\" title=\"外籍文档\"></a>外籍文档</h1><ul>\n<li><a href=\"http://www.groovy-lang.org/documentation.html\" target=\"_blank\" rel=\"noopener\">Groovy Documentation</a> ：Groovy 的详细介绍文档</li>\n<li><a href=\"http://www.groovy-lang.org/api.html\" target=\"_blank\" rel=\"noopener\">Groovy API Reference</a> ：Groovy 的 API 文档</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/userguide.html\" target=\"_blank\" rel=\"noopener\">Gradle User Guid</a>：Gradle 的详细介绍文档</li>\n<li><a href=\"https://docs.gradle.org/current/dsl/\" target=\"_blank\" rel=\"noopener\">Gradle Build Language Reference</a> : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查</li>\n<li><a href=\"http://google.github.io/android-gradle-dsl/current/index.html\" target=\"_blank\" rel=\"noopener\">Android Plugin DSL Reference</a> : 使用 Android 插件必备</li>\n</ul>\n"},{"title":"Android架构组件-LiveData使用与源码分析","date":"2018-12-18T07:39:37.000Z","_content":"\n## 前言\n`LiveData`是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循`Activity`,`Fragment`或者`Service`等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。\n\n只有当 Observer 的 Lifecycle 对象处于 `STARTED` 或者 `RESUMED` 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于`DESTROYED`状态的时候，Observer会被相应的移除。\n\n###  LiveData的优点\n使用LiveData具有以下的有点：\n- **UI和实时数据保持一致** 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。\n**避免内存泄漏**-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。\n**不会再产生由于Activity处于stop状态而引起的崩溃**- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。\n**不需要再解决生命周期带来的问题**-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。\n**实时数据刷新**-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。\n**解决Configuration Change问题**-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。\n**资源共享**- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。\n\n\n## 添加LiveData\n\n### 添加google maven仓库\n在项目`build.gradle`中添加：\n```\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n```\n**AndroidX**\n```\ndependencies {\n    def lifecycle_version = \"2.0.0\"\n\n    // ViewModel and LiveData\n    implementation \"androidx.lifecycle:lifecycle-extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"androidx.lifecycle:lifecycle-livedata:$lifecycle_version\"\n\t\n    // optional - ReactiveStreams support for LiveData\n    implementation \"androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version\" // use -ktx for Kotlin\n\n    // optional - Test helpers for LiveData\n    testImplementation \"androidx.arch.core:core-testing:$lifecycle_version\"\n}\n```\n\n**AndroidX之前**\n```\ndependencies {\n    def lifecycle_version = \"1.1.1\"\n\n    // ViewModel and LiveData\n    implementation \"android.arch.lifecycle:extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"android.arch.lifecycle:livedata:$lifecycle_version\"\n    // optional - ReactiveStreams support for LiveData\n    implementation \"android.arch.lifecycle:reactivestreams:$lifecycle_version\"\n\n    // optional - Test helpers for LiveData\n    testImplementation \"android.arch.core:core-testing:$lifecycle_version\"\n}\n```\n### 创建LiveData对象\n\n**MutableLiveData**\n```\npublic class NameViewModel extends ViewModel {\n\n// Create a LiveData with a String\nprivate MutableLiveData<String> mCurrentName;\n\n    public MutableLiveData<String> getCurrentName() {\n        if (mCurrentName == null) {\n            mCurrentName = new MutableLiveData<String>();\n        }\n        return mCurrentName;\n    }\n\n// Rest of the ViewModel...\n}\n```\n```\npublic class NameActivity extends AppCompatActivity {\n\n    private NameViewModel mModel;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Other code to setup the activity...\n\n        // Get the ViewModel.\n        mModel = ViewModelProviders.of(this).get(NameViewModel.class);\n\n\n        // Create the observer which updates the UI.\n        final Observer<String> nameObserver = new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable final String newName) {\n                // Update the UI, in this case, a TextView.\n                mNameTextView.setText(newName);\n            }\n        };\n\n        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.\n        mModel.getCurrentName().observe(this, nameObserver);\n    }\n}\n```\n**MediatorLiveData**\n```\n LiveData liveData1 = ...;\n LiveData liveData2 = ...;\n\n MediatorLiveData liveDataMerger = new MediatorLiveData<>();\n liveDataMerger.addSource(liveData1, value -> liveDataMerger.setValue(value));\n liveDataMerger.addSource(liveData2, value -> liveDataMerger.setValue(value));\n```\n\n**使用单例模式**\n\n```\npublic class SingletonLiveData extends MutableLiveData<String> {\n\n    private static volatile SingletonLiveData instance;\n\n    public SingletonLiveData() {\n    }\n\n    public static SingletonLiveData getInstance() {\n        if (instance != null) {\n            return instance;\n        }\n        synchronized (SingletonLiveData.class) {\n            if (instance == null) {\n                instance = new SingletonLiveData();\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    protected void onActive() {\n        super.onActive();\n    }\n\n    @Override\n    protected void onInactive() {\n        super.onInactive();\n    }\n}\n```\n```java\nSingletonLiveData.getInstance().observe(this, new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable String s) {\n\n            }\n        });\n```\n```\nSingletonLiveData.getInstance().setValue(\"single\");\n```\n简单说明LiveData中的几个重要方法：\n**onActive() **- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。\n**onInactive()**- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。\n**setValue()**- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。\n**postValue()**- :当需要在非UI线程更新数据时调用此函数。\n\n需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。\n\n**数据转换**\nLiveData 还支持简单的数据变换。目前在 `Transformations` 类中有 map 和 switchMap 两个变换函数。\n\n- map 是把一个数据类型变换为另外一个数据类型。\n- switchMap 是把一个数据变化为另外一个 LiveData\n\n```java\nLiveData<User> userLiveData = ...;\nLiveData<String> userName = Transformations.map(userLiveData, user -> {\n    user.name + \" \" + user.lastName\n});\n```\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    private final MutableLiveData<String> addressInput = new MutableLiveData();\n    public final LiveData<String> postalCode =\n            Transformations.switchMap(addressInput, (address) -> {\n                return repository.getPostCode(address);\n             });\n\n  public MyViewModel(PostalCodeRepository repository) {\n      this.repository = repository\n  }\n\n  private void setInput(String address) {\n      addressInput.setValue(address);\n  }\n}\n```\n\n##  原理分析\n\n下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下\n```java\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && existing.owner != wrapper.owner) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n```\n从这段代码看出，当观察者所在的`LifecycleOwner`状态处于DESTROYED时，注册失败。当重复注册观察者时，`会抛出IllegalArgumentException`异常。通过这些验证后，向`Lifecycle`注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。`LifecycleOwner`是一个接口，只有一个方法getLifecycle()，`在Fragment`、`FragmentActivity`、`SupportActivity`、`LifecycleService`中均实现了这个方法。\n\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n```java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n\n```\n```java\npublic class Fragment implements ComponentCallbacks, OnCreateContextMenuListener, LifecycleOwner {\n\n    LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    @Override\n    public Lifecycle getLifecycle() {\n        return mLifecycleRegistry;\n    }\n\t\n\tvoid performStart() {\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.noteStateNotSaved();\n            mChildFragmentManager.execPendingActions();\n        }\n        mState = STARTED;\n        mCalled = false;\n        onStart();\n        if (!mCalled) {\n            throw new SuperNotCalledException(\"Fragment \" + this\n                    + \" did not call through to super.onStart()\");\n        }\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.dispatchStart();\n        }\n        if (mLoaderManager != null) {\n            mLoaderManager.doReportStart();\n        }\n        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n    }\n}\n```\n**LiveData中内部类LifecycleBoundObserver**\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n**LifecycleRegistry.java**\n```java\npublic class LifecycleRegistry extends Lifecycle {\n\n    private static final String LOG_TAG = \"LifecycleRegistry\";\n\n    /**\n     * Custom list that keeps observers and can handle removals / additions during traversal.\n     *\n     * Invariant: at any moment of time for observer1 & observer2:\n     * if addition_order(observer1) < addition_order(observer2), then\n     * state(observer1) >= state(observer2),\n     */\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n    /**\n     * Current state\n     */\n    private State mState;\n    /**\n     * The provider that owns this Lifecycle.\n     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak\n     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,\n     * because it keeps strong references on all other listeners, so you'll leak all of them as\n     * well.\n     */\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    private int mAddingObserverCounter = 0;\n\n    private boolean mHandlingEvent = false;\n    private boolean mNewEventOccurred = false;\n\n    // we have to keep it for cases:\n    // void onStart() {\n    //     mRegistry.removeObserver(this);\n    //     mRegistry.add(newObserver);\n    // }\n    // newObserver should be brought only to CREATED state during the execution of\n    // this onStart method. our invariant with mObserverMap doesn't help, because parent observer\n    // is no longer in the map.\n    private ArrayList<State> mParentStates = new ArrayList<>();\n\n    /**\n     * Creates a new LifecycleRegistry for the given provider.\n     * <p>\n     * You should usually create this inside your LifecycleOwner class's constructor and hold\n     * onto the same instance.\n     *\n     * @param provider The owner LifecycleOwner\n     */\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n    /**\n     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.\n     *\n     * @param state new state\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void markState(@NonNull State state) {\n        moveToState(state);\n    }\n\n    /**\n     * Sets the current state and notifies the observers.\n     * <p>\n     * Note that if the {@code currentState} is the same state as the last call to this method,\n     * calling this method has no effect.\n     *\n     * @param event The event that was received\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        if (mHandlingEvent || mAddingObserverCounter != 0) {\n            mNewEventOccurred = true;\n            // we will figure out what to do on upper level.\n            return;\n        }\n        mHandlingEvent = true;\n        sync();\n        mHandlingEvent = false;\n    }\n\n    private boolean isSynced() {\n        if (mObserverMap.size() == 0) {\n            return true;\n        }\n        State eldestObserverState = mObserverMap.eldest().getValue().mState;\n        State newestObserverState = mObserverMap.newest().getValue().mState;\n        return eldestObserverState == newestObserverState && mState == newestObserverState;\n    }\n\n    private State calculateTargetState(LifecycleObserver observer) {\n        Entry<LifecycleObserver, ObserverWithState> previous = mObserverMap.ceil(observer);\n\n        State siblingState = previous != null ? previous.getValue().mState : null;\n        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - 1)\n                : null;\n        return min(min(mState, siblingState), parentState);\n    }\n\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n\n        if (previous != null) {\n            return;\n        }\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            // it is null we should be destroyed. Fallback quickly\n            return;\n        }\n\n        boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n        State targetState = calculateTargetState(observer);\n        mAddingObserverCounter++;\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n\n        if (!isReentrance) {\n            // we do sync only on the top level.\n            sync();\n        }\n        mAddingObserverCounter--;\n    }\n\n    private void popParentState() {\n        mParentStates.remove(mParentStates.size() - 1);\n    }\n\n    private void pushParentState(State state) {\n        mParentStates.add(state);\n    }\n\n    @Override\n    public void removeObserver(@NonNull LifecycleObserver observer) {\n        // we consciously decided not to send destruction events here in opposition to addObserver.\n        // Our reasons for that:\n        // 1. These events haven't yet happened at all. In contrast to events in addObservers, that\n        // actually occurred but earlier.\n        // 2. There are cases when removeObserver happens as a consequence of some kind of fatal\n        // event. If removeObserver method sends destruction events, then a clean up routine becomes\n        // more cumbersome. More specific example of that is: your LifecycleObserver listens for\n        // a web connection, in the usual routine in OnStop method you report to a server that a\n        // session has just ended and you close the connection. Now let's assume now that you\n        // lost an internet and as a result you removed this observer. If you get destruction\n        // events in removeObserver, you should have a special case in your onStop method that\n        // checks if your web connection died and you shouldn't try to report anything to a server.\n        mObserverMap.remove(observer);\n    }\n\n    /**\n     * The number of observers.\n     *\n     * @return The number of observers.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public int getObserverCount() {\n        return mObserverMap.size();\n    }\n\n    @Override\n    public State getCurrentState() {\n        return mState;\n    }\n\n    static State getStateAfter(Event event) {\n        switch (event) {\n            case ON_CREATE:\n            case ON_STOP:\n                return CREATED;\n            case ON_START:\n            case ON_PAUSE:\n                return STARTED;\n            case ON_RESUME:\n                return RESUMED;\n            case ON_DESTROY:\n                return DESTROYED;\n            case ON_ANY:\n                break;\n        }\n        throw new IllegalArgumentException(\"Unexpected event value \" + event);\n    }\n\n    private static Event downEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n                throw new IllegalArgumentException();\n            case CREATED:\n                return ON_DESTROY;\n            case STARTED:\n                return ON_STOP;\n            case RESUMED:\n                return ON_PAUSE;\n            case DESTROYED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private static Event upEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n            case DESTROYED:\n                return ON_CREATE;\n            case CREATED:\n                return ON_START;\n            case STARTED:\n                return ON_RESUME;\n            case RESUMED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n\n    // happens only on the top of stack (never in reentrance),\n    // so it doesn't have to take in account parents\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // no need to check eldest for nullability, because isSynced does it for us.\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    static State min(@NonNull State state1, @Nullable State state2) {\n        return state2 != null && state2.compareTo(state1) < 0 ? state2 : state1;\n    }\n\n    static class ObserverWithState {\n        State mState;\n        GenericLifecycleObserver mLifecycleObserver;\n\n        ObserverWithState(LifecycleObserver observer, State initialState) {\n            mLifecycleObserver = Lifecycling.getCallback(observer);\n            mState = initialState;\n        }\n\n        void dispatchEvent(LifecycleOwner owner, Event event) {\n            State newState = getStateAfter(event);\n            mState = min(mState, newState);\n            mLifecycleObserver.onStateChanged(owner, event);\n            mState = newState;\n        }\n    }\n}\n```\n取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()->sync()->forwardPass()->内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。\n\n到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。\n\n\n```java\nprotected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\nprotected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            //noinspection unchecked\n            setValue((T) newValue);\n        }\n    };\n```\n```java\nprivate void dispatchingValue(@Nullable LifecycleBoundObserver initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<T>, LifecycleBoundObserver>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n\nprivate void considerNotify(LifecycleBoundObserver observer) {\n        if (!observer.active) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!isActiveState(observer.owner.getLifecycle().getCurrentState())) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.lastVersion >= mVersion) {\n            return;\n        }\n        observer.lastVersion = mVersion;\n        //noinspection unchecked\n        observer.observer.onChanged((T) mData);\n    }\n```\n在`LiveData`中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。\n这里有个逻辑需要注意，在这篇[文章](https://tech.meituan.com/Android_LiveDataBus.html \"文章\")中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。\n在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。\n\n## 总结\n上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。","source":"_posts/Android架构组件-LiveData使用与源码分析.md","raw":"---\ntitle: Android架构组件-LiveData使用与源码分析\ndate: 2018-12-18 15:39:37\ntags:\n---\n\n## 前言\n`LiveData`是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循`Activity`,`Fragment`或者`Service`等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。\n\n只有当 Observer 的 Lifecycle 对象处于 `STARTED` 或者 `RESUMED` 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于`DESTROYED`状态的时候，Observer会被相应的移除。\n\n###  LiveData的优点\n使用LiveData具有以下的有点：\n- **UI和实时数据保持一致** 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。\n**避免内存泄漏**-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。\n**不会再产生由于Activity处于stop状态而引起的崩溃**- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。\n**不需要再解决生命周期带来的问题**-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。\n**实时数据刷新**-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。\n**解决Configuration Change问题**-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。\n**资源共享**- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。\n\n\n## 添加LiveData\n\n### 添加google maven仓库\n在项目`build.gradle`中添加：\n```\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n```\n**AndroidX**\n```\ndependencies {\n    def lifecycle_version = \"2.0.0\"\n\n    // ViewModel and LiveData\n    implementation \"androidx.lifecycle:lifecycle-extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"androidx.lifecycle:lifecycle-livedata:$lifecycle_version\"\n\t\n    // optional - ReactiveStreams support for LiveData\n    implementation \"androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version\" // use -ktx for Kotlin\n\n    // optional - Test helpers for LiveData\n    testImplementation \"androidx.arch.core:core-testing:$lifecycle_version\"\n}\n```\n\n**AndroidX之前**\n```\ndependencies {\n    def lifecycle_version = \"1.1.1\"\n\n    // ViewModel and LiveData\n    implementation \"android.arch.lifecycle:extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"android.arch.lifecycle:livedata:$lifecycle_version\"\n    // optional - ReactiveStreams support for LiveData\n    implementation \"android.arch.lifecycle:reactivestreams:$lifecycle_version\"\n\n    // optional - Test helpers for LiveData\n    testImplementation \"android.arch.core:core-testing:$lifecycle_version\"\n}\n```\n### 创建LiveData对象\n\n**MutableLiveData**\n```\npublic class NameViewModel extends ViewModel {\n\n// Create a LiveData with a String\nprivate MutableLiveData<String> mCurrentName;\n\n    public MutableLiveData<String> getCurrentName() {\n        if (mCurrentName == null) {\n            mCurrentName = new MutableLiveData<String>();\n        }\n        return mCurrentName;\n    }\n\n// Rest of the ViewModel...\n}\n```\n```\npublic class NameActivity extends AppCompatActivity {\n\n    private NameViewModel mModel;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Other code to setup the activity...\n\n        // Get the ViewModel.\n        mModel = ViewModelProviders.of(this).get(NameViewModel.class);\n\n\n        // Create the observer which updates the UI.\n        final Observer<String> nameObserver = new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable final String newName) {\n                // Update the UI, in this case, a TextView.\n                mNameTextView.setText(newName);\n            }\n        };\n\n        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.\n        mModel.getCurrentName().observe(this, nameObserver);\n    }\n}\n```\n**MediatorLiveData**\n```\n LiveData liveData1 = ...;\n LiveData liveData2 = ...;\n\n MediatorLiveData liveDataMerger = new MediatorLiveData<>();\n liveDataMerger.addSource(liveData1, value -> liveDataMerger.setValue(value));\n liveDataMerger.addSource(liveData2, value -> liveDataMerger.setValue(value));\n```\n\n**使用单例模式**\n\n```\npublic class SingletonLiveData extends MutableLiveData<String> {\n\n    private static volatile SingletonLiveData instance;\n\n    public SingletonLiveData() {\n    }\n\n    public static SingletonLiveData getInstance() {\n        if (instance != null) {\n            return instance;\n        }\n        synchronized (SingletonLiveData.class) {\n            if (instance == null) {\n                instance = new SingletonLiveData();\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    protected void onActive() {\n        super.onActive();\n    }\n\n    @Override\n    protected void onInactive() {\n        super.onInactive();\n    }\n}\n```\n```java\nSingletonLiveData.getInstance().observe(this, new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable String s) {\n\n            }\n        });\n```\n```\nSingletonLiveData.getInstance().setValue(\"single\");\n```\n简单说明LiveData中的几个重要方法：\n**onActive() **- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。\n**onInactive()**- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。\n**setValue()**- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。\n**postValue()**- :当需要在非UI线程更新数据时调用此函数。\n\n需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。\n\n**数据转换**\nLiveData 还支持简单的数据变换。目前在 `Transformations` 类中有 map 和 switchMap 两个变换函数。\n\n- map 是把一个数据类型变换为另外一个数据类型。\n- switchMap 是把一个数据变化为另外一个 LiveData\n\n```java\nLiveData<User> userLiveData = ...;\nLiveData<String> userName = Transformations.map(userLiveData, user -> {\n    user.name + \" \" + user.lastName\n});\n```\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    private final MutableLiveData<String> addressInput = new MutableLiveData();\n    public final LiveData<String> postalCode =\n            Transformations.switchMap(addressInput, (address) -> {\n                return repository.getPostCode(address);\n             });\n\n  public MyViewModel(PostalCodeRepository repository) {\n      this.repository = repository\n  }\n\n  private void setInput(String address) {\n      addressInput.setValue(address);\n  }\n}\n```\n\n##  原理分析\n\n下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下\n```java\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && existing.owner != wrapper.owner) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n```\n从这段代码看出，当观察者所在的`LifecycleOwner`状态处于DESTROYED时，注册失败。当重复注册观察者时，`会抛出IllegalArgumentException`异常。通过这些验证后，向`Lifecycle`注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。`LifecycleOwner`是一个接口，只有一个方法getLifecycle()，`在Fragment`、`FragmentActivity`、`SupportActivity`、`LifecycleService`中均实现了这个方法。\n\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n```java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n\n```\n```java\npublic class Fragment implements ComponentCallbacks, OnCreateContextMenuListener, LifecycleOwner {\n\n    LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    @Override\n    public Lifecycle getLifecycle() {\n        return mLifecycleRegistry;\n    }\n\t\n\tvoid performStart() {\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.noteStateNotSaved();\n            mChildFragmentManager.execPendingActions();\n        }\n        mState = STARTED;\n        mCalled = false;\n        onStart();\n        if (!mCalled) {\n            throw new SuperNotCalledException(\"Fragment \" + this\n                    + \" did not call through to super.onStart()\");\n        }\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.dispatchStart();\n        }\n        if (mLoaderManager != null) {\n            mLoaderManager.doReportStart();\n        }\n        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n    }\n}\n```\n**LiveData中内部类LifecycleBoundObserver**\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n**LifecycleRegistry.java**\n```java\npublic class LifecycleRegistry extends Lifecycle {\n\n    private static final String LOG_TAG = \"LifecycleRegistry\";\n\n    /**\n     * Custom list that keeps observers and can handle removals / additions during traversal.\n     *\n     * Invariant: at any moment of time for observer1 & observer2:\n     * if addition_order(observer1) < addition_order(observer2), then\n     * state(observer1) >= state(observer2),\n     */\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n    /**\n     * Current state\n     */\n    private State mState;\n    /**\n     * The provider that owns this Lifecycle.\n     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak\n     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,\n     * because it keeps strong references on all other listeners, so you'll leak all of them as\n     * well.\n     */\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    private int mAddingObserverCounter = 0;\n\n    private boolean mHandlingEvent = false;\n    private boolean mNewEventOccurred = false;\n\n    // we have to keep it for cases:\n    // void onStart() {\n    //     mRegistry.removeObserver(this);\n    //     mRegistry.add(newObserver);\n    // }\n    // newObserver should be brought only to CREATED state during the execution of\n    // this onStart method. our invariant with mObserverMap doesn't help, because parent observer\n    // is no longer in the map.\n    private ArrayList<State> mParentStates = new ArrayList<>();\n\n    /**\n     * Creates a new LifecycleRegistry for the given provider.\n     * <p>\n     * You should usually create this inside your LifecycleOwner class's constructor and hold\n     * onto the same instance.\n     *\n     * @param provider The owner LifecycleOwner\n     */\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n    /**\n     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.\n     *\n     * @param state new state\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void markState(@NonNull State state) {\n        moveToState(state);\n    }\n\n    /**\n     * Sets the current state and notifies the observers.\n     * <p>\n     * Note that if the {@code currentState} is the same state as the last call to this method,\n     * calling this method has no effect.\n     *\n     * @param event The event that was received\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        if (mHandlingEvent || mAddingObserverCounter != 0) {\n            mNewEventOccurred = true;\n            // we will figure out what to do on upper level.\n            return;\n        }\n        mHandlingEvent = true;\n        sync();\n        mHandlingEvent = false;\n    }\n\n    private boolean isSynced() {\n        if (mObserverMap.size() == 0) {\n            return true;\n        }\n        State eldestObserverState = mObserverMap.eldest().getValue().mState;\n        State newestObserverState = mObserverMap.newest().getValue().mState;\n        return eldestObserverState == newestObserverState && mState == newestObserverState;\n    }\n\n    private State calculateTargetState(LifecycleObserver observer) {\n        Entry<LifecycleObserver, ObserverWithState> previous = mObserverMap.ceil(observer);\n\n        State siblingState = previous != null ? previous.getValue().mState : null;\n        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - 1)\n                : null;\n        return min(min(mState, siblingState), parentState);\n    }\n\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n\n        if (previous != null) {\n            return;\n        }\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            // it is null we should be destroyed. Fallback quickly\n            return;\n        }\n\n        boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n        State targetState = calculateTargetState(observer);\n        mAddingObserverCounter++;\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n\n        if (!isReentrance) {\n            // we do sync only on the top level.\n            sync();\n        }\n        mAddingObserverCounter--;\n    }\n\n    private void popParentState() {\n        mParentStates.remove(mParentStates.size() - 1);\n    }\n\n    private void pushParentState(State state) {\n        mParentStates.add(state);\n    }\n\n    @Override\n    public void removeObserver(@NonNull LifecycleObserver observer) {\n        // we consciously decided not to send destruction events here in opposition to addObserver.\n        // Our reasons for that:\n        // 1. These events haven't yet happened at all. In contrast to events in addObservers, that\n        // actually occurred but earlier.\n        // 2. There are cases when removeObserver happens as a consequence of some kind of fatal\n        // event. If removeObserver method sends destruction events, then a clean up routine becomes\n        // more cumbersome. More specific example of that is: your LifecycleObserver listens for\n        // a web connection, in the usual routine in OnStop method you report to a server that a\n        // session has just ended and you close the connection. Now let's assume now that you\n        // lost an internet and as a result you removed this observer. If you get destruction\n        // events in removeObserver, you should have a special case in your onStop method that\n        // checks if your web connection died and you shouldn't try to report anything to a server.\n        mObserverMap.remove(observer);\n    }\n\n    /**\n     * The number of observers.\n     *\n     * @return The number of observers.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public int getObserverCount() {\n        return mObserverMap.size();\n    }\n\n    @Override\n    public State getCurrentState() {\n        return mState;\n    }\n\n    static State getStateAfter(Event event) {\n        switch (event) {\n            case ON_CREATE:\n            case ON_STOP:\n                return CREATED;\n            case ON_START:\n            case ON_PAUSE:\n                return STARTED;\n            case ON_RESUME:\n                return RESUMED;\n            case ON_DESTROY:\n                return DESTROYED;\n            case ON_ANY:\n                break;\n        }\n        throw new IllegalArgumentException(\"Unexpected event value \" + event);\n    }\n\n    private static Event downEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n                throw new IllegalArgumentException();\n            case CREATED:\n                return ON_DESTROY;\n            case STARTED:\n                return ON_STOP;\n            case RESUMED:\n                return ON_PAUSE;\n            case DESTROYED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private static Event upEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n            case DESTROYED:\n                return ON_CREATE;\n            case CREATED:\n                return ON_START;\n            case STARTED:\n                return ON_RESUME;\n            case RESUMED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n\n    // happens only on the top of stack (never in reentrance),\n    // so it doesn't have to take in account parents\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // no need to check eldest for nullability, because isSynced does it for us.\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    static State min(@NonNull State state1, @Nullable State state2) {\n        return state2 != null && state2.compareTo(state1) < 0 ? state2 : state1;\n    }\n\n    static class ObserverWithState {\n        State mState;\n        GenericLifecycleObserver mLifecycleObserver;\n\n        ObserverWithState(LifecycleObserver observer, State initialState) {\n            mLifecycleObserver = Lifecycling.getCallback(observer);\n            mState = initialState;\n        }\n\n        void dispatchEvent(LifecycleOwner owner, Event event) {\n            State newState = getStateAfter(event);\n            mState = min(mState, newState);\n            mLifecycleObserver.onStateChanged(owner, event);\n            mState = newState;\n        }\n    }\n}\n```\n取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()->sync()->forwardPass()->内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。\n\n到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。\n\n\n```java\nprotected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\nprotected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            //noinspection unchecked\n            setValue((T) newValue);\n        }\n    };\n```\n```java\nprivate void dispatchingValue(@Nullable LifecycleBoundObserver initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<T>, LifecycleBoundObserver>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n\nprivate void considerNotify(LifecycleBoundObserver observer) {\n        if (!observer.active) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!isActiveState(observer.owner.getLifecycle().getCurrentState())) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.lastVersion >= mVersion) {\n            return;\n        }\n        observer.lastVersion = mVersion;\n        //noinspection unchecked\n        observer.observer.onChanged((T) mData);\n    }\n```\n在`LiveData`中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。\n这里有个逻辑需要注意，在这篇[文章](https://tech.meituan.com/Android_LiveDataBus.html \"文章\")中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。\n在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。\n\n## 总结\n上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。","slug":"Android架构组件-LiveData使用与源码分析","published":1,"updated":"2018-12-18T13:10:04.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptrtb6t0008b7vx6hhkj703","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>LiveData</code>是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循<code>Activity</code>,<code>Fragment</code>或者<code>Service</code>等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。</p>\n<p>只有当 Observer 的 Lifecycle 对象处于 <code>STARTED</code> 或者 <code>RESUMED</code> 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于<code>DESTROYED</code>状态的时候，Observer会被相应的移除。</p>\n<h3 id=\"LiveData的优点\"><a href=\"#LiveData的优点\" class=\"headerlink\" title=\"LiveData的优点\"></a>LiveData的优点</h3><p>使用LiveData具有以下的有点：</p>\n<ul>\n<li><strong>UI和实时数据保持一致</strong> 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。<br><strong>避免内存泄漏</strong>-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。<br><strong>不会再产生由于Activity处于stop状态而引起的崩溃</strong>- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。<br><strong>不需要再解决生命周期带来的问题</strong>-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。<br><strong>实时数据刷新</strong>-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。<br><strong>解决Configuration Change问题</strong>-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。<br><strong>资源共享</strong>- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。</li>\n</ul>\n<h2 id=\"添加LiveData\"><a href=\"#添加LiveData\" class=\"headerlink\" title=\"添加LiveData\"></a>添加LiveData</h2><h3 id=\"添加google-maven仓库\"><a href=\"#添加google-maven仓库\" class=\"headerlink\" title=\"添加google maven仓库\"></a>添加google maven仓库</h3><p>在项目<code>build.gradle</code>中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;2.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-livedata:$lifecycle_version&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version&quot; // use -ktx for Kotlin</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;androidx.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX之前</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;1.1.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:livedata:$lifecycle_version&quot;</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:reactivestreams:$lifecycle_version&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;android.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建LiveData对象\"><a href=\"#创建LiveData对象\" class=\"headerlink\" title=\"创建LiveData对象\"></a>创建LiveData对象</h3><p><strong>MutableLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameViewModel extends ViewModel &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// Create a LiveData with a String</span><br><span class=\"line\">private MutableLiveData&lt;String&gt; mCurrentName;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MutableLiveData&lt;String&gt; getCurrentName() &#123;</span><br><span class=\"line\">        if (mCurrentName == null) &#123;</span><br><span class=\"line\">            mCurrentName = new MutableLiveData&lt;String&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mCurrentName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Rest of the ViewModel...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private NameViewModel mModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Other code to setup the activity...</span><br><span class=\"line\"></span><br><span class=\"line\">        // Get the ViewModel.</span><br><span class=\"line\">        mModel = ViewModelProviders.of(this).get(NameViewModel.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Create the observer which updates the UI.</span><br><span class=\"line\">        final Observer&lt;String&gt; nameObserver = new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onChanged(@Nullable final String newName) &#123;</span><br><span class=\"line\">                // Update the UI, in this case, a TextView.</span><br><span class=\"line\">                mNameTextView.setText(newName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span><br><span class=\"line\">        mModel.getCurrentName().observe(this, nameObserver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>MediatorLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData liveData1 = ...;</span><br><span class=\"line\">LiveData liveData2 = ...;</span><br><span class=\"line\"></span><br><span class=\"line\">MediatorLiveData liveDataMerger = new MediatorLiveData&lt;&gt;();</span><br><span class=\"line\">liveDataMerger.addSource(liveData1, value -&gt; liveDataMerger.setValue(value));</span><br><span class=\"line\">liveDataMerger.addSource(liveData2, value -&gt; liveDataMerger.setValue(value));</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用单例模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingletonLiveData extends MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static volatile SingletonLiveData instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SingletonLiveData() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SingletonLiveData getInstance() &#123;</span><br><span class=\"line\">        if (instance != null) &#123;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        synchronized (SingletonLiveData.class) &#123;</span><br><span class=\"line\">            if (instance == null) &#123;</span><br><span class=\"line\">                instance = new SingletonLiveData();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onActive() &#123;</span><br><span class=\"line\">        super.onActive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onInactive() &#123;</span><br><span class=\"line\">        super.onInactive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().observe(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable String s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().setValue(&quot;single&quot;);</span><br></pre></td></tr></table></figure>\n<p>简单说明LiveData中的几个重要方法：<br><strong>onActive() </strong>- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。<br><strong>onInactive()</strong>- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。<br><strong>setValue()</strong>- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。<br><strong>postValue()</strong>- :当需要在非UI线程更新数据时调用此函数。</p>\n<p>需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。</p>\n<p><strong>数据转换</strong><br>LiveData 还支持简单的数据变换。目前在 <code>Transformations</code> 类中有 map 和 switchMap 两个变换函数。</p>\n<ul>\n<li>map 是把一个数据类型变换为另外一个数据类型。</li>\n<li>switchMap 是把一个数据变化为另外一个 LiveData</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData&lt;User&gt; userLiveData = ...;</span><br><span class=\"line\">LiveData&lt;String&gt; userName = Transformations.map(userLiveData, user -&gt; &#123;</span><br><span class=\"line\">    user.name + <span class=\"string\">\" \"</span> + user.lastName</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;String&gt; addressInput = <span class=\"keyword\">new</span> MutableLiveData();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;String&gt; postalCode =</span><br><span class=\"line\">            Transformations.switchMap(addressInput, (address) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.repository = repository</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setInput</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">      addressInput.setValue(address);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">    LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; existing.owner != wrapper.owner) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot add the same observer\"</span></span><br><span class=\"line\">                + <span class=\"string\">\" with different lifecycles\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这段代码看出，当观察者所在的<code>LifecycleOwner</code>状态处于DESTROYED时，注册失败。当重复注册观察者时，<code>会抛出IllegalArgumentException</code>异常。通过这些验证后，向<code>Lifecycle</code>注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。<code>LifecycleOwner</code>是一个接口，只有一个方法getLifecycle()，<code>在Fragment</code>、<code>FragmentActivity</code>、<code>SupportActivity</code>、<code>LifecycleService</code>中均实现了这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComponentCallbacks</span>, <span class=\"title\">OnCreateContextMenuListener</span>, <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleRegistry mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.noteStateNotSaved();</span><br><span class=\"line\">            mChildFragmentManager.execPendingActions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = STARTED;</span><br><span class=\"line\">        mCalled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        onStart();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mCalled) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(<span class=\"string\">\"Fragment \"</span> + <span class=\"keyword\">this</span></span><br><span class=\"line\">                    + <span class=\"string\">\" did not call through to super.onStart()\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.dispatchStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLoaderManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mLoaderManager.doReportStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>LiveData中内部类LifecycleBoundObserver</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>LifecycleRegistry.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOG_TAG = <span class=\"string\">\"LifecycleRegistry\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Custom list that keeps observers and can handle removals / additions during traversal.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Invariant: at any moment of time for observer1 &amp; observer2:</span></span><br><span class=\"line\"><span class=\"comment\">     * if addition_order(observer1) &lt; addition_order(observer2), then</span></span><br><span class=\"line\"><span class=\"comment\">     * state(observer1) &gt;= state(observer2),</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> FastSafeIterableMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Current state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The provider that owns this Lifecycle.</span></span><br><span class=\"line\"><span class=\"comment\">     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak</span></span><br><span class=\"line\"><span class=\"comment\">     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,</span></span><br><span class=\"line\"><span class=\"comment\">     * because it keeps strong references on all other listeners, so you'll leak all of them as</span></span><br><span class=\"line\"><span class=\"comment\">     * well.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mAddingObserverCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// we have to keep it for cases:</span></span><br><span class=\"line\">    <span class=\"comment\">// void onStart() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.removeObserver(this);</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.add(newObserver);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// newObserver should be brought only to CREATED state during the execution of</span></span><br><span class=\"line\">    <span class=\"comment\">// this onStart method. our invariant with mObserverMap doesn't help, because parent observer</span></span><br><span class=\"line\">    <span class=\"comment\">// is no longer in the map.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;State&gt; mParentStates = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new LifecycleRegistry for the given provider.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You should usually create this inside your LifecycleOwner class's constructor and hold</span></span><br><span class=\"line\"><span class=\"comment\">     * onto the same instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provider The owner LifecycleOwner</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(@NonNull LifecycleOwner provider)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state new state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(@NonNull State state)</span> </span>&#123;</span><br><span class=\"line\">        moveToState(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the current state and notifies the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that if the &#123;<span class=\"doctag\">@code</span> currentState&#125; is the same state as the last call to this method,</span></span><br><span class=\"line\"><span class=\"comment\">     * calling this method has no effect.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> event The event that was received</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        State next = getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mHandlingEvent || mAddingObserverCounter != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// we will figure out what to do on upper level.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSynced</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mObserverMap.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        State eldestObserverState = mObserverMap.eldest().getValue().mState;</span><br><span class=\"line\">        State newestObserverState = mObserverMap.newest().getValue().mState;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eldestObserverState == newestObserverState &amp;&amp; mState == newestObserverState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> State <span class=\"title\">calculateTargetState</span><span class=\"params\">(LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;LifecycleObserver, ObserverWithState&gt; previous = mObserverMap.ceil(observer);</span><br><span class=\"line\"></span><br><span class=\"line\">        State siblingState = previous != <span class=\"keyword\">null</span> ? previous.getValue().mState : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - <span class=\"number\">1</span>)</span><br><span class=\"line\">                : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(min(mState, siblingState), parentState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class=\"line\">        ObserverWithState statefulObserver = <span class=\"keyword\">new</span> ObserverWithState(observer, initialState);</span><br><span class=\"line\">        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// it is null we should be destroyed. Fallback quickly</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isReentrance = mAddingObserverCounter != <span class=\"number\">0</span> || mHandlingEvent;</span><br><span class=\"line\">        State targetState = calculateTargetState(observer);</span><br><span class=\"line\">        mAddingObserverCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isReentrance) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we do sync only on the top level.</span></span><br><span class=\"line\">            sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mAddingObserverCounter--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">popParentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.remove(mParentStates.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pushParentState</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.add(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// we consciously decided not to send destruction events here in opposition to addObserver.</span></span><br><span class=\"line\">        <span class=\"comment\">// Our reasons for that:</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. These events haven't yet happened at all. In contrast to events in addObservers, that</span></span><br><span class=\"line\">        <span class=\"comment\">// actually occurred but earlier.</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. There are cases when removeObserver happens as a consequence of some kind of fatal</span></span><br><span class=\"line\">        <span class=\"comment\">// event. If removeObserver method sends destruction events, then a clean up routine becomes</span></span><br><span class=\"line\">        <span class=\"comment\">// more cumbersome. More specific example of that is: your LifecycleObserver listens for</span></span><br><span class=\"line\">        <span class=\"comment\">// a web connection, in the usual routine in OnStop method you report to a server that a</span></span><br><span class=\"line\">        <span class=\"comment\">// session has just ended and you close the connection. Now let's assume now that you</span></span><br><span class=\"line\">        <span class=\"comment\">// lost an internet and as a result you removed this observer. If you get destruction</span></span><br><span class=\"line\">        <span class=\"comment\">// events in removeObserver, you should have a special case in your onStop method that</span></span><br><span class=\"line\">        <span class=\"comment\">// checks if your web connection died and you shouldn't try to report anything to a server.</span></span><br><span class=\"line\">        mObserverMap.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getObserverCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObserverMap.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">getStateAfter</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_CREATE:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_STOP:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CREATED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_START:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_PAUSE:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> STARTED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESUME:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> RESUMED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_DESTROY:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DESTROYED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_ANY:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected event value \"</span> + event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">downEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_DESTROY;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_STOP;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_PAUSE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">upEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_CREATE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_START;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_RESUME;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// happens only on the top of stack (never in reentrance),</span></span><br><span class=\"line\">    <span class=\"comment\">// so it doesn't have to take in account parents</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">\"LifecycleOwner is garbage collected, you shouldn't try dispatch \"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"new events from it.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// no need to check eldest for nullability, because isSynced does it for us.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">min</span><span class=\"params\">(@NonNull State state1, @Nullable State state2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state2 != <span class=\"keyword\">null</span> &amp;&amp; state2.compareTo(state1) &lt; <span class=\"number\">0</span> ? state2 : state1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWithState</span> </span>&#123;</span><br><span class=\"line\">        State mState;</span><br><span class=\"line\">        GenericLifecycleObserver mLifecycleObserver;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class=\"line\">            mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class=\"line\">            mState = initialState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchEvent</span><span class=\"params\">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class=\"line\">            State newState = getStateAfter(event);</span><br><span class=\"line\">            mState = min(mState, newState);</span><br><span class=\"line\">            mLifecycleObserver.onStateChanged(owner, event);</span><br><span class=\"line\">            mState = newState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()-&gt;sync()-&gt;forwardPass()-&gt;内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。</p>\n<p>到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">\"setValue\"</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(@Nullable LifecycleBoundObserver initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, LifecycleBoundObserver&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(LifecycleBoundObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.active) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we've not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isActiveState(observer.owner.getLifecycle().getCurrentState())) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.lastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.lastVersion = mVersion;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        observer.observer.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>LiveData</code>中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。<br>这里有个逻辑需要注意，在这篇<a href=\"https://tech.meituan.com/Android_LiveDataBus.html\" title=\"文章\" target=\"_blank\" rel=\"noopener\">文章</a>中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。<br>在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>LiveData</code>是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循<code>Activity</code>,<code>Fragment</code>或者<code>Service</code>等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。</p>\n<p>只有当 Observer 的 Lifecycle 对象处于 <code>STARTED</code> 或者 <code>RESUMED</code> 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于<code>DESTROYED</code>状态的时候，Observer会被相应的移除。</p>\n<h3 id=\"LiveData的优点\"><a href=\"#LiveData的优点\" class=\"headerlink\" title=\"LiveData的优点\"></a>LiveData的优点</h3><p>使用LiveData具有以下的有点：</p>\n<ul>\n<li><strong>UI和实时数据保持一致</strong> 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。<br><strong>避免内存泄漏</strong>-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。<br><strong>不会再产生由于Activity处于stop状态而引起的崩溃</strong>- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。<br><strong>不需要再解决生命周期带来的问题</strong>-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。<br><strong>实时数据刷新</strong>-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。<br><strong>解决Configuration Change问题</strong>-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。<br><strong>资源共享</strong>- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。</li>\n</ul>\n<h2 id=\"添加LiveData\"><a href=\"#添加LiveData\" class=\"headerlink\" title=\"添加LiveData\"></a>添加LiveData</h2><h3 id=\"添加google-maven仓库\"><a href=\"#添加google-maven仓库\" class=\"headerlink\" title=\"添加google maven仓库\"></a>添加google maven仓库</h3><p>在项目<code>build.gradle</code>中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;2.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-livedata:$lifecycle_version&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version&quot; // use -ktx for Kotlin</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;androidx.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX之前</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;1.1.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:livedata:$lifecycle_version&quot;</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:reactivestreams:$lifecycle_version&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;android.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建LiveData对象\"><a href=\"#创建LiveData对象\" class=\"headerlink\" title=\"创建LiveData对象\"></a>创建LiveData对象</h3><p><strong>MutableLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameViewModel extends ViewModel &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// Create a LiveData with a String</span><br><span class=\"line\">private MutableLiveData&lt;String&gt; mCurrentName;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MutableLiveData&lt;String&gt; getCurrentName() &#123;</span><br><span class=\"line\">        if (mCurrentName == null) &#123;</span><br><span class=\"line\">            mCurrentName = new MutableLiveData&lt;String&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mCurrentName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Rest of the ViewModel...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private NameViewModel mModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Other code to setup the activity...</span><br><span class=\"line\"></span><br><span class=\"line\">        // Get the ViewModel.</span><br><span class=\"line\">        mModel = ViewModelProviders.of(this).get(NameViewModel.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Create the observer which updates the UI.</span><br><span class=\"line\">        final Observer&lt;String&gt; nameObserver = new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onChanged(@Nullable final String newName) &#123;</span><br><span class=\"line\">                // Update the UI, in this case, a TextView.</span><br><span class=\"line\">                mNameTextView.setText(newName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span><br><span class=\"line\">        mModel.getCurrentName().observe(this, nameObserver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>MediatorLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData liveData1 = ...;</span><br><span class=\"line\">LiveData liveData2 = ...;</span><br><span class=\"line\"></span><br><span class=\"line\">MediatorLiveData liveDataMerger = new MediatorLiveData&lt;&gt;();</span><br><span class=\"line\">liveDataMerger.addSource(liveData1, value -&gt; liveDataMerger.setValue(value));</span><br><span class=\"line\">liveDataMerger.addSource(liveData2, value -&gt; liveDataMerger.setValue(value));</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用单例模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingletonLiveData extends MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static volatile SingletonLiveData instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SingletonLiveData() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SingletonLiveData getInstance() &#123;</span><br><span class=\"line\">        if (instance != null) &#123;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        synchronized (SingletonLiveData.class) &#123;</span><br><span class=\"line\">            if (instance == null) &#123;</span><br><span class=\"line\">                instance = new SingletonLiveData();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onActive() &#123;</span><br><span class=\"line\">        super.onActive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onInactive() &#123;</span><br><span class=\"line\">        super.onInactive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().observe(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable String s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().setValue(&quot;single&quot;);</span><br></pre></td></tr></table></figure>\n<p>简单说明LiveData中的几个重要方法：<br><strong>onActive() </strong>- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。<br><strong>onInactive()</strong>- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。<br><strong>setValue()</strong>- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。<br><strong>postValue()</strong>- :当需要在非UI线程更新数据时调用此函数。</p>\n<p>需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。</p>\n<p><strong>数据转换</strong><br>LiveData 还支持简单的数据变换。目前在 <code>Transformations</code> 类中有 map 和 switchMap 两个变换函数。</p>\n<ul>\n<li>map 是把一个数据类型变换为另外一个数据类型。</li>\n<li>switchMap 是把一个数据变化为另外一个 LiveData</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData&lt;User&gt; userLiveData = ...;</span><br><span class=\"line\">LiveData&lt;String&gt; userName = Transformations.map(userLiveData, user -&gt; &#123;</span><br><span class=\"line\">    user.name + <span class=\"string\">\" \"</span> + user.lastName</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;String&gt; addressInput = <span class=\"keyword\">new</span> MutableLiveData();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;String&gt; postalCode =</span><br><span class=\"line\">            Transformations.switchMap(addressInput, (address) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.repository = repository</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setInput</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">      addressInput.setValue(address);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">    LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; existing.owner != wrapper.owner) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot add the same observer\"</span></span><br><span class=\"line\">                + <span class=\"string\">\" with different lifecycles\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这段代码看出，当观察者所在的<code>LifecycleOwner</code>状态处于DESTROYED时，注册失败。当重复注册观察者时，<code>会抛出IllegalArgumentException</code>异常。通过这些验证后，向<code>Lifecycle</code>注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。<code>LifecycleOwner</code>是一个接口，只有一个方法getLifecycle()，<code>在Fragment</code>、<code>FragmentActivity</code>、<code>SupportActivity</code>、<code>LifecycleService</code>中均实现了这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComponentCallbacks</span>, <span class=\"title\">OnCreateContextMenuListener</span>, <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleRegistry mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.noteStateNotSaved();</span><br><span class=\"line\">            mChildFragmentManager.execPendingActions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = STARTED;</span><br><span class=\"line\">        mCalled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        onStart();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mCalled) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(<span class=\"string\">\"Fragment \"</span> + <span class=\"keyword\">this</span></span><br><span class=\"line\">                    + <span class=\"string\">\" did not call through to super.onStart()\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.dispatchStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLoaderManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mLoaderManager.doReportStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>LiveData中内部类LifecycleBoundObserver</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>LifecycleRegistry.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOG_TAG = <span class=\"string\">\"LifecycleRegistry\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Custom list that keeps observers and can handle removals / additions during traversal.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Invariant: at any moment of time for observer1 &amp; observer2:</span></span><br><span class=\"line\"><span class=\"comment\">     * if addition_order(observer1) &lt; addition_order(observer2), then</span></span><br><span class=\"line\"><span class=\"comment\">     * state(observer1) &gt;= state(observer2),</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> FastSafeIterableMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Current state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The provider that owns this Lifecycle.</span></span><br><span class=\"line\"><span class=\"comment\">     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak</span></span><br><span class=\"line\"><span class=\"comment\">     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,</span></span><br><span class=\"line\"><span class=\"comment\">     * because it keeps strong references on all other listeners, so you'll leak all of them as</span></span><br><span class=\"line\"><span class=\"comment\">     * well.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mAddingObserverCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// we have to keep it for cases:</span></span><br><span class=\"line\">    <span class=\"comment\">// void onStart() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.removeObserver(this);</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.add(newObserver);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// newObserver should be brought only to CREATED state during the execution of</span></span><br><span class=\"line\">    <span class=\"comment\">// this onStart method. our invariant with mObserverMap doesn't help, because parent observer</span></span><br><span class=\"line\">    <span class=\"comment\">// is no longer in the map.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;State&gt; mParentStates = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new LifecycleRegistry for the given provider.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You should usually create this inside your LifecycleOwner class's constructor and hold</span></span><br><span class=\"line\"><span class=\"comment\">     * onto the same instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provider The owner LifecycleOwner</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(@NonNull LifecycleOwner provider)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state new state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(@NonNull State state)</span> </span>&#123;</span><br><span class=\"line\">        moveToState(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the current state and notifies the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that if the &#123;<span class=\"doctag\">@code</span> currentState&#125; is the same state as the last call to this method,</span></span><br><span class=\"line\"><span class=\"comment\">     * calling this method has no effect.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> event The event that was received</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        State next = getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mHandlingEvent || mAddingObserverCounter != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// we will figure out what to do on upper level.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSynced</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mObserverMap.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        State eldestObserverState = mObserverMap.eldest().getValue().mState;</span><br><span class=\"line\">        State newestObserverState = mObserverMap.newest().getValue().mState;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eldestObserverState == newestObserverState &amp;&amp; mState == newestObserverState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> State <span class=\"title\">calculateTargetState</span><span class=\"params\">(LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;LifecycleObserver, ObserverWithState&gt; previous = mObserverMap.ceil(observer);</span><br><span class=\"line\"></span><br><span class=\"line\">        State siblingState = previous != <span class=\"keyword\">null</span> ? previous.getValue().mState : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - <span class=\"number\">1</span>)</span><br><span class=\"line\">                : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(min(mState, siblingState), parentState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class=\"line\">        ObserverWithState statefulObserver = <span class=\"keyword\">new</span> ObserverWithState(observer, initialState);</span><br><span class=\"line\">        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// it is null we should be destroyed. Fallback quickly</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isReentrance = mAddingObserverCounter != <span class=\"number\">0</span> || mHandlingEvent;</span><br><span class=\"line\">        State targetState = calculateTargetState(observer);</span><br><span class=\"line\">        mAddingObserverCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isReentrance) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we do sync only on the top level.</span></span><br><span class=\"line\">            sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mAddingObserverCounter--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">popParentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.remove(mParentStates.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pushParentState</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.add(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// we consciously decided not to send destruction events here in opposition to addObserver.</span></span><br><span class=\"line\">        <span class=\"comment\">// Our reasons for that:</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. These events haven't yet happened at all. In contrast to events in addObservers, that</span></span><br><span class=\"line\">        <span class=\"comment\">// actually occurred but earlier.</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. There are cases when removeObserver happens as a consequence of some kind of fatal</span></span><br><span class=\"line\">        <span class=\"comment\">// event. If removeObserver method sends destruction events, then a clean up routine becomes</span></span><br><span class=\"line\">        <span class=\"comment\">// more cumbersome. More specific example of that is: your LifecycleObserver listens for</span></span><br><span class=\"line\">        <span class=\"comment\">// a web connection, in the usual routine in OnStop method you report to a server that a</span></span><br><span class=\"line\">        <span class=\"comment\">// session has just ended and you close the connection. Now let's assume now that you</span></span><br><span class=\"line\">        <span class=\"comment\">// lost an internet and as a result you removed this observer. If you get destruction</span></span><br><span class=\"line\">        <span class=\"comment\">// events in removeObserver, you should have a special case in your onStop method that</span></span><br><span class=\"line\">        <span class=\"comment\">// checks if your web connection died and you shouldn't try to report anything to a server.</span></span><br><span class=\"line\">        mObserverMap.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getObserverCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObserverMap.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">getStateAfter</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_CREATE:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_STOP:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CREATED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_START:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_PAUSE:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> STARTED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESUME:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> RESUMED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_DESTROY:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DESTROYED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_ANY:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected event value \"</span> + event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">downEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_DESTROY;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_STOP;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_PAUSE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">upEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_CREATE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_START;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_RESUME;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// happens only on the top of stack (never in reentrance),</span></span><br><span class=\"line\">    <span class=\"comment\">// so it doesn't have to take in account parents</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">\"LifecycleOwner is garbage collected, you shouldn't try dispatch \"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"new events from it.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// no need to check eldest for nullability, because isSynced does it for us.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">min</span><span class=\"params\">(@NonNull State state1, @Nullable State state2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state2 != <span class=\"keyword\">null</span> &amp;&amp; state2.compareTo(state1) &lt; <span class=\"number\">0</span> ? state2 : state1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWithState</span> </span>&#123;</span><br><span class=\"line\">        State mState;</span><br><span class=\"line\">        GenericLifecycleObserver mLifecycleObserver;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class=\"line\">            mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class=\"line\">            mState = initialState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchEvent</span><span class=\"params\">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class=\"line\">            State newState = getStateAfter(event);</span><br><span class=\"line\">            mState = min(mState, newState);</span><br><span class=\"line\">            mLifecycleObserver.onStateChanged(owner, event);</span><br><span class=\"line\">            mState = newState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()-&gt;sync()-&gt;forwardPass()-&gt;内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。</p>\n<p>到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">\"setValue\"</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(@Nullable LifecycleBoundObserver initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, LifecycleBoundObserver&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(LifecycleBoundObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.active) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we've not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isActiveState(observer.owner.getLifecycle().getCurrentState())) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.lastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.lastVersion = mVersion;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        observer.observer.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>LiveData</code>中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。<br>这里有个逻辑需要注意，在这篇<a href=\"https://tech.meituan.com/Android_LiveDataBus.html\" title=\"文章\" target=\"_blank\" rel=\"noopener\">文章</a>中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。<br>在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。</p>\n"}],"PostAsset":[{"_id":"source/_posts/使用AS开发gradle插件入门/1.png","post":"cjptrtb1k0004b7vx7p2yb0yr","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/使用AS开发gradle插件入门/2.png","post":"cjptrtb1k0004b7vx7p2yb0yr","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/使用AS开发gradle插件入门/3.png","post":"cjptrtb1k0004b7vx7p2yb0yr","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/使用AS开发gradle插件入门/4.png","post":"cjptrtb1k0004b7vx7p2yb0yr","slug":"4.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjptrtb1k0004b7vx7p2yb0yr","tag_id":"cjptrtb1l0005b7vxrr3j7g4n","_id":"cjptrtb1n0006b7vx6knhkrgg"}],"Tag":[{"name":"gradle插件","_id":"cjptrtb1l0005b7vxrr3j7g4n"}]}}