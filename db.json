{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":1,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":1,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":1,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":1,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":1,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/archer/.eslintrc.json","hash":"35eeca97fa5a2d0c6d78ef1257c58f03c42d43df","modified":1545219606990},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1545219606990},{"_id":"themes/archer/.gitignore","hash":"e2d7fa953bade3b94ed1cab25ffcf442c7540433","modified":1545219606990},{"_id":"themes/archer/.prettierignore","hash":"58caf761f07e5df9cdc21f7f19f0670fde41089b","modified":1545219606990},{"_id":"themes/archer/.prettierrc.js","hash":"875b0b95f6eb24a23e4ea83a75709b97897135e0","modified":1545219606990},{"_id":"themes/archer/LICENSE","hash":"0da0c361bf299375739c6b668a44af0f5faf37bb","modified":1545219606990},{"_id":"themes/archer/README.md","hash":"e3f0d1666bfb145489200a79c25c0f3fafefbc67","modified":1545219606990},{"_id":"themes/archer/_config.yml","hash":"6497cb1b7d36bf098faa39c3dd457b5a88bd64c7","modified":1548840704123},{"_id":"themes/archer/gulpfile.js","hash":"46dfe693b00ac4dea4d1b1af56f5ced4ee095c10","modified":1545219606990},{"_id":"themes/archer/package.json","hash":"531fe40833ca63493f62adfa249b6434310a2d0a","modified":1545219606990},{"_id":"themes/archer/webpack.config.js","hash":"d20b6350c50e2981484cb9356a3e21a2124bcd72","modified":1545219606998},{"_id":"themes/archer/webpack.prod.js","hash":"48de76cfa6274895801d3afc89ecbf04ee182a1c","modified":1545219606998},{"_id":"source/_posts/Android性能优化【ANR机制总结与问题分析】.md","hash":"73ea69438c883957e9ec5d14ad77b3d2bcd50653","modified":1545119718031},{"_id":"source/_posts/Android性能优化【应用启动优化与白屏源码分析】.md","hash":"d0990d4b3403a980ecd998e918fb8ffe6eac3cb8","modified":1546956214388},{"_id":"source/_posts/Android性能优化【数据结构篇】.md","hash":"ac077f534a6d55537084d906f4a60b603b7fed4a","modified":1545119718031},{"_id":"source/_posts/Android架构组件-LiveData使用与源码分析.md","hash":"a3702b3ecb40931fb0106deff956509cf974c33e","modified":1545138604999},{"_id":"source/_posts/Android进阶之Aspectj-in-Android入门.md","hash":"ad4aaf6302d1c75e780237950ccb6c5e8adef6bc","modified":1547453086692},{"_id":"source/_posts/HTTPS握手过程详解与优化方法.md","hash":"1e4a0d75f5e509cf4ebc269222f5d719f42d3441","modified":1548752503780},{"_id":"source/_posts/Hexo简易教程.md","hash":"0a8c6fbea029553e52fb534d7d5a6f40ee410b13","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门.md","hash":"95f2a69061e4523987ac6e18cdba6d6dce80496a","modified":1545119718031},{"_id":"source/_posts/工具汇总.md","hash":"bd0b568bc66b5c736caf13b689feb65207315a7b","modified":1545119718031},{"_id":"source/about/index.md","hash":"809f2df789fbcbd1ffa10022a509e86faac5a7f0","modified":1545119718031},{"_id":"themes/archer/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1545219606954},{"_id":"themes/archer/.git/config","hash":"365550109613b44d4f847676158291a7370964b4","modified":1545219606954},{"_id":"themes/archer/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1545219400146},{"_id":"themes/archer/.git/index","hash":"b1c187382a0641cf0fc374398591d95d35b23b0b","modified":1548749635608},{"_id":"themes/archer/.git/packed-refs","hash":"abdf098f2b5024adeca17d68c638a53a6346e04b","modified":1545219606942},{"_id":"themes/archer/.git/shallow","hash":"a348fab820e88d801db0d6877198f89aa953bca0","modified":1545219403622},{"_id":"themes/archer/dev/archer.sh","hash":"4065c4e55462d5ecf016464adea0d1db967ef4b4","modified":1545219606990},{"_id":"themes/archer/docs/README-en.md","hash":"f325565c0bb94501fd046268659c7752709895d1","modified":1545219606990},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"0bb09c3c9d5f56820cb84e3316f60352b731d70c","modified":1545219606990},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"effc2bc9e0cecfd228b19283337ff29649ea5985","modified":1545219606990},{"_id":"themes/archer/languages/default.yml","hash":"d56b6923c70efdef09cd1f0270d7adc9cc338f6b","modified":1545219606990},{"_id":"themes/archer/languages/en.yml","hash":"ad75d3e5f7f5f0463d3077e1b5a26f40938a1faa","modified":1545219606990},{"_id":"themes/archer/layout/404.ejs","hash":"879641b1b5e49c43f2e096cad281f7d74df05127","modified":1545219606990},{"_id":"themes/archer/layout/about.ejs","hash":"06019d835c0a51fed8aa086d1dfcf368f9921b42","modified":1545219606990},{"_id":"themes/archer/layout/index.ejs","hash":"716ba4a30860e36077dfdfffa02c1cd60301d8a3","modified":1545219606990},{"_id":"themes/archer/layout/layout.ejs","hash":"08ebd10c1b2bfc11be8f5115a836a98e6c6ba13c","modified":1545219606990},{"_id":"themes/archer/layout/post.ejs","hash":"b61156aff41641a14d5e4e45d9fd776309f2801a","modified":1545219606990},{"_id":"themes/archer/layout/site-meta.ejs","hash":"d866aa1a892d4bfe3368f6dbd0f1baa8c5831947","modified":1545219606990},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548387743050.png","hash":"c024ec3b53cbbdb469ac55ef7cd192421d584fc7","modified":1548387743054},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548388040046.png","hash":"da59e914b321d1e1fdf947e59d5a148fb81ab2b8","modified":1548388040046},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548398905865.png","hash":"c3e9a2555ee9d4c4240bae0e3be02b9e84246861","modified":1548398905870},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548399295697.png","hash":"bc64a0efea8c932c4fad649043c9ef8e1c4ad6b7","modified":1548399295706},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548665022002.png","hash":"18910e3d928f43a86c88632af040d8b729e27516","modified":1548665022012},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548665070317.png","hash":"6dfd721a3c5a5c63bf60dd4717867b898be7dbc6","modified":1548665070324},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/930623111-59ed85819d22b_articlex.png","hash":"dd94bdcf1b456d8837cb99e3edade0f759885894","modified":1548751569832},{"_id":"source/_posts/使用AS开发gradle插件入门/1.png","hash":"6170aae86d86b4ffa8a1e3dbbb96728e333edd49","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门/2.png","hash":"80ad7248d7047dabebce232b7af0aab1d2bf7746","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门/3.png","hash":"b10e1c60b647e955474c473dad08325795407fa5","modified":1545119718031},{"_id":"source/_posts/使用AS开发gradle插件入门/4.png","hash":"234de57d5ea5a0b953678013231370a7669a7208","modified":1545119718031},{"_id":"themes/archer/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1545219400138},{"_id":"themes/archer/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1545219400138},{"_id":"themes/archer/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1545219400138},{"_id":"themes/archer/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1545219400138},{"_id":"themes/archer/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1545219400138},{"_id":"themes/archer/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1545219400138},{"_id":"themes/archer/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1545219400138},{"_id":"themes/archer/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1545219400138},{"_id":"themes/archer/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1545219400138},{"_id":"themes/archer/.git/logs/HEAD","hash":"80d0cf9320c07fbd7f6b2c0ab5513dfc67824984","modified":1545219606954},{"_id":"themes/archer/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1545219400146},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"012bd3afea5565204f75d8c89048ad33b9c2f948","modified":1545219606990},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"886fb1252702d46c89536b579d35ce49e53ec54d","modified":1545219606990},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"4bf3c8ebef14a81bb55e8e0468d816e83c4133ac","modified":1545219606990},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"2f5f9073378f628a9124792b5301c1540bc5a264","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"82203d9a1c6e16ef2d37b8b587f56bf6d16edaf2","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"7bfb8af21f7d30780d1a3af5484760b07b4fbb1d","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"f2e8d4dfd11d879491a4b10f74f8c886cd392240","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"12e28693dc53cab5f6fd389f15ea0f811c9c37e9","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"2aea84cb43f4479131620b3c3dfd7cebe9be36ba","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"743d97452d4ac358e631c43c9c2120aafdfd3e24","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"2d068432031b3bebf9438c775370a2d1b4492d6b","modified":1545219606990},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"418559ab11726f69621c3a58cd21903adff1e48e","modified":1545219606990},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"cd0d34a811dc4666980d57c00d70dd82bd5450eb","modified":1545219606990},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1545219606990},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1545219606994},{"_id":"themes/archer/source/assets/loading.svg","hash":"45be17d07697d604d8981890eb21e308530c7a38","modified":1545219606994},{"_id":"themes/archer/source/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1545219606994},{"_id":"themes/archer/source/css/style.css","hash":"5d5e869db0c62957d59c6865baaecd1428c51804","modified":1545219606994},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1545219606994},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1545219606994},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1545219606998},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1545219606998},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1545219606998},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1545219606998},{"_id":"themes/archer/src/js/browser.js","hash":"ce061db99db5b880db0ddb768246352ca885b13c","modified":1545219606998},{"_id":"themes/archer/src/js/fancybox.js","hash":"0daf0e83deca055102268e3bd95cb1962acc2264","modified":1545219606998},{"_id":"themes/archer/src/js/init.js","hash":"346c6ef75ae85e4350c1b0811985172fdaa0d3a5","modified":1545219606998},{"_id":"themes/archer/src/js/initSidebar.js","hash":"b25615ff254913db83e2a20263d445f35083843b","modified":1545219606998},{"_id":"themes/archer/src/js/main.js","hash":"e1a48d5822326792e38d44efee86e01473549eba","modified":1545219606998},{"_id":"themes/archer/src/js/mobile.js","hash":"228a68d851517b5e47d2132f1d499cb812a64171","modified":1545219606998},{"_id":"themes/archer/src/js/scroll.js","hash":"aa2315a80daaa183a7e462c7e879ff9d2f050933","modified":1545219606998},{"_id":"themes/archer/src/js/search.js","hash":"2e59ac745da7c22801d9029cf9904a4fc3c384f1","modified":1545219606998},{"_id":"themes/archer/src/js/share.js","hash":"1314b19a852e291e35d6809f7f58652d3e7c524c","modified":1545219606998},{"_id":"themes/archer/src/js/sidebar.js","hash":"68d5fe0ee5e86df810d304e5efe11e5e1fddc46d","modified":1545219606998},{"_id":"themes/archer/src/js/tag.js","hash":"e0f0a914c02922e42977d78dc4993b3855167cd8","modified":1545219606998},{"_id":"themes/archer/src/js/toc.js","hash":"b3482031e4c8728535d480bfaec76229469e3aba","modified":1545219606998},{"_id":"themes/archer/src/js/util.js","hash":"27de6446892bcf399430dd5776df0b8759ca0eea","modified":1545219606998},{"_id":"themes/archer/src/scss/_common.scss","hash":"dedc313b082e0a16daf87213badd21b13be11af8","modified":1545219606998},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"e7deb20a16868ae9d3e35ba3c5693de71fdf6999","modified":1545219606998},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"a2dbeb38ad08bb8975856d75954cc697bf8e5ff7","modified":1545219606998},{"_id":"themes/archer/src/scss/_variables.scss","hash":"136e5d990c4f8eadf6cabdfa5a053941e90bcd20","modified":1548839582683},{"_id":"themes/archer/src/scss/mobile.scss","hash":"aadc2fbf37fefc2ad391d8172d5b61817f9db0c5","modified":1545219606998},{"_id":"themes/archer/src/scss/style.scss","hash":"78e31370d45089b97fa91929345f1a29f2e6a0a2","modified":1545219606998},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548387314931.png","hash":"1b60a7970e8f746414d96427510012e7cbe25299","modified":1548751286980},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548387314934.png","hash":"743464f97d66e1cb6aaa2d5ed8e20b786948d9d6","modified":1548387315010},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548397164402.png","hash":"db689052512303270b126e84831b1e14190dc049","modified":1548397164430},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/tsl-ssl.png","hash":"554f645f3ca56c403f4faf858f386f1211eb5405","modified":1547177620685},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545219606990},{"_id":"themes/archer/package-lock.json","hash":"89a3b67d32f6916cdc21d590d87e43d8a44be8c3","modified":1545219606990},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1545219606994},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1545219606994},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1545219606994},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1545219606994},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1545219606998},{"_id":"themes/archer/.git/objects/pack/pack-a7c0398e29ce560748761265df0e00f201a7048c.idx","hash":"b5d1529a5f5466dc664fada2e855f0fdae588f9b","modified":1545219606854},{"_id":"themes/archer/.git/refs/heads/master","hash":"a348fab820e88d801db0d6877198f89aa953bca0","modified":1545219606954},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"7691642fb9375607e0ac988a7420999e242cb2c9","modified":1545219606990},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cadd97820a23d01d8b7e2f19a86e5290cef5a8a6","modified":1545219606990},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"794647a8a4ac9e1d01d74c07717175a141b1e01c","modified":1545219606990},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"b27469f19f35ec2037c7bce736a12e9dfb5e360b","modified":1545219606990},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"2154360e330dab94540e168e9d301c7b7091968e","modified":1545219606990},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"790d76f2667377db78a7d04bad8d629e47e7aab0","modified":1545219606990},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"c03e16a7741908c207bf58363dcd1349cb639ef8","modified":1545219606990},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"291cc0a4a444a93b93c32e2c39383c70e36e46de","modified":1545219606990},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"daa78b17a773bca569f1c8ca2c916495ca138da6","modified":1545219606990},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"147214469c4909eb94943599883f9fa0f3cc090d","modified":1545219606990},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"2d38af7cb5aabc0af99de239bd180c516ec4c56c","modified":1545219606990},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"d6e1a192cac5dcf365ce1a52df4f23feafeeb849","modified":1545219606990},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"097a83b3547eb5f3492b59583aa6d5d2dbba552f","modified":1509965104690},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"a2b56f441a9a44d7f5b9b41eaa8136321328d7e9","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"c679578d2feb0bd7d3f80c2f693ba58cbca4428b","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"fa993cf0bbe0086cd8ec3d9a639b2d5b28ccfa8e","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"7c557844850d53cc4fc36aaf6d59847d8f238947","modified":1545219606998},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1545219606990},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1545219606994},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"0cb1fe3250497d3d809164d25cad45e39fa0cb88","modified":1534903140786},{"_id":"themes/archer/.git/logs/refs/heads/master","hash":"80d0cf9320c07fbd7f6b2c0ab5513dfc67824984","modified":1545219606954},{"_id":"themes/archer/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1545219606942},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"726c543ee066e0b3222b236d9b4ef0109c0bdddf","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"77003ff22b1a10fae2d2768938277959b3f93a72","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"a1569f39eccd64a12425d81b794c53df126a4d87","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"67c2e697a5fbb3b8006cf358ea45eb7f75b496f8","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"0c986b52ce9083f08c37c5c9b5de045ac5e1d2fa","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"f2514031f9d7e4ed4a126694e78618ce6ff3a574","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"9c9a4e470da8732c9a3be3d5ce0d2f80f53714fe","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"9ab6f96d0df0c4ad4c72e2515fa2599d487d8f1a","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"14bc42292873880c61b5fa9f47ee9d2e08d46871","modified":1545219606998},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"981a94978535769cb51c29e12b627f83c6fcedc5","modified":1545219606998},{"_id":"themes/archer/.git/logs/refs/remotes/origin/HEAD","hash":"80d0cf9320c07fbd7f6b2c0ab5513dfc67824984","modified":1545219606954},{"_id":"themes/archer/.git/objects/pack/pack-a7c0398e29ce560748761265df0e00f201a7048c.pack","hash":"f2c3dafff2294ec0dbeb453c5b31101c92286be7","modified":1545219606854},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"5088ada0d99f70ef268e746e7a6a4374546752dc","modified":1548840974643}],"Category":[],"Data":[],"Page":[{"title":"About","date":"2018-07-24T09:26:45.000Z","_content":"\n- 但行好事，莫问前程\n\n- [GitHub](https://github.com/tanhuanpei/)","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-07-24 17:26:45\n---\n\n- 但行好事，莫问前程\n\n- [GitHub](https://github.com/tanhuanpei/)","updated":"2018-12-18T07:55:18.031Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjrizz0pb000bnrvx2ep0pck1","content":"<ul>\n<li><p>但行好事，莫问前程</p>\n</li>\n<li><p><a href=\"https://github.com/tanhuanpei/\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>但行好事，莫问前程</p>\n</li>\n<li><p><a href=\"https://github.com/tanhuanpei/\" target=\"_blank\" rel=\"noopener\">GitHub</a></p>\n</li>\n</ul>\n"}],"Post":[{"title":"Android性能优化【ANR机制总结与问题分析】","date":"2018-09-12T12:36:22.000Z","_content":"","source":"_posts/Android性能优化【ANR机制总结与问题分析】.md","raw":"---\ntitle: Android性能优化【ANR机制总结与问题分析】\ndate: 2018-09-12 20:36:22\ntags:\n---\n","slug":"Android性能优化【ANR机制总结与问题分析】","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0on0000nrvxklei140q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Android性能优化【应用启动优化与白屏源码分析】","date":"2019-01-08T14:01:27.000Z","_content":"## 白屏是什么？\n在Android系统中，Activity组件在启动之后，并且在它的窗口显示出来之前，可以显示一个启动窗口。这个启动窗口可以看作是Activity组件的预览窗口，是由WindowManagerService服务统一管理的，即由WindowManagerService服务负责启动和结束。\nActivity组件的启动窗口是由ActivityManagerService服务来决定是否要显示的。如果需要显示，那么ActivityManagerService服务就会通知WindowManagerService服务来为正在启动的Activity组件显示一个启动窗口，而WindowManagerService服务又是通过窗口管理策略类PhoneWindowManager来创建这个启动窗口的。这个过程如图所示。\n![](https://app.yinxiang.com/shard/s8/res/03c1489d-203b-4e4a-a3bc-bd9cd3d1af66.jpg)\n\n窗口管理策略类PhoneWindowManager创建完成Activity组件的启动窗口之后，就会请求WindowManagerService服务将该启动窗口显示出来。当Activity组件启动完成，并且它的窗口也显示出来的时候，WindowManagerService服务就会结束显示它的启动窗口。\n\n## 如何检测App启动时间\n### ADB命令\n`adb shell am start -W -S com.xrom.intl.appcenter/com.xrom.intl.appcenter.ui.main.MainActivity`\n```shell\nActivity: com.xrom.intl.appcenter/.ui.main.MainActivity\nThisTime: 1258\nTotalTime: 1258\nWaitTime: 1328\nComplete\n```\n\nWaitTime = endTime - startTime\n\nWaitTime就是总的耗时，包括前一个应用Activity pause的时间和新应用启动的时间；\nThisTime表示一连串启动Activity的最后一个Activity的启动耗时；\nTotalTime表示新应用启动的耗时，包括新进程的启动和Activity的启动，但不包括前一个应用Activity pause的耗时。\n**也就是说，开发者一般只要关心TotalTime即可，这个时间才是自己应用真正启动的耗时。**\n\n### sysTrace工具\nAndroid的SDK开发包中platform-tools文件夹里包含了systrace工具，在使用命令之前可以配置参数和别名，避免重复敲命令。\n```shell\nalias st-start='python /home/tanhuanpei/IDE/Sdk/platform-tools/systrace/systrace.py'\nalias systrace='st-start -t 8 gfx input view sched freq wm am hwui workq res dalvik sync disk load perf hal rs idle mmc'\n```\n使用时\n```shell\nsystrace -a com.xrom.intl.appcenter -o test.trace\n```\n## 启动时间分析\n使用adb命令和systrace命令生成test.trace文件\n\n![](https://app.yinxiang.com/shard/s8/res/7bd315f3-a9db-44da-8860-d3dc43fe9515.png)\n\n**执行bindApplication**\n从图中第一行可以看到,由于是第一次启动,这个应用的`bindApplication`方法被调用,\n\n**执行onCreate--onStart--onResume**\n然后是`activityStart`方法,对应应用程序中的`onCreate`--`onStart`--`onResume`三个方法.\n\n**执行performTraversals**\n紧接着会执行两次performTraversals方法(其源码位于Frameworks/base/core/java/android/view/ViewRootImpl.java), ViewRootImpl使用mFirst这个变量来标记是否是第一次启动.第一次执行performTraversals会执行mAttachInfo.mHardwareRenderer.initializ方法,初始化Surface.\n![](https://app.yinxiang.com/shard/s8/res/0a0b1acd-4406-49c6-bf9e-9155cf591a13.png)\n\n第一次创建Surface之后,newSurface为true,从下面的代码来看会执行另一次performTraversals.这就是为什么启动应用的时候需要执行两次performTraversals.分析Trace图的时候也可以根据两次performTraversals执行的情况看出问题.\n\n![](https://app.yinxiang.com/shard/s8/res/b08c8918-d9d7-45d2-a213-66e69eef4d11.png)\n\n\n所以第二个performTraversals中会执行performDraw方法。\n\n**显示应用界面**\n一般来说第二个performTraversals执行完成后, 表示应用程序的第一帧被绘制完成.\n一旦应用绘制完成,WMS会收到`FINISHED_STARTING`标记应用启动完成,这时会Remove掉Starting Window.这样应用就显示出来了.\n\n## 应用启动优化的目标\n由于热启动和冷启动在优化方面的差异不大,就以最常见的的冷启动方式来确定优化的目标.\n\n通过之前的知识可以知道,冷启动的耗时比较长,应用初始化的时间比较长.所以大部分人情况下Starting Window都是做完动画(即撑满屏幕)后,过一会儿才会被Remove掉. 从优化的角度来说,我们肯定是希望应用启动的时间越快越好.但是也要根据实际情况为其设置一个合理的数值.\n\n### 启动优化的目标设定思路\n在手机使用方面,人的感官对于卡顿的感知是很灵敏的,同样对于加载时长的容忍也是很有限的,除非使用其他手段在加载时吸引用户的注意.\n\n但是对于应用启动来说,用户的需求是非常明确的: 就是要快速打开应用,看到主界面.在用户点击到主界面显示,其中比较重要的可以优化的几个点:\n- Starting Window的初始化\n- Starting Window的动画\n- 应用的初始化时间\n\n其中对应的可优化的点:\n- 优化Starting Window的初始化时间(系统级优化)\n- 优化Starting Window的动画(系统级优化,包括动画的时长,开始的大小,以及透明度等)\n- 优化应用程序自身(应用级优化,包括精简onCreate/onStart/onResume函数,优化主界面的复杂度等)\n\n从流畅性和连贯性的角度来说,如果在Starting Window刚好做完动画的时候,应用也初始化完成,这时候将Starting Window Remove掉.从用户的角度来看白屏没有停留,就显得很流畅.\n\n\n\n从系统优化的角度来看,Android应用启动优化分为两个阶段的优化:\n\n- 系统级服务的优化:\n\t-  ActivityManagerService的优化.\n\t- WindowManagerService的优化.\n\t- Touch Event的优化.\n\t- Launcher的优化.\n\t- 系统公共控件的优化.\n\t\n- 应用相关的优化\n\t- 应用布局优化.\n\t- 懒加载: 即按需加载.\n\t- 延迟加载: 即精简OnCreate函数.\n\n## 参考链接\n[怎么计算apk的启动时间](https://www.zhihu.com/question/35487841/answer/63007551 \"怎么计算apk的启动时间\")","source":"_posts/Android性能优化【应用启动优化与白屏源码分析】.md","raw":"---\ntitle: Android性能优化【应用启动优化与白屏源码分析】\ndate: 2019-01-08 22:01:27\ntags: 性能优化 源码分析  白屏优化\n---\n## 白屏是什么？\n在Android系统中，Activity组件在启动之后，并且在它的窗口显示出来之前，可以显示一个启动窗口。这个启动窗口可以看作是Activity组件的预览窗口，是由WindowManagerService服务统一管理的，即由WindowManagerService服务负责启动和结束。\nActivity组件的启动窗口是由ActivityManagerService服务来决定是否要显示的。如果需要显示，那么ActivityManagerService服务就会通知WindowManagerService服务来为正在启动的Activity组件显示一个启动窗口，而WindowManagerService服务又是通过窗口管理策略类PhoneWindowManager来创建这个启动窗口的。这个过程如图所示。\n![](https://app.yinxiang.com/shard/s8/res/03c1489d-203b-4e4a-a3bc-bd9cd3d1af66.jpg)\n\n窗口管理策略类PhoneWindowManager创建完成Activity组件的启动窗口之后，就会请求WindowManagerService服务将该启动窗口显示出来。当Activity组件启动完成，并且它的窗口也显示出来的时候，WindowManagerService服务就会结束显示它的启动窗口。\n\n## 如何检测App启动时间\n### ADB命令\n`adb shell am start -W -S com.xrom.intl.appcenter/com.xrom.intl.appcenter.ui.main.MainActivity`\n```shell\nActivity: com.xrom.intl.appcenter/.ui.main.MainActivity\nThisTime: 1258\nTotalTime: 1258\nWaitTime: 1328\nComplete\n```\n\nWaitTime = endTime - startTime\n\nWaitTime就是总的耗时，包括前一个应用Activity pause的时间和新应用启动的时间；\nThisTime表示一连串启动Activity的最后一个Activity的启动耗时；\nTotalTime表示新应用启动的耗时，包括新进程的启动和Activity的启动，但不包括前一个应用Activity pause的耗时。\n**也就是说，开发者一般只要关心TotalTime即可，这个时间才是自己应用真正启动的耗时。**\n\n### sysTrace工具\nAndroid的SDK开发包中platform-tools文件夹里包含了systrace工具，在使用命令之前可以配置参数和别名，避免重复敲命令。\n```shell\nalias st-start='python /home/tanhuanpei/IDE/Sdk/platform-tools/systrace/systrace.py'\nalias systrace='st-start -t 8 gfx input view sched freq wm am hwui workq res dalvik sync disk load perf hal rs idle mmc'\n```\n使用时\n```shell\nsystrace -a com.xrom.intl.appcenter -o test.trace\n```\n## 启动时间分析\n使用adb命令和systrace命令生成test.trace文件\n\n![](https://app.yinxiang.com/shard/s8/res/7bd315f3-a9db-44da-8860-d3dc43fe9515.png)\n\n**执行bindApplication**\n从图中第一行可以看到,由于是第一次启动,这个应用的`bindApplication`方法被调用,\n\n**执行onCreate--onStart--onResume**\n然后是`activityStart`方法,对应应用程序中的`onCreate`--`onStart`--`onResume`三个方法.\n\n**执行performTraversals**\n紧接着会执行两次performTraversals方法(其源码位于Frameworks/base/core/java/android/view/ViewRootImpl.java), ViewRootImpl使用mFirst这个变量来标记是否是第一次启动.第一次执行performTraversals会执行mAttachInfo.mHardwareRenderer.initializ方法,初始化Surface.\n![](https://app.yinxiang.com/shard/s8/res/0a0b1acd-4406-49c6-bf9e-9155cf591a13.png)\n\n第一次创建Surface之后,newSurface为true,从下面的代码来看会执行另一次performTraversals.这就是为什么启动应用的时候需要执行两次performTraversals.分析Trace图的时候也可以根据两次performTraversals执行的情况看出问题.\n\n![](https://app.yinxiang.com/shard/s8/res/b08c8918-d9d7-45d2-a213-66e69eef4d11.png)\n\n\n所以第二个performTraversals中会执行performDraw方法。\n\n**显示应用界面**\n一般来说第二个performTraversals执行完成后, 表示应用程序的第一帧被绘制完成.\n一旦应用绘制完成,WMS会收到`FINISHED_STARTING`标记应用启动完成,这时会Remove掉Starting Window.这样应用就显示出来了.\n\n## 应用启动优化的目标\n由于热启动和冷启动在优化方面的差异不大,就以最常见的的冷启动方式来确定优化的目标.\n\n通过之前的知识可以知道,冷启动的耗时比较长,应用初始化的时间比较长.所以大部分人情况下Starting Window都是做完动画(即撑满屏幕)后,过一会儿才会被Remove掉. 从优化的角度来说,我们肯定是希望应用启动的时间越快越好.但是也要根据实际情况为其设置一个合理的数值.\n\n### 启动优化的目标设定思路\n在手机使用方面,人的感官对于卡顿的感知是很灵敏的,同样对于加载时长的容忍也是很有限的,除非使用其他手段在加载时吸引用户的注意.\n\n但是对于应用启动来说,用户的需求是非常明确的: 就是要快速打开应用,看到主界面.在用户点击到主界面显示,其中比较重要的可以优化的几个点:\n- Starting Window的初始化\n- Starting Window的动画\n- 应用的初始化时间\n\n其中对应的可优化的点:\n- 优化Starting Window的初始化时间(系统级优化)\n- 优化Starting Window的动画(系统级优化,包括动画的时长,开始的大小,以及透明度等)\n- 优化应用程序自身(应用级优化,包括精简onCreate/onStart/onResume函数,优化主界面的复杂度等)\n\n从流畅性和连贯性的角度来说,如果在Starting Window刚好做完动画的时候,应用也初始化完成,这时候将Starting Window Remove掉.从用户的角度来看白屏没有停留,就显得很流畅.\n\n\n\n从系统优化的角度来看,Android应用启动优化分为两个阶段的优化:\n\n- 系统级服务的优化:\n\t-  ActivityManagerService的优化.\n\t- WindowManagerService的优化.\n\t- Touch Event的优化.\n\t- Launcher的优化.\n\t- 系统公共控件的优化.\n\t\n- 应用相关的优化\n\t- 应用布局优化.\n\t- 懒加载: 即按需加载.\n\t- 延迟加载: 即精简OnCreate函数.\n\n## 参考链接\n[怎么计算apk的启动时间](https://www.zhihu.com/question/35487841/answer/63007551 \"怎么计算apk的启动时间\")","slug":"Android性能优化【应用启动优化与白屏源码分析】","published":1,"updated":"2019-01-08T14:03:34.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0or0001nrvxdzz52y6h","content":"<h2 id=\"白屏是什么？\"><a href=\"#白屏是什么？\" class=\"headerlink\" title=\"白屏是什么？\"></a>白屏是什么？</h2><p>在Android系统中，Activity组件在启动之后，并且在它的窗口显示出来之前，可以显示一个启动窗口。这个启动窗口可以看作是Activity组件的预览窗口，是由WindowManagerService服务统一管理的，即由WindowManagerService服务负责启动和结束。<br>Activity组件的启动窗口是由ActivityManagerService服务来决定是否要显示的。如果需要显示，那么ActivityManagerService服务就会通知WindowManagerService服务来为正在启动的Activity组件显示一个启动窗口，而WindowManagerService服务又是通过窗口管理策略类PhoneWindowManager来创建这个启动窗口的。这个过程如图所示。<br><img src=\"https://app.yinxiang.com/shard/s8/res/03c1489d-203b-4e4a-a3bc-bd9cd3d1af66.jpg\" alt=\"\"></p>\n<p>窗口管理策略类PhoneWindowManager创建完成Activity组件的启动窗口之后，就会请求WindowManagerService服务将该启动窗口显示出来。当Activity组件启动完成，并且它的窗口也显示出来的时候，WindowManagerService服务就会结束显示它的启动窗口。</p>\n<h2 id=\"如何检测App启动时间\"><a href=\"#如何检测App启动时间\" class=\"headerlink\" title=\"如何检测App启动时间\"></a>如何检测App启动时间</h2><h3 id=\"ADB命令\"><a href=\"#ADB命令\" class=\"headerlink\" title=\"ADB命令\"></a>ADB命令</h3><p><code>adb shell am start -W -S com.xrom.intl.appcenter/com.xrom.intl.appcenter.ui.main.MainActivity</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activity: com.xrom.intl.appcenter/.ui.main.MainActivity</span><br><span class=\"line\">ThisTime: 1258</span><br><span class=\"line\">TotalTime: 1258</span><br><span class=\"line\">WaitTime: 1328</span><br><span class=\"line\">Complete</span><br></pre></td></tr></table></figure></p>\n<p>WaitTime = endTime - startTime</p>\n<p>WaitTime就是总的耗时，包括前一个应用Activity pause的时间和新应用启动的时间；<br>ThisTime表示一连串启动Activity的最后一个Activity的启动耗时；<br>TotalTime表示新应用启动的耗时，包括新进程的启动和Activity的启动，但不包括前一个应用Activity pause的耗时。<br><strong>也就是说，开发者一般只要关心TotalTime即可，这个时间才是自己应用真正启动的耗时。</strong></p>\n<h3 id=\"sysTrace工具\"><a href=\"#sysTrace工具\" class=\"headerlink\" title=\"sysTrace工具\"></a>sysTrace工具</h3><p>Android的SDK开发包中platform-tools文件夹里包含了systrace工具，在使用命令之前可以配置参数和别名，避免重复敲命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias st-start='python /home/tanhuanpei/IDE/Sdk/platform-tools/systrace/systrace.py'</span><br><span class=\"line\">alias systrace='st-start -t 8 gfx input view sched freq wm am hwui workq res dalvik sync disk load perf hal rs idle mmc'</span><br></pre></td></tr></table></figure></p>\n<p>使用时<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systrace -a com.xrom.intl.appcenter -o test.trace</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动时间分析\"><a href=\"#启动时间分析\" class=\"headerlink\" title=\"启动时间分析\"></a>启动时间分析</h2><p>使用adb命令和systrace命令生成test.trace文件</p>\n<p><img src=\"https://app.yinxiang.com/shard/s8/res/7bd315f3-a9db-44da-8860-d3dc43fe9515.png\" alt=\"\"></p>\n<p><strong>执行bindApplication</strong><br>从图中第一行可以看到,由于是第一次启动,这个应用的<code>bindApplication</code>方法被调用,</p>\n<p><strong>执行onCreate–onStart–onResume</strong><br>然后是<code>activityStart</code>方法,对应应用程序中的<code>onCreate</code>–<code>onStart</code>–<code>onResume</code>三个方法.</p>\n<p><strong>执行performTraversals</strong><br>紧接着会执行两次performTraversals方法(其源码位于Frameworks/base/core/java/android/view/ViewRootImpl.java), ViewRootImpl使用mFirst这个变量来标记是否是第一次启动.第一次执行performTraversals会执行mAttachInfo.mHardwareRenderer.initializ方法,初始化Surface.<br><img src=\"https://app.yinxiang.com/shard/s8/res/0a0b1acd-4406-49c6-bf9e-9155cf591a13.png\" alt=\"\"></p>\n<p>第一次创建Surface之后,newSurface为true,从下面的代码来看会执行另一次performTraversals.这就是为什么启动应用的时候需要执行两次performTraversals.分析Trace图的时候也可以根据两次performTraversals执行的情况看出问题.</p>\n<p><img src=\"https://app.yinxiang.com/shard/s8/res/b08c8918-d9d7-45d2-a213-66e69eef4d11.png\" alt=\"\"></p>\n<p>所以第二个performTraversals中会执行performDraw方法。</p>\n<p><strong>显示应用界面</strong><br>一般来说第二个performTraversals执行完成后, 表示应用程序的第一帧被绘制完成.<br>一旦应用绘制完成,WMS会收到<code>FINISHED_STARTING</code>标记应用启动完成,这时会Remove掉Starting Window.这样应用就显示出来了.</p>\n<h2 id=\"应用启动优化的目标\"><a href=\"#应用启动优化的目标\" class=\"headerlink\" title=\"应用启动优化的目标\"></a>应用启动优化的目标</h2><p>由于热启动和冷启动在优化方面的差异不大,就以最常见的的冷启动方式来确定优化的目标.</p>\n<p>通过之前的知识可以知道,冷启动的耗时比较长,应用初始化的时间比较长.所以大部分人情况下Starting Window都是做完动画(即撑满屏幕)后,过一会儿才会被Remove掉. 从优化的角度来说,我们肯定是希望应用启动的时间越快越好.但是也要根据实际情况为其设置一个合理的数值.</p>\n<h3 id=\"启动优化的目标设定思路\"><a href=\"#启动优化的目标设定思路\" class=\"headerlink\" title=\"启动优化的目标设定思路\"></a>启动优化的目标设定思路</h3><p>在手机使用方面,人的感官对于卡顿的感知是很灵敏的,同样对于加载时长的容忍也是很有限的,除非使用其他手段在加载时吸引用户的注意.</p>\n<p>但是对于应用启动来说,用户的需求是非常明确的: 就是要快速打开应用,看到主界面.在用户点击到主界面显示,其中比较重要的可以优化的几个点:</p>\n<ul>\n<li>Starting Window的初始化</li>\n<li>Starting Window的动画</li>\n<li>应用的初始化时间</li>\n</ul>\n<p>其中对应的可优化的点:</p>\n<ul>\n<li>优化Starting Window的初始化时间(系统级优化)</li>\n<li>优化Starting Window的动画(系统级优化,包括动画的时长,开始的大小,以及透明度等)</li>\n<li>优化应用程序自身(应用级优化,包括精简onCreate/onStart/onResume函数,优化主界面的复杂度等)</li>\n</ul>\n<p>从流畅性和连贯性的角度来说,如果在Starting Window刚好做完动画的时候,应用也初始化完成,这时候将Starting Window Remove掉.从用户的角度来看白屏没有停留,就显得很流畅.</p>\n<p>从系统优化的角度来看,Android应用启动优化分为两个阶段的优化:</p>\n<ul>\n<li><p>系统级服务的优化:</p>\n<ul>\n<li>ActivityManagerService的优化.</li>\n<li>WindowManagerService的优化.</li>\n<li>Touch Event的优化.</li>\n<li>Launcher的优化.</li>\n<li>系统公共控件的优化.</li>\n</ul>\n</li>\n<li><p>应用相关的优化</p>\n<ul>\n<li>应用布局优化.</li>\n<li>懒加载: 即按需加载.</li>\n<li>延迟加载: 即精简OnCreate函数.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.zhihu.com/question/35487841/answer/63007551\" title=\"怎么计算apk的启动时间\" target=\"_blank\" rel=\"noopener\">怎么计算apk的启动时间</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"白屏是什么？\"><a href=\"#白屏是什么？\" class=\"headerlink\" title=\"白屏是什么？\"></a>白屏是什么？</h2><p>在Android系统中，Activity组件在启动之后，并且在它的窗口显示出来之前，可以显示一个启动窗口。这个启动窗口可以看作是Activity组件的预览窗口，是由WindowManagerService服务统一管理的，即由WindowManagerService服务负责启动和结束。<br>Activity组件的启动窗口是由ActivityManagerService服务来决定是否要显示的。如果需要显示，那么ActivityManagerService服务就会通知WindowManagerService服务来为正在启动的Activity组件显示一个启动窗口，而WindowManagerService服务又是通过窗口管理策略类PhoneWindowManager来创建这个启动窗口的。这个过程如图所示。<br><img src=\"https://app.yinxiang.com/shard/s8/res/03c1489d-203b-4e4a-a3bc-bd9cd3d1af66.jpg\" alt=\"\"></p>\n<p>窗口管理策略类PhoneWindowManager创建完成Activity组件的启动窗口之后，就会请求WindowManagerService服务将该启动窗口显示出来。当Activity组件启动完成，并且它的窗口也显示出来的时候，WindowManagerService服务就会结束显示它的启动窗口。</p>\n<h2 id=\"如何检测App启动时间\"><a href=\"#如何检测App启动时间\" class=\"headerlink\" title=\"如何检测App启动时间\"></a>如何检测App启动时间</h2><h3 id=\"ADB命令\"><a href=\"#ADB命令\" class=\"headerlink\" title=\"ADB命令\"></a>ADB命令</h3><p><code>adb shell am start -W -S com.xrom.intl.appcenter/com.xrom.intl.appcenter.ui.main.MainActivity</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Activity: com.xrom.intl.appcenter/.ui.main.MainActivity</span><br><span class=\"line\">ThisTime: 1258</span><br><span class=\"line\">TotalTime: 1258</span><br><span class=\"line\">WaitTime: 1328</span><br><span class=\"line\">Complete</span><br></pre></td></tr></table></figure></p>\n<p>WaitTime = endTime - startTime</p>\n<p>WaitTime就是总的耗时，包括前一个应用Activity pause的时间和新应用启动的时间；<br>ThisTime表示一连串启动Activity的最后一个Activity的启动耗时；<br>TotalTime表示新应用启动的耗时，包括新进程的启动和Activity的启动，但不包括前一个应用Activity pause的耗时。<br><strong>也就是说，开发者一般只要关心TotalTime即可，这个时间才是自己应用真正启动的耗时。</strong></p>\n<h3 id=\"sysTrace工具\"><a href=\"#sysTrace工具\" class=\"headerlink\" title=\"sysTrace工具\"></a>sysTrace工具</h3><p>Android的SDK开发包中platform-tools文件夹里包含了systrace工具，在使用命令之前可以配置参数和别名，避免重复敲命令。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias st-start='python /home/tanhuanpei/IDE/Sdk/platform-tools/systrace/systrace.py'</span><br><span class=\"line\">alias systrace='st-start -t 8 gfx input view sched freq wm am hwui workq res dalvik sync disk load perf hal rs idle mmc'</span><br></pre></td></tr></table></figure></p>\n<p>使用时<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systrace -a com.xrom.intl.appcenter -o test.trace</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"启动时间分析\"><a href=\"#启动时间分析\" class=\"headerlink\" title=\"启动时间分析\"></a>启动时间分析</h2><p>使用adb命令和systrace命令生成test.trace文件</p>\n<p><img src=\"https://app.yinxiang.com/shard/s8/res/7bd315f3-a9db-44da-8860-d3dc43fe9515.png\" alt=\"\"></p>\n<p><strong>执行bindApplication</strong><br>从图中第一行可以看到,由于是第一次启动,这个应用的<code>bindApplication</code>方法被调用,</p>\n<p><strong>执行onCreate–onStart–onResume</strong><br>然后是<code>activityStart</code>方法,对应应用程序中的<code>onCreate</code>–<code>onStart</code>–<code>onResume</code>三个方法.</p>\n<p><strong>执行performTraversals</strong><br>紧接着会执行两次performTraversals方法(其源码位于Frameworks/base/core/java/android/view/ViewRootImpl.java), ViewRootImpl使用mFirst这个变量来标记是否是第一次启动.第一次执行performTraversals会执行mAttachInfo.mHardwareRenderer.initializ方法,初始化Surface.<br><img src=\"https://app.yinxiang.com/shard/s8/res/0a0b1acd-4406-49c6-bf9e-9155cf591a13.png\" alt=\"\"></p>\n<p>第一次创建Surface之后,newSurface为true,从下面的代码来看会执行另一次performTraversals.这就是为什么启动应用的时候需要执行两次performTraversals.分析Trace图的时候也可以根据两次performTraversals执行的情况看出问题.</p>\n<p><img src=\"https://app.yinxiang.com/shard/s8/res/b08c8918-d9d7-45d2-a213-66e69eef4d11.png\" alt=\"\"></p>\n<p>所以第二个performTraversals中会执行performDraw方法。</p>\n<p><strong>显示应用界面</strong><br>一般来说第二个performTraversals执行完成后, 表示应用程序的第一帧被绘制完成.<br>一旦应用绘制完成,WMS会收到<code>FINISHED_STARTING</code>标记应用启动完成,这时会Remove掉Starting Window.这样应用就显示出来了.</p>\n<h2 id=\"应用启动优化的目标\"><a href=\"#应用启动优化的目标\" class=\"headerlink\" title=\"应用启动优化的目标\"></a>应用启动优化的目标</h2><p>由于热启动和冷启动在优化方面的差异不大,就以最常见的的冷启动方式来确定优化的目标.</p>\n<p>通过之前的知识可以知道,冷启动的耗时比较长,应用初始化的时间比较长.所以大部分人情况下Starting Window都是做完动画(即撑满屏幕)后,过一会儿才会被Remove掉. 从优化的角度来说,我们肯定是希望应用启动的时间越快越好.但是也要根据实际情况为其设置一个合理的数值.</p>\n<h3 id=\"启动优化的目标设定思路\"><a href=\"#启动优化的目标设定思路\" class=\"headerlink\" title=\"启动优化的目标设定思路\"></a>启动优化的目标设定思路</h3><p>在手机使用方面,人的感官对于卡顿的感知是很灵敏的,同样对于加载时长的容忍也是很有限的,除非使用其他手段在加载时吸引用户的注意.</p>\n<p>但是对于应用启动来说,用户的需求是非常明确的: 就是要快速打开应用,看到主界面.在用户点击到主界面显示,其中比较重要的可以优化的几个点:</p>\n<ul>\n<li>Starting Window的初始化</li>\n<li>Starting Window的动画</li>\n<li>应用的初始化时间</li>\n</ul>\n<p>其中对应的可优化的点:</p>\n<ul>\n<li>优化Starting Window的初始化时间(系统级优化)</li>\n<li>优化Starting Window的动画(系统级优化,包括动画的时长,开始的大小,以及透明度等)</li>\n<li>优化应用程序自身(应用级优化,包括精简onCreate/onStart/onResume函数,优化主界面的复杂度等)</li>\n</ul>\n<p>从流畅性和连贯性的角度来说,如果在Starting Window刚好做完动画的时候,应用也初始化完成,这时候将Starting Window Remove掉.从用户的角度来看白屏没有停留,就显得很流畅.</p>\n<p>从系统优化的角度来看,Android应用启动优化分为两个阶段的优化:</p>\n<ul>\n<li><p>系统级服务的优化:</p>\n<ul>\n<li>ActivityManagerService的优化.</li>\n<li>WindowManagerService的优化.</li>\n<li>Touch Event的优化.</li>\n<li>Launcher的优化.</li>\n<li>系统公共控件的优化.</li>\n</ul>\n</li>\n<li><p>应用相关的优化</p>\n<ul>\n<li>应用布局优化.</li>\n<li>懒加载: 即按需加载.</li>\n<li>延迟加载: 即精简OnCreate函数.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.zhihu.com/question/35487841/answer/63007551\" title=\"怎么计算apk的启动时间\" target=\"_blank\" rel=\"noopener\">怎么计算apk的启动时间</a></p>\n"},{"title":"Android性能优化【数据结构篇】","date":"2018-07-27T07:42:56.000Z","_content":"","source":"_posts/Android性能优化【数据结构篇】.md","raw":"---\ntitle: Android性能优化【数据结构篇】\ndate: 2018-07-27 15:42:56\ntags:\n---\n","slug":"Android性能优化【数据结构篇】","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0os0002nrvxg9xo9wni","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hexo简易教程","_content":"\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n\n\n### 新建文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n文章目录在  source/_posts/My Niew Post.md\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动本地服务器\n\n``` bash\n$ hexo server\n```\n一般地址为 http://localhost:4000/\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程服务器\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/Hexo简易教程.md","raw":"---\ntitle: Hexo简易教程\n---\n\n- [GitHub+Hexo 搭建个人网站详细教程](https://zhuanlan.zhihu.com/p/26625249)\n\n\n### 新建文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n文章目录在  source/_posts/My Niew Post.md\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 启动本地服务器\n\n``` bash\n$ hexo server\n```\n一般地址为 http://localhost:4000/\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程服务器\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"Hexo简易教程","published":1,"date":"2018-12-18T07:55:18.031Z","updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0ov0004nrvxno978z0y","content":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n</ul>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>文章目录在  source/_posts/My Niew Post.md<br>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>一般地址为 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署到远程服务器\"><a href=\"#部署到远程服务器\" class=\"headerlink\" title=\"部署到远程服务器\"></a>部署到远程服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\" target=\"_blank\" rel=\"noopener\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n</ul>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>文章目录在  source/_posts/My Niew Post.md<br>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"启动本地服务器\"><a href=\"#启动本地服务器\" class=\"headerlink\" title=\"启动本地服务器\"></a>启动本地服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>一般地址为 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"部署到远程服务器\"><a href=\"#部署到远程服务器\" class=\"headerlink\" title=\"部署到远程服务器\"></a>部署到远程服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"使用AS开发gradle插件 (一)","date":"2018-07-05T11:45:51.000Z","_content":"\n# 0X00 前言\nGradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。\n# 0X01 在项目中使用Android gradle插件\n配置插件路径，在Project目录中的build.gradle添加\n```\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.0'\n    }\n```\n使用具体插件，在主Module目录中的build.gradle添加\n```\napply plugin: 'com.android.application'\n```\n# 0X02 自定义插件\n我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，\n1.新建一个Module，选择Android Library。\n2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。\n3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：\n![QQ截图20170123114005](/使用AS开发gradle插件入门/1.png)\n4.修改Module中的 ``build.gradle``文件，引入groovy和maven相关依赖\n```\napply plugin: 'groovy'\napply plugin: 'maven'\n\ndependencies {\n    compile gradleApi()\n    compile localGroovy()\n}\n```\n5.创建插件类``TimeImpl.groovy``，继承 ``Plugin<Project>``，实现``apply``方法。\n\n```\npublic class TimeImpl implements Plugin<Project> {\n\n    @Override\n    void apply(Project project) {\n        project.gradle.addListener(new TimeListener())\n    }\n}\n\n```\n\n在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类\n```\nimplementation-class = com.thp.plugin.TimeImpl\n```\n![QQ截图20170123114005](/使用AS开发gradle插件入门/2.png)\n\n6.在``build.gradle``配置插件版本和发布到本地仓库\n\n```\ngroup = 'com.thp.plugin'\nversion = '1.0.0'\n\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uri('../repo'))\n        }\n    }\n}\n```\n这时候，右侧的gradle Toolbar就会在module下多出一个task\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/3.png)\n\n点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/4.png)\n\n\n\n# 0X03 项目中引用插件\n在app module的``build.gradle``上添加\n```\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n            url uri('../repo')\n        }\n    }\n\n    dependencies {\n        classpath 'com.thp.plugin:gradletime:1.0.0'\n    }\n}\n\napply plugin: 'gradle.time'\n\n```\n以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。\n\n# 中文文档\n- [深入理解Android之Gradle-邓凡平](http://www.infoq.com/cn/articles/android-in-depth-gradle) \n- [Gradle User Guide 中文版](https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details)\n- [拥抱Android Studio系列](http://kvh.io/cn/tags/EmbraceAndroidStudio/)\n\n# 外籍文档\n\n- [Groovy Documentation](http://www.groovy-lang.org/documentation.html) ：Groovy 的详细介绍文档\n- [Groovy API Reference](http://www.groovy-lang.org/api.html) ：Groovy 的 API 文档\n- [Gradle User Guid](https://docs.gradle.org/current/userguide/userguide.html)：Gradle 的详细介绍文档\n- [Gradle Build Language Reference](https://docs.gradle.org/current/dsl/) : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查\n- [Android Plugin DSL Reference](http://google.github.io/android-gradle-dsl/current/index.html) : 使用 Android 插件必备","source":"_posts/使用AS开发gradle插件入门.md","raw":"---\ntitle: 使用AS开发gradle插件 (一)\ndate: 2018-07-05 19:45:51\ntags: gradle插件\n---\n\n# 0X00 前言\nGradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。\n# 0X01 在项目中使用Android gradle插件\n配置插件路径，在Project目录中的build.gradle添加\n```\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.0.0'\n    }\n```\n使用具体插件，在主Module目录中的build.gradle添加\n```\napply plugin: 'com.android.application'\n```\n# 0X02 自定义插件\n我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，\n1.新建一个Module，选择Android Library。\n2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。\n3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：\n![QQ截图20170123114005](/使用AS开发gradle插件入门/1.png)\n4.修改Module中的 ``build.gradle``文件，引入groovy和maven相关依赖\n```\napply plugin: 'groovy'\napply plugin: 'maven'\n\ndependencies {\n    compile gradleApi()\n    compile localGroovy()\n}\n```\n5.创建插件类``TimeImpl.groovy``，继承 ``Plugin<Project>``，实现``apply``方法。\n\n```\npublic class TimeImpl implements Plugin<Project> {\n\n    @Override\n    void apply(Project project) {\n        project.gradle.addListener(new TimeListener())\n    }\n}\n\n```\n\n在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类\n```\nimplementation-class = com.thp.plugin.TimeImpl\n```\n![QQ截图20170123114005](/使用AS开发gradle插件入门/2.png)\n\n6.在``build.gradle``配置插件版本和发布到本地仓库\n\n```\ngroup = 'com.thp.plugin'\nversion = '1.0.0'\n\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: uri('../repo'))\n        }\n    }\n}\n```\n这时候，右侧的gradle Toolbar就会在module下多出一个task\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/3.png)\n\n点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件\n\n![QQ截图20170123114005](/使用AS开发gradle插件入门/4.png)\n\n\n\n# 0X03 项目中引用插件\n在app module的``build.gradle``上添加\n```\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n            url uri('../repo')\n        }\n    }\n\n    dependencies {\n        classpath 'com.thp.plugin:gradletime:1.0.0'\n    }\n}\n\napply plugin: 'gradle.time'\n\n```\n以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。\n\n# 中文文档\n- [深入理解Android之Gradle-邓凡平](http://www.infoq.com/cn/articles/android-in-depth-gradle) \n- [Gradle User Guide 中文版](https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details)\n- [拥抱Android Studio系列](http://kvh.io/cn/tags/EmbraceAndroidStudio/)\n\n# 外籍文档\n\n- [Groovy Documentation](http://www.groovy-lang.org/documentation.html) ：Groovy 的详细介绍文档\n- [Groovy API Reference](http://www.groovy-lang.org/api.html) ：Groovy 的 API 文档\n- [Gradle User Guid](https://docs.gradle.org/current/userguide/userguide.html)：Gradle 的详细介绍文档\n- [Gradle Build Language Reference](https://docs.gradle.org/current/dsl/) : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查\n- [Android Plugin DSL Reference](http://google.github.io/android-gradle-dsl/current/index.html) : 使用 Android 插件必备","slug":"使用AS开发gradle插件入门","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0ow0005nrvxvwkuo9cd","content":"<h1 id=\"0X00-前言\"><a href=\"#0X00-前言\" class=\"headerlink\" title=\"0X00 前言\"></a>0X00 前言</h1><p>Gradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。</p>\n<h1 id=\"0X01-在项目中使用Android-gradle插件\"><a href=\"#0X01-在项目中使用Android-gradle插件\" class=\"headerlink\" title=\"0X01 在项目中使用Android gradle插件\"></a>0X01 在项目中使用Android gradle插件</h1><p>配置插件路径，在Project目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    classpath &apos;com.android.tools.build:gradle:3.0.0&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用具体插件，在主Module目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-自定义插件\"><a href=\"#0X02-自定义插件\" class=\"headerlink\" title=\"0X02 自定义插件\"></a>0X02 自定义插件</h1><p>我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，<br>1.新建一个Module，选择Android Library。<br>2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。<br>3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：<br><img src=\"/2018/07/05/使用AS开发gradle插件入门/1.png\" alt=\"QQ截图20170123114005\"><br>4.修改Module中的 <code>build.gradle</code>文件，引入groovy和maven相关依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;groovy&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile gradleApi()</span><br><span class=\"line\">    compile localGroovy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.创建插件类<code>TimeImpl.groovy</code>，继承 <code>Plugin&lt;Project&gt;</code>，实现<code>apply</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TimeImpl implements Plugin&lt;Project&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    void apply(Project project) &#123;</span><br><span class=\"line\">        project.gradle.addListener(new TimeListener())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation-class = com.thp.plugin.TimeImpl</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/2.png\" alt=\"QQ截图20170123114005\"></p>\n<p>6.在<code>build.gradle</code>配置插件版本和发布到本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group = &apos;com.thp.plugin&apos;</span><br><span class=\"line\">version = &apos;1.0.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uri(&apos;../repo&apos;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，右侧的gradle Toolbar就会在module下多出一个task</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/3.png\" alt=\"QQ截图20170123114005\"></p>\n<p>点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/4.png\" alt=\"QQ截图20170123114005\"></p>\n<h1 id=\"0X03-项目中引用插件\"><a href=\"#0X03-项目中引用插件\" class=\"headerlink\" title=\"0X03 项目中引用插件\"></a>0X03 项目中引用插件</h1><p>在app module的<code>build.gradle</code>上添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url uri(&apos;../repo&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.thp.plugin:gradletime:1.0.0&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;gradle.time&apos;</span><br></pre></td></tr></table></figure></p>\n<p>以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。</p>\n<h1 id=\"中文文档\"><a href=\"#中文文档\" class=\"headerlink\" title=\"中文文档\"></a>中文文档</h1><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/android-in-depth-gradle\" target=\"_blank\" rel=\"noopener\">深入理解Android之Gradle-邓凡平</a> </li>\n<li><a href=\"https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details\" target=\"_blank\" rel=\"noopener\">Gradle User Guide 中文版</a></li>\n<li><a href=\"http://kvh.io/cn/tags/EmbraceAndroidStudio/\" target=\"_blank\" rel=\"noopener\">拥抱Android Studio系列</a></li>\n</ul>\n<h1 id=\"外籍文档\"><a href=\"#外籍文档\" class=\"headerlink\" title=\"外籍文档\"></a>外籍文档</h1><ul>\n<li><a href=\"http://www.groovy-lang.org/documentation.html\" target=\"_blank\" rel=\"noopener\">Groovy Documentation</a> ：Groovy 的详细介绍文档</li>\n<li><a href=\"http://www.groovy-lang.org/api.html\" target=\"_blank\" rel=\"noopener\">Groovy API Reference</a> ：Groovy 的 API 文档</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/userguide.html\" target=\"_blank\" rel=\"noopener\">Gradle User Guid</a>：Gradle 的详细介绍文档</li>\n<li><a href=\"https://docs.gradle.org/current/dsl/\" target=\"_blank\" rel=\"noopener\">Gradle Build Language Reference</a> : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查</li>\n<li><a href=\"http://google.github.io/android-gradle-dsl/current/index.html\" target=\"_blank\" rel=\"noopener\">Android Plugin DSL Reference</a> : 使用 Android 插件必备</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0X00-前言\"><a href=\"#0X00-前言\" class=\"headerlink\" title=\"0X00 前言\"></a>0X00 前言</h1><p>Gradle是一个使用Groovy语言实现的用于构建项目的框架。构建项目时真正起作用的是基于gradle框架使用Groovy实现的各种gradle插件。Gradle默认提供了很多插件，如Java-Plugin、Maven-Plugin等。Android Studio使用的是Android-Gradle-Plugin，由Google自主开发。在Android项目中，一个build.gradle文件，其实就是一个Groovy类。</p>\n<h1 id=\"0X01-在项目中使用Android-gradle插件\"><a href=\"#0X01-在项目中使用Android-gradle插件\" class=\"headerlink\" title=\"0X01 在项目中使用Android gradle插件\"></a>0X01 在项目中使用Android gradle插件</h1><p>配置插件路径，在Project目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    classpath &apos;com.android.tools.build:gradle:3.0.0&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>使用具体插件，在主Module目录中的build.gradle添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"0X02-自定义插件\"><a href=\"#0X02-自定义插件\" class=\"headerlink\" title=\"0X02 自定义插件\"></a>0X02 自定义插件</h1><p>我们可以利用Android Studio进行gradle插件开发，使用Groovy语言。简单步骤如下，<br>1.新建一个Module，选择Android Library。<br>2.删除src文件夹下的mian文件夹、删除build.gradle账文件中的所有内容。<br>3.在src目录下创建 groovy和resources目录，resouces目录下创建META-INF/gradle-plugins目录。创建完后的文件目录结构如下图：<br><img src=\"/2018/07/05/使用AS开发gradle插件入门/1.png\" alt=\"QQ截图20170123114005\"><br>4.修改Module中的 <code>build.gradle</code>文件，引入groovy和maven相关依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;groovy&apos;</span><br><span class=\"line\">apply plugin: &apos;maven&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile gradleApi()</span><br><span class=\"line\">    compile localGroovy()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.创建插件类<code>TimeImpl.groovy</code>，继承 <code>Plugin&lt;Project&gt;</code>，实现<code>apply</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TimeImpl implements Plugin&lt;Project&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    void apply(Project project) &#123;</span><br><span class=\"line\">        project.gradle.addListener(new TimeListener())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在gradle-plugins文件夹下创建properties文件，文件名就是以后插件的名字。配置插件类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation-class = com.thp.plugin.TimeImpl</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/2.png\" alt=\"QQ截图20170123114005\"></p>\n<p>6.在<code>build.gradle</code>配置插件版本和发布到本地仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">group = &apos;com.thp.plugin&apos;</span><br><span class=\"line\">version = &apos;1.0.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenDeployer &#123;</span><br><span class=\"line\">            repository(url: uri(&apos;../repo&apos;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时候，右侧的gradle Toolbar就会在module下多出一个task</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/3.png\" alt=\"QQ截图20170123114005\"></p>\n<p>点击uploadArchives，项目目录多出repo文件夹，打开可以看到生成的gradle插件</p>\n<p><img src=\"/2018/07/05/使用AS开发gradle插件入门/4.png\" alt=\"QQ截图20170123114005\"></p>\n<h1 id=\"0X03-项目中引用插件\"><a href=\"#0X03-项目中引用插件\" class=\"headerlink\" title=\"0X03 项目中引用插件\"></a>0X03 项目中引用插件</h1><p>在app module的<code>build.gradle</code>上添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url uri(&apos;../repo&apos;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.thp.plugin:gradletime:1.0.0&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: &apos;gradle.time&apos;</span><br></pre></td></tr></table></figure></p>\n<p>以上，就是一个自定义插件的开发和引用流程。在这里，我们是引用本地生成的插件文件，下一篇将介绍如何上传到jcenter上，方便引用。</p>\n<h1 id=\"中文文档\"><a href=\"#中文文档\" class=\"headerlink\" title=\"中文文档\"></a>中文文档</h1><ul>\n<li><a href=\"http://www.infoq.com/cn/articles/android-in-depth-gradle\" target=\"_blank\" rel=\"noopener\">深入理解Android之Gradle-邓凡平</a> </li>\n<li><a href=\"https://legacy.gitbook.com/book/dongchuan/gradle-user-guide-/details\" target=\"_blank\" rel=\"noopener\">Gradle User Guide 中文版</a></li>\n<li><a href=\"http://kvh.io/cn/tags/EmbraceAndroidStudio/\" target=\"_blank\" rel=\"noopener\">拥抱Android Studio系列</a></li>\n</ul>\n<h1 id=\"外籍文档\"><a href=\"#外籍文档\" class=\"headerlink\" title=\"外籍文档\"></a>外籍文档</h1><ul>\n<li><a href=\"http://www.groovy-lang.org/documentation.html\" target=\"_blank\" rel=\"noopener\">Groovy Documentation</a> ：Groovy 的详细介绍文档</li>\n<li><a href=\"http://www.groovy-lang.org/api.html\" target=\"_blank\" rel=\"noopener\">Groovy API Reference</a> ：Groovy 的 API 文档</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/userguide.html\" target=\"_blank\" rel=\"noopener\">Gradle User Guid</a>：Gradle 的详细介绍文档</li>\n<li><a href=\"https://docs.gradle.org/current/dsl/\" target=\"_blank\" rel=\"noopener\">Gradle Build Language Reference</a> : Gradle DSL 参考，重点的几个 DSL 过一下，其他的用到再查</li>\n<li><a href=\"http://google.github.io/android-gradle-dsl/current/index.html\" target=\"_blank\" rel=\"noopener\">Android Plugin DSL Reference</a> : 使用 Android 插件必备</li>\n</ul>\n"},{"title":"工具汇总","date":"2018-08-01T02:54:12.000Z","_content":"\n\n### 反编译\n\nJadx","source":"_posts/工具汇总.md","raw":"---\ntitle: 工具汇总\ndate: 2018-08-01 10:54:12\ntags:\n---\n\n\n### 反编译\n\nJadx","slug":"工具汇总","published":1,"updated":"2018-12-18T07:55:18.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0ow0006nrvxwi8dp86f","content":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>Jadx</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>Jadx</p>\n"},{"title":"Android进阶之Aspectj in Android入门","date":"2019-01-14T07:56:40.000Z","_content":"\n\n#### 背景\n\nAOP，Aspect-oriented programming，面向切面编程，是一种可以通过预编译方式和运行期动态代理实现在不修改源码的情况下给程序动态统一添加功能的技术。主要用途有**日志记录，行为统计，安全控制，事务处理，异常处理，系统统一的认证、权限管理**等 。\n\n常见实现AOP编程库\n\n- AspectJ：和Java语言无缝衔接的面向切面的编程的扩展工具（可用于Android）。\n- Javassit for Android：一个移植到Android平台的非常知名的操纵字节码的java库。\n- DexMaker：用于在Dalvik VM编译时或运行时生成代码的基于java语言的一套API。\n- ASMDEX：一个字节码操作库（ASM），但它处理Android可执行文件（DEX字节码）。\n\n要学习AspectJ，先理解其中一些概念。\n\n`Join Point `：连接点，程序中可切入的点，例如方法调用时、读取某个变量时。\n\n`Pointcut` ：切入点，代码注入的位置，其实就是有条件限定的 Join Point，例如只在特定方法中注入代码。\n\n`Advice `：在切入点注入的代码，一般有 before、after、around 三种类型。\n\n`Target Object` ：被一个或多个 aspect 横切拦截操作的目标对象。\n\n`Weaving `： 把 Advice 代码织入到目标对象的过程。\n\n`Inter-type declarations` : 用来给一个类型声明额外的方法或属性。\n\n\n\n#### 工程引入\n\n集成AspectJ主要有两种方式：\n\n1. 原始Gradle配置的方式：\n\n   项目根目录的build.gradle添加配置\n\n   ```groovy\n   buildscript {\n       ...\n       dependencies {        \n           classpath 'org.aspectj:aspectjtools:1.8.6'\n           ...\n       }\n   }\n   ```\n\n   在app module的build.gradle文件中添加配置\n\n   ```groovy\n   apply plugin: 'com.android.application'\n   \n   android {\n       ...\n   }\n   \n   import org.aspectj.bridge.IMessage\n   import org.aspectj.bridge.MessageHandler\n   import org.aspectj.tools.ajc.Main\n   \n   final def log = project.logger\n   final def variants = project.android.applicationVariants\n   //在构建工程时，执行编织\n   variants.all { variant ->\n       if (!variant.buildType.isDebuggable()) {\n           log.debug(\"Skipping non-debuggable build type '${variant.buildType.name}'.\")\n           return;\n       }\n   \n       JavaCompile javaCompile = variant.javaCompile\n       javaCompile.doLast {\n           String[] args = [\"-showWeaveInfo\",\n                            \"-1.8\",\n                            \"-inpath\", javaCompile.destinationDir.toString(),\n                            \"-aspectpath\", javaCompile.classpath.asPath,\n                            \"-d\", javaCompile.destinationDir.toString(),\n                            \"-classpath\", javaCompile.classpath.asPath,\n                            \"-bootclasspath\", project.android.bootClasspath.join(File.pathSeparator)]\n           log.debug \"ajc args: \" + Arrays.toString(args)\n   \n           MessageHandler handler = new MessageHandler(true);\n           new Main().run(args, handler);\n           for (IMessage message : handler.getMessages(null, true)) {\n               switch (message.getKind()) {\n                   case IMessage.ABORT:\n                   case IMessage.ERROR:\n                   case IMessage.FAIL:\n                       log.error message.message, message.thrown\n                       break;\n                   case IMessage.WARNING:\n                       log.warn message.message, message.thrown\n                       break;\n                   case IMessage.INFO:\n                       log.info message.message, message.thrown\n                       break;\n                   case IMessage.DEBUG:\n                       log.debug message.message, message.thrown\n                       break;\n               }\n           }\n       }\n   }\n   \n   \n   dependencies {\n       ...\n       compile 'org.aspectj:aspectjrt:1.8.6'\n   }\n   ```\n\n   \n\n   \n\n2. 插件的方式 ：\n\n   Github上的开源插件 -[AspectJX](https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/)，一个基于AspectJ并在此基础上扩展出来可应用于Android开发平台的AOP框架，可作用于java源码，class文件及jar包，同时支持kotlin的应用，提供了AspectJ同样的功能。\n\n   \n\n   在项目根目录的build.gradle里依赖AspectJX\n\n   ```groovy\n    dependencies {\n           classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4'\n    }\n   ```\n\n   \n\n   在app项目的build.gradle里应用插件\n\n   ```groovy\n   apply plugin: 'android-aspectjx'\n   //或者这样也可以\n   apply plugin: 'com.hujiang.android-aspectjx'\n   ```\n\n   \n\n   下面是使用 android-aspectjx 插件需要注意的点：\n\n   1. android-aspectjx 插件是 使用在 application module 的插件，只能在编译 application module 的过程中织入代码。\n\n   2. AspectJ 的原理是在编译期注入代码，所以**切面只能是项目代码、依赖的 jar 或 aar，不能注入 Android 平台 android.jar**。例如，可以在 support 包的 Fragment 中注入代码，但是无法在 Activity 中注入代码，只能注入项目的继承自 Activity 的 XXActivity。\n\n   3. android-aspectjx 默认会遍历项目编译后所有的 .class 文件和依赖的第三方库去查找符合织入条件的切点，为了提升效率，可以加入过滤条件，具体见[ Android Aspectjx](https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/blob/master/README-zh.md) 的文档。\n\n      \n\n#### 简单Demo\n\n新建`` FragmentAspect ``类，添加注解，实现在Fragment调用onResume和onPause之前打印log\n\n```java\n@Aspect\npublic class FragmentAspect {\n\n    private static final String TAG = \"FragmentAspect\";\n\n    @Pointcut(\"execution(void android.support.v4.app.Fragment.onResume()) && target(fragment)\")\n    public void resume(Fragment fragment) {\n    }\n\n    @Pointcut(\"execution(void android.support.v4.app.Fragment.onPause()) && target(fragment)\")\n    public void pause(Fragment fragment) {\n    }\n\n    @Before(\"resume(fragment)\")\n    public void beforeOnResume(Fragment fragment) {\n        Log.d(TAG, fragment.getClass().getSimpleName() + \" onResume\");\n    }\n\n    @Before(\"pause(fragment)\")\n    public void beforeOnPause(Fragment fragment) {\n        Log.d(TAG, fragment.getClass().getSimpleName() + \" onPause\");\n    }\n }\n```\n\n编译成功后找到MainFragment.class，已经生成注入代码\n\n```java\npublic class MainFragment extends Fragment {\n    private MainViewModel mViewModel;\n\n    public MainFragment() {\n    }\n\n    public static MainFragment newInstance() {\n        return new MainFragment();\n    }\n\n    @Nullable\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        return inflater.inflate(2131296284, container, false);\n    }\n\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        this.mViewModel = (MainViewModel)ViewModelProviders.of(this).get(MainViewModel.class);\n    }\n\n    public void onResume() {\n        FragmentAspect.aspectOf().beforeOnResume(this);\n\n        try {\n            Thread.sleep(2000L);\n        } catch (InterruptedException var2) {\n            var2.printStackTrace();\n        }\n\n        super.onResume();\n    }\n\n    public void onPause() {\n        FragmentAspect.aspectOf().beforeOnPause(this);\n        super.onPause();\n    }\n}\n```\n\n#### 语法详解\n\nJoin Point表示连接点，即AOP可织入代码的点，下表列出了AspectJ的所有连接点：\n\n| Join Point            | 说明                     |\n| --------------------- | ------------------------ |\n| Method call           | 方法被调用               |\n| Method execution      | 方法执行                 |\n| Constructor call      | 构造函数被调用           |\n| Constructor execution | 构造函数执行             |\n| Field get             | 读取属性                 |\n| Field set             | 写入属性                 |\n| Pre-initialization    | 与构造函数有关，很少用到 |\n| Initialization        | 与构造函数有关，很少用到 |\n| Static initialization | static 块初始化          |\n| Handler               | 异常处理                 |\n| Advice execution      | 所有 Advice 执行         |\n\n具体语法：\n\n- @Aspect\n\n  AOP中的关键单位 - 切面，开发中一般将Pointcut和Advice放一个Aspect类中，在给予Aspect注解开发方式中只需要在类的头部加上@Aspect注解即可，@Aspect不可用于修饰接口。\n\n- @Pointcut\n\n  `语法结构`：@Pointcut(\"Pointcut syntax\")\n\n```java\n@Pointcut(\"execution(void android.support.v4.app.Fragment.onResume()) && target(fragment)\")\n    public void resume(Fragment fragment) {\n}\n```\n\n​\tPointcuts 是具体的切入点，可以确定具体织入代码的地方，基本的 Pointcuts 是和 Join Point 相对应的。\n\n| Join Point            | Pointcuts syntax                      | 说明                                                         |\n| --------------------- | :------------------------------------ | ------------------------------------------------------------ |\n| Method call           | call(MethodPattern)                   | 方法被调用                                                   |\n| Method execution      | execution(MethodPattern)              | 方法执行                                                     |\n| Constructor call      | call(ConstructorPattern)              | 构造函数被调用                                               |\n| Constructor execution | execution(ConstructorPattern)         | 构造函数执行                                                 |\n| Field get             | get(FieldPattern)                     | 读取属性                                                     |\n| Field set             | set(FieldPattern)                     | 写入属性                                                     |\n| Pre-initialization    | initialization(ConstructorPattern)    | 对象预先初始化                                               |\n| Initialization        | preinitialization(ConstructorPattern) | 对象初始化                                                   |\n| Static initialization | staticinitialization(TypePattern)     | static块初始化                                               |\n| Handler               | handler(TypePattern)                  | 异常处理                                                     |\n| Advice execution      | adviceexcution()                      | 所有 Advice 执行                                             |\n|                       | within(TypePattern)                   | 符合 TypePattern 的代码中的 Join Point                       |\n|                       | withincode(MethodPattern)             | 符合 TypePattern 的代码中的 Join Point                       |\n|                       | withincode(ConstructorPattern)        | 在某些构造函数中的 Join Point                                |\n|                       | cflow(Pointcut)                       | Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，包括 P 本身 |\n|                       | cflowbelow(Pointcut)                  | Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，不包括 P 本身 |\n|                       | this(Type or Id)                      | Join Point 所属的 this 对象是否 instanceOf Type 或者 Id 的类型 |\n|                       | target(Type or Id)                    | Join Point 所在的对象（例如 call 或 execution 操作符应用的对象）是否 instanceOf Type 或者 Id 的类型 |\n|                       | args(Type or Id, …)                   | 方法或构造函数参数的类型                                     |\n|                       | if(BooleanExpression)                 | 满足表达式的 Join Point，表达式只能使用静态属性、Pointcuts 或 Advice 暴露的参数、thisJoinPoint 对象 |\n\n​\t上面 Pointcuts 的语法中涉及到一些 Pattern，下面是这些 Pattern 的规则，`[]`里的内容是可选的：\n\n| Pattern            | 规则                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| MethodPattern      | [!] [@Annotation] [public,protected,private] [static] [final] [返回值类型] [类名.]方法名(参数类型列表) [throws 异常类型] |\n| ConstructorPattern | [!] [@Annotation] [public,protected,private] [final] [类名.]new(参数类型列表) [throws 异常类型] |\n| FieldPattern       | [!] [@Annotation] [public,protected,private] [static] [final] 属性类型 [类名.]属性名 |\n| TypePattern        | 其他 Pattern 涉及到的类型规则也是一样，可以使用 ‘!’、’*‘、’..’、’+’，’!’ 表示取反，’*‘ 匹配除 . 外的所有字符串，’*’ 单独使用事表示匹配任意类型，’..’ 匹配任意字符串，’..’ 单独使用时表示匹配任意长度任意类型，’+’ 匹配其自身及子类，还有一个 ‘…’表示不定个数 |\n\n​\tPointcut 表达式还可以 ！、&&、|| 来组合，!Pointcut 选取不符合 Pointcut 的 Join Point，Pointcut0 && Pointcut1 选取符合 Pointcut0 和 Pointcut1 的 Join Point，Pointcut0 || Pointcut1 选取符合 Pointcut0 或 Pointcut1 的 Join Point。\n\n- @Advice\n\n  `语法结构`：Advice(\"Pointcut定义的方法\")  或者  Advice(\"Pointcut表达式\")\n\n  ```java\n  @Before(\"resume(fragment)\")\n      public void beforeOnResume(Fragment fragment) {\n          Log.d(TAG, fragment.getClass().getSimpleName() + \" onResume\");\n  }\n  ```\n\n  Advice 是在切入点上织入的代码，在 AspectJ 中有五种类型：Before、After、AfterReturning、AfterThrowing、Around。\n  \n\n  | Advice          | 说明                                                         |\n  | --------------- | ------------------------------------------------------------ |\n  | @Before         | 在执行 Join Point 之前                                       |\n  | @After          | 在执行 Join Point 之后，包括正常的 return 和 throw 异常      |\n  | @AfterReturning | Join Point 为方法调用且正常 return 时，不指定返回类型时匹配所有类型 |\n  | @AfterThrowing  | Join Point 为方法调用且抛出异常时，不指定异常类型时匹配所有类型 |\n  | @Around         | 替代 Join Point 的代码，如果要执行原来代码的话，要使用 ProceedingJoinPoint.proceed() |\n\n  \n\n  Advice注解修改的方法必须是**``public``**,Before、After、AfterReturning、AfterThrowing 四种类型修饰的方法返回值也必须为 **``void``**，Around的目标因为是替换原来的Joint Point，所以他会有返回值，一般是**``Object``**。Advice 需要使用 `JoinPoint`、`JoinPointStaticPart`、`JoinPoint.EnclosingStaticPart`时，要在方法中声明为额外的参数，@Around 方法可以使用 `ProceedingJoinPoint`，用以调用 proceed() 方法。\n\n  ```java\n  @Around(\"execution(* com.example.tanhuanpei.learndemo..*.*(..))\")\n      public Object log(ProceedingJoinPoint joinPoint) throws Throwable {\n          long start = System.currentTimeMillis();\n          Object proceed = joinPoint.proceed();\n          long consume = System.currentTimeMillis() - start;\n          Log.e(TAG, consume + \"ms \" + joinPoint.getSignature() + \" main thread method\");\n          return proceed;\n  }\n  ```\n\n\n\n至此，AspectJ在Android的应用入门介绍完毕。","source":"_posts/Android进阶之Aspectj-in-Android入门.md","raw":"---\ntitle: Android进阶之Aspectj in Android入门\ndate: 2019-01-14 15:56:40\ntags: AspectJ 进阶\n---\n\n\n#### 背景\n\nAOP，Aspect-oriented programming，面向切面编程，是一种可以通过预编译方式和运行期动态代理实现在不修改源码的情况下给程序动态统一添加功能的技术。主要用途有**日志记录，行为统计，安全控制，事务处理，异常处理，系统统一的认证、权限管理**等 。\n\n常见实现AOP编程库\n\n- AspectJ：和Java语言无缝衔接的面向切面的编程的扩展工具（可用于Android）。\n- Javassit for Android：一个移植到Android平台的非常知名的操纵字节码的java库。\n- DexMaker：用于在Dalvik VM编译时或运行时生成代码的基于java语言的一套API。\n- ASMDEX：一个字节码操作库（ASM），但它处理Android可执行文件（DEX字节码）。\n\n要学习AspectJ，先理解其中一些概念。\n\n`Join Point `：连接点，程序中可切入的点，例如方法调用时、读取某个变量时。\n\n`Pointcut` ：切入点，代码注入的位置，其实就是有条件限定的 Join Point，例如只在特定方法中注入代码。\n\n`Advice `：在切入点注入的代码，一般有 before、after、around 三种类型。\n\n`Target Object` ：被一个或多个 aspect 横切拦截操作的目标对象。\n\n`Weaving `： 把 Advice 代码织入到目标对象的过程。\n\n`Inter-type declarations` : 用来给一个类型声明额外的方法或属性。\n\n\n\n#### 工程引入\n\n集成AspectJ主要有两种方式：\n\n1. 原始Gradle配置的方式：\n\n   项目根目录的build.gradle添加配置\n\n   ```groovy\n   buildscript {\n       ...\n       dependencies {        \n           classpath 'org.aspectj:aspectjtools:1.8.6'\n           ...\n       }\n   }\n   ```\n\n   在app module的build.gradle文件中添加配置\n\n   ```groovy\n   apply plugin: 'com.android.application'\n   \n   android {\n       ...\n   }\n   \n   import org.aspectj.bridge.IMessage\n   import org.aspectj.bridge.MessageHandler\n   import org.aspectj.tools.ajc.Main\n   \n   final def log = project.logger\n   final def variants = project.android.applicationVariants\n   //在构建工程时，执行编织\n   variants.all { variant ->\n       if (!variant.buildType.isDebuggable()) {\n           log.debug(\"Skipping non-debuggable build type '${variant.buildType.name}'.\")\n           return;\n       }\n   \n       JavaCompile javaCompile = variant.javaCompile\n       javaCompile.doLast {\n           String[] args = [\"-showWeaveInfo\",\n                            \"-1.8\",\n                            \"-inpath\", javaCompile.destinationDir.toString(),\n                            \"-aspectpath\", javaCompile.classpath.asPath,\n                            \"-d\", javaCompile.destinationDir.toString(),\n                            \"-classpath\", javaCompile.classpath.asPath,\n                            \"-bootclasspath\", project.android.bootClasspath.join(File.pathSeparator)]\n           log.debug \"ajc args: \" + Arrays.toString(args)\n   \n           MessageHandler handler = new MessageHandler(true);\n           new Main().run(args, handler);\n           for (IMessage message : handler.getMessages(null, true)) {\n               switch (message.getKind()) {\n                   case IMessage.ABORT:\n                   case IMessage.ERROR:\n                   case IMessage.FAIL:\n                       log.error message.message, message.thrown\n                       break;\n                   case IMessage.WARNING:\n                       log.warn message.message, message.thrown\n                       break;\n                   case IMessage.INFO:\n                       log.info message.message, message.thrown\n                       break;\n                   case IMessage.DEBUG:\n                       log.debug message.message, message.thrown\n                       break;\n               }\n           }\n       }\n   }\n   \n   \n   dependencies {\n       ...\n       compile 'org.aspectj:aspectjrt:1.8.6'\n   }\n   ```\n\n   \n\n   \n\n2. 插件的方式 ：\n\n   Github上的开源插件 -[AspectJX](https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/)，一个基于AspectJ并在此基础上扩展出来可应用于Android开发平台的AOP框架，可作用于java源码，class文件及jar包，同时支持kotlin的应用，提供了AspectJ同样的功能。\n\n   \n\n   在项目根目录的build.gradle里依赖AspectJX\n\n   ```groovy\n    dependencies {\n           classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4'\n    }\n   ```\n\n   \n\n   在app项目的build.gradle里应用插件\n\n   ```groovy\n   apply plugin: 'android-aspectjx'\n   //或者这样也可以\n   apply plugin: 'com.hujiang.android-aspectjx'\n   ```\n\n   \n\n   下面是使用 android-aspectjx 插件需要注意的点：\n\n   1. android-aspectjx 插件是 使用在 application module 的插件，只能在编译 application module 的过程中织入代码。\n\n   2. AspectJ 的原理是在编译期注入代码，所以**切面只能是项目代码、依赖的 jar 或 aar，不能注入 Android 平台 android.jar**。例如，可以在 support 包的 Fragment 中注入代码，但是无法在 Activity 中注入代码，只能注入项目的继承自 Activity 的 XXActivity。\n\n   3. android-aspectjx 默认会遍历项目编译后所有的 .class 文件和依赖的第三方库去查找符合织入条件的切点，为了提升效率，可以加入过滤条件，具体见[ Android Aspectjx](https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/blob/master/README-zh.md) 的文档。\n\n      \n\n#### 简单Demo\n\n新建`` FragmentAspect ``类，添加注解，实现在Fragment调用onResume和onPause之前打印log\n\n```java\n@Aspect\npublic class FragmentAspect {\n\n    private static final String TAG = \"FragmentAspect\";\n\n    @Pointcut(\"execution(void android.support.v4.app.Fragment.onResume()) && target(fragment)\")\n    public void resume(Fragment fragment) {\n    }\n\n    @Pointcut(\"execution(void android.support.v4.app.Fragment.onPause()) && target(fragment)\")\n    public void pause(Fragment fragment) {\n    }\n\n    @Before(\"resume(fragment)\")\n    public void beforeOnResume(Fragment fragment) {\n        Log.d(TAG, fragment.getClass().getSimpleName() + \" onResume\");\n    }\n\n    @Before(\"pause(fragment)\")\n    public void beforeOnPause(Fragment fragment) {\n        Log.d(TAG, fragment.getClass().getSimpleName() + \" onPause\");\n    }\n }\n```\n\n编译成功后找到MainFragment.class，已经生成注入代码\n\n```java\npublic class MainFragment extends Fragment {\n    private MainViewModel mViewModel;\n\n    public MainFragment() {\n    }\n\n    public static MainFragment newInstance() {\n        return new MainFragment();\n    }\n\n    @Nullable\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        return inflater.inflate(2131296284, container, false);\n    }\n\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        this.mViewModel = (MainViewModel)ViewModelProviders.of(this).get(MainViewModel.class);\n    }\n\n    public void onResume() {\n        FragmentAspect.aspectOf().beforeOnResume(this);\n\n        try {\n            Thread.sleep(2000L);\n        } catch (InterruptedException var2) {\n            var2.printStackTrace();\n        }\n\n        super.onResume();\n    }\n\n    public void onPause() {\n        FragmentAspect.aspectOf().beforeOnPause(this);\n        super.onPause();\n    }\n}\n```\n\n#### 语法详解\n\nJoin Point表示连接点，即AOP可织入代码的点，下表列出了AspectJ的所有连接点：\n\n| Join Point            | 说明                     |\n| --------------------- | ------------------------ |\n| Method call           | 方法被调用               |\n| Method execution      | 方法执行                 |\n| Constructor call      | 构造函数被调用           |\n| Constructor execution | 构造函数执行             |\n| Field get             | 读取属性                 |\n| Field set             | 写入属性                 |\n| Pre-initialization    | 与构造函数有关，很少用到 |\n| Initialization        | 与构造函数有关，很少用到 |\n| Static initialization | static 块初始化          |\n| Handler               | 异常处理                 |\n| Advice execution      | 所有 Advice 执行         |\n\n具体语法：\n\n- @Aspect\n\n  AOP中的关键单位 - 切面，开发中一般将Pointcut和Advice放一个Aspect类中，在给予Aspect注解开发方式中只需要在类的头部加上@Aspect注解即可，@Aspect不可用于修饰接口。\n\n- @Pointcut\n\n  `语法结构`：@Pointcut(\"Pointcut syntax\")\n\n```java\n@Pointcut(\"execution(void android.support.v4.app.Fragment.onResume()) && target(fragment)\")\n    public void resume(Fragment fragment) {\n}\n```\n\n​\tPointcuts 是具体的切入点，可以确定具体织入代码的地方，基本的 Pointcuts 是和 Join Point 相对应的。\n\n| Join Point            | Pointcuts syntax                      | 说明                                                         |\n| --------------------- | :------------------------------------ | ------------------------------------------------------------ |\n| Method call           | call(MethodPattern)                   | 方法被调用                                                   |\n| Method execution      | execution(MethodPattern)              | 方法执行                                                     |\n| Constructor call      | call(ConstructorPattern)              | 构造函数被调用                                               |\n| Constructor execution | execution(ConstructorPattern)         | 构造函数执行                                                 |\n| Field get             | get(FieldPattern)                     | 读取属性                                                     |\n| Field set             | set(FieldPattern)                     | 写入属性                                                     |\n| Pre-initialization    | initialization(ConstructorPattern)    | 对象预先初始化                                               |\n| Initialization        | preinitialization(ConstructorPattern) | 对象初始化                                                   |\n| Static initialization | staticinitialization(TypePattern)     | static块初始化                                               |\n| Handler               | handler(TypePattern)                  | 异常处理                                                     |\n| Advice execution      | adviceexcution()                      | 所有 Advice 执行                                             |\n|                       | within(TypePattern)                   | 符合 TypePattern 的代码中的 Join Point                       |\n|                       | withincode(MethodPattern)             | 符合 TypePattern 的代码中的 Join Point                       |\n|                       | withincode(ConstructorPattern)        | 在某些构造函数中的 Join Point                                |\n|                       | cflow(Pointcut)                       | Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，包括 P 本身 |\n|                       | cflowbelow(Pointcut)                  | Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，不包括 P 本身 |\n|                       | this(Type or Id)                      | Join Point 所属的 this 对象是否 instanceOf Type 或者 Id 的类型 |\n|                       | target(Type or Id)                    | Join Point 所在的对象（例如 call 或 execution 操作符应用的对象）是否 instanceOf Type 或者 Id 的类型 |\n|                       | args(Type or Id, …)                   | 方法或构造函数参数的类型                                     |\n|                       | if(BooleanExpression)                 | 满足表达式的 Join Point，表达式只能使用静态属性、Pointcuts 或 Advice 暴露的参数、thisJoinPoint 对象 |\n\n​\t上面 Pointcuts 的语法中涉及到一些 Pattern，下面是这些 Pattern 的规则，`[]`里的内容是可选的：\n\n| Pattern            | 规则                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| MethodPattern      | [!] [@Annotation] [public,protected,private] [static] [final] [返回值类型] [类名.]方法名(参数类型列表) [throws 异常类型] |\n| ConstructorPattern | [!] [@Annotation] [public,protected,private] [final] [类名.]new(参数类型列表) [throws 异常类型] |\n| FieldPattern       | [!] [@Annotation] [public,protected,private] [static] [final] 属性类型 [类名.]属性名 |\n| TypePattern        | 其他 Pattern 涉及到的类型规则也是一样，可以使用 ‘!’、’*‘、’..’、’+’，’!’ 表示取反，’*‘ 匹配除 . 外的所有字符串，’*’ 单独使用事表示匹配任意类型，’..’ 匹配任意字符串，’..’ 单独使用时表示匹配任意长度任意类型，’+’ 匹配其自身及子类，还有一个 ‘…’表示不定个数 |\n\n​\tPointcut 表达式还可以 ！、&&、|| 来组合，!Pointcut 选取不符合 Pointcut 的 Join Point，Pointcut0 && Pointcut1 选取符合 Pointcut0 和 Pointcut1 的 Join Point，Pointcut0 || Pointcut1 选取符合 Pointcut0 或 Pointcut1 的 Join Point。\n\n- @Advice\n\n  `语法结构`：Advice(\"Pointcut定义的方法\")  或者  Advice(\"Pointcut表达式\")\n\n  ```java\n  @Before(\"resume(fragment)\")\n      public void beforeOnResume(Fragment fragment) {\n          Log.d(TAG, fragment.getClass().getSimpleName() + \" onResume\");\n  }\n  ```\n\n  Advice 是在切入点上织入的代码，在 AspectJ 中有五种类型：Before、After、AfterReturning、AfterThrowing、Around。\n  \n\n  | Advice          | 说明                                                         |\n  | --------------- | ------------------------------------------------------------ |\n  | @Before         | 在执行 Join Point 之前                                       |\n  | @After          | 在执行 Join Point 之后，包括正常的 return 和 throw 异常      |\n  | @AfterReturning | Join Point 为方法调用且正常 return 时，不指定返回类型时匹配所有类型 |\n  | @AfterThrowing  | Join Point 为方法调用且抛出异常时，不指定异常类型时匹配所有类型 |\n  | @Around         | 替代 Join Point 的代码，如果要执行原来代码的话，要使用 ProceedingJoinPoint.proceed() |\n\n  \n\n  Advice注解修改的方法必须是**``public``**,Before、After、AfterReturning、AfterThrowing 四种类型修饰的方法返回值也必须为 **``void``**，Around的目标因为是替换原来的Joint Point，所以他会有返回值，一般是**``Object``**。Advice 需要使用 `JoinPoint`、`JoinPointStaticPart`、`JoinPoint.EnclosingStaticPart`时，要在方法中声明为额外的参数，@Around 方法可以使用 `ProceedingJoinPoint`，用以调用 proceed() 方法。\n\n  ```java\n  @Around(\"execution(* com.example.tanhuanpei.learndemo..*.*(..))\")\n      public Object log(ProceedingJoinPoint joinPoint) throws Throwable {\n          long start = System.currentTimeMillis();\n          Object proceed = joinPoint.proceed();\n          long consume = System.currentTimeMillis() - start;\n          Log.e(TAG, consume + \"ms \" + joinPoint.getSignature() + \" main thread method\");\n          return proceed;\n  }\n  ```\n\n\n\n至此，AspectJ在Android的应用入门介绍完毕。","slug":"Android进阶之Aspectj-in-Android入门","published":1,"updated":"2019-01-14T08:04:46.692Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0pa000anrvx88ck2ouz","content":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>AOP，Aspect-oriented programming，面向切面编程，是一种可以通过预编译方式和运行期动态代理实现在不修改源码的情况下给程序动态统一添加功能的技术。主要用途有<strong>日志记录，行为统计，安全控制，事务处理，异常处理，系统统一的认证、权限管理</strong>等 。</p>\n<p>常见实现AOP编程库</p>\n<ul>\n<li>AspectJ：和Java语言无缝衔接的面向切面的编程的扩展工具（可用于Android）。</li>\n<li>Javassit for Android：一个移植到Android平台的非常知名的操纵字节码的java库。</li>\n<li>DexMaker：用于在Dalvik VM编译时或运行时生成代码的基于java语言的一套API。</li>\n<li>ASMDEX：一个字节码操作库（ASM），但它处理Android可执行文件（DEX字节码）。</li>\n</ul>\n<p>要学习AspectJ，先理解其中一些概念。</p>\n<p><code>Join Point</code>：连接点，程序中可切入的点，例如方法调用时、读取某个变量时。</p>\n<p><code>Pointcut</code> ：切入点，代码注入的位置，其实就是有条件限定的 Join Point，例如只在特定方法中注入代码。</p>\n<p><code>Advice</code>：在切入点注入的代码，一般有 before、after、around 三种类型。</p>\n<p><code>Target Object</code> ：被一个或多个 aspect 横切拦截操作的目标对象。</p>\n<p><code>Weaving</code>： 把 Advice 代码织入到目标对象的过程。</p>\n<p><code>Inter-type declarations</code> : 用来给一个类型声明额外的方法或属性。</p>\n<h4 id=\"工程引入\"><a href=\"#工程引入\" class=\"headerlink\" title=\"工程引入\"></a>工程引入</h4><p>集成AspectJ主要有两种方式：</p>\n<ol>\n<li><p>原始Gradle配置的方式：</p>\n<p>项目根目录的build.gradle添加配置</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    dependencies &#123;        </span><br><span class=\"line\">        classpath <span class=\"string\">'org.aspectj:aspectjtools:1.8.6'</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在app module的build.gradle文件中添加配置</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.IMessage</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.MessageHandler</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.tools.ajc.Main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> log = project.logger</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> variants = project.android.applicationVariants</span><br><span class=\"line\"><span class=\"comment\">//在构建工程时，执行编织</span></span><br><span class=\"line\">variants.all &#123; variant -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!variant.buildType.isDebuggable()) &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Skipping non-debuggable build type '$&#123;variant.buildType.name&#125;'.\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaCompile javaCompile = variant.javaCompile</span><br><span class=\"line\">    javaCompile.doLast &#123;</span><br><span class=\"line\">        String[] args = [<span class=\"string\">\"-showWeaveInfo\"</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"-1.8\"</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"-inpath\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                         <span class=\"string\">\"-aspectpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                         <span class=\"string\">\"-d\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                         <span class=\"string\">\"-classpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                         <span class=\"string\">\"-bootclasspath\"</span>, project.android.bootClasspath.join(File.pathSeparator)]</span><br><span class=\"line\">        log.debug <span class=\"string\">\"ajc args: \"</span> + Arrays.toString(args)</span><br><span class=\"line\"></span><br><span class=\"line\">        MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Main().run(args, handler);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IMessage <span class=\"string\">message :</span> handler.getMessages(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (message.getKind()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ABORT:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ERROR:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">FAIL:</span></span><br><span class=\"line\">                    log.error message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">WARNING:</span></span><br><span class=\"line\">                    log.warn message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">INFO:</span></span><br><span class=\"line\">                    log.info message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">DEBUG:</span></span><br><span class=\"line\">                    log.debug message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    compile <span class=\"string\">'org.aspectj:aspectjrt:1.8.6'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>插件的方式 ：</p>\n<p>Github上的开源插件 -<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/\" target=\"_blank\" rel=\"noopener\">AspectJX</a>，一个基于AspectJ并在此基础上扩展出来可应用于Android开发平台的AOP框架，可作用于java源码，class文件及jar包，同时支持kotlin的应用，提供了AspectJ同样的功能。</p>\n</li>\n</ol>\n<p>   在项目根目录的build.gradle里依赖AspectJX</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">       classpath <span class=\"string\">'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>   在app项目的build.gradle里应用插件</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'android-aspectjx'</span></span><br><span class=\"line\"><span class=\"comment\">//或者这样也可以</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.hujiang.android-aspectjx'</span></span><br></pre></td></tr></table></figure>\n<p>   下面是使用 android-aspectjx 插件需要注意的点：</p>\n<ol>\n<li><p>android-aspectjx 插件是 使用在 application module 的插件，只能在编译 application module 的过程中织入代码。</p>\n</li>\n<li><p>AspectJ 的原理是在编译期注入代码，所以<strong>切面只能是项目代码、依赖的 jar 或 aar，不能注入 Android 平台 android.jar</strong>。例如，可以在 support 包的 Fragment 中注入代码，但是无法在 Activity 中注入代码，只能注入项目的继承自 Activity 的 XXActivity。</p>\n</li>\n<li><p>android-aspectjx 默认会遍历项目编译后所有的 .class 文件和依赖的第三方库去查找符合织入条件的切点，为了提升效率，可以加入过滤条件，具体见<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/blob/master/README-zh.md\" target=\"_blank\" rel=\"noopener\"> Android Aspectjx</a> 的文档。</p>\n</li>\n</ol>\n<h4 id=\"简单Demo\"><a href=\"#简单Demo\" class=\"headerlink\" title=\"简单Demo\"></a>简单Demo</h4><p>新建<code>FragmentAspect</code>类，添加注解，实现在Fragment调用onResume和onPause之前打印log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"FragmentAspect\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(void android.support.v4.app.Fragment.onResume()) &amp;&amp; target(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(void android.support.v4.app.Fragment.onPause()) &amp;&amp; target(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"resume(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeOnResume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, fragment.getClass().getSimpleName() + <span class=\"string\">\" onResume\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pause(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeOnPause</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, fragment.getClass().getSimpleName() + <span class=\"string\">\" onPause\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>编译成功后找到MainFragment.class，已经生成注入代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MainViewModel mViewModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MainFragment <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainFragment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(<span class=\"number\">2131296284</span>, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mViewModel = (MainViewModel)ViewModelProviders.of(<span class=\"keyword\">this</span>).get(MainViewModel.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FragmentAspect.aspectOf().beforeOnResume(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000L</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException var2) &#123;</span><br><span class=\"line\">            var2.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FragmentAspect.aspectOf().beforeOnPause(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"语法详解\"><a href=\"#语法详解\" class=\"headerlink\" title=\"语法详解\"></a>语法详解</h4><p>Join Point表示连接点，即AOP可织入代码的点，下表列出了AspectJ的所有连接点：</p>\n<table>\n<thead>\n<tr>\n<th>Join Point</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Method call</td>\n<td>方法被调用</td>\n</tr>\n<tr>\n<td>Method execution</td>\n<td>方法执行</td>\n</tr>\n<tr>\n<td>Constructor call</td>\n<td>构造函数被调用</td>\n</tr>\n<tr>\n<td>Constructor execution</td>\n<td>构造函数执行</td>\n</tr>\n<tr>\n<td>Field get</td>\n<td>读取属性</td>\n</tr>\n<tr>\n<td>Field set</td>\n<td>写入属性</td>\n</tr>\n<tr>\n<td>Pre-initialization</td>\n<td>与构造函数有关，很少用到</td>\n</tr>\n<tr>\n<td>Initialization</td>\n<td>与构造函数有关，很少用到</td>\n</tr>\n<tr>\n<td>Static initialization</td>\n<td>static 块初始化</td>\n</tr>\n<tr>\n<td>Handler</td>\n<td>异常处理</td>\n</tr>\n<tr>\n<td>Advice execution</td>\n<td>所有 Advice 执行</td>\n</tr>\n</tbody>\n</table>\n<p>具体语法：</p>\n<ul>\n<li><p>@Aspect</p>\n<p>AOP中的关键单位 - 切面，开发中一般将Pointcut和Advice放一个Aspect类中，在给予Aspect注解开发方式中只需要在类的头部加上@Aspect注解即可，@Aspect不可用于修饰接口。</p>\n</li>\n<li><p>@Pointcut</p>\n<p><code>语法结构</code>：@Pointcut(“Pointcut syntax”)</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(void android.support.v4.app.Fragment.onResume()) &amp;&amp; target(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    Pointcuts 是具体的切入点，可以确定具体织入代码的地方，基本的 Pointcuts 是和 Join Point 相对应的。</p>\n<table>\n<thead>\n<tr>\n<th>Join Point</th>\n<th style=\"text-align:left\">Pointcuts syntax</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Method call</td>\n<td style=\"text-align:left\">call(MethodPattern)</td>\n<td>方法被调用</td>\n</tr>\n<tr>\n<td>Method execution</td>\n<td style=\"text-align:left\">execution(MethodPattern)</td>\n<td>方法执行</td>\n</tr>\n<tr>\n<td>Constructor call</td>\n<td style=\"text-align:left\">call(ConstructorPattern)</td>\n<td>构造函数被调用</td>\n</tr>\n<tr>\n<td>Constructor execution</td>\n<td style=\"text-align:left\">execution(ConstructorPattern)</td>\n<td>构造函数执行</td>\n</tr>\n<tr>\n<td>Field get</td>\n<td style=\"text-align:left\">get(FieldPattern)</td>\n<td>读取属性</td>\n</tr>\n<tr>\n<td>Field set</td>\n<td style=\"text-align:left\">set(FieldPattern)</td>\n<td>写入属性</td>\n</tr>\n<tr>\n<td>Pre-initialization</td>\n<td style=\"text-align:left\">initialization(ConstructorPattern)</td>\n<td>对象预先初始化</td>\n</tr>\n<tr>\n<td>Initialization</td>\n<td style=\"text-align:left\">preinitialization(ConstructorPattern)</td>\n<td>对象初始化</td>\n</tr>\n<tr>\n<td>Static initialization</td>\n<td style=\"text-align:left\">staticinitialization(TypePattern)</td>\n<td>static块初始化</td>\n</tr>\n<tr>\n<td>Handler</td>\n<td style=\"text-align:left\">handler(TypePattern)</td>\n<td>异常处理</td>\n</tr>\n<tr>\n<td>Advice execution</td>\n<td style=\"text-align:left\">adviceexcution()</td>\n<td>所有 Advice 执行</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">within(TypePattern)</td>\n<td>符合 TypePattern 的代码中的 Join Point</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">withincode(MethodPattern)</td>\n<td>符合 TypePattern 的代码中的 Join Point</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">withincode(ConstructorPattern)</td>\n<td>在某些构造函数中的 Join Point</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">cflow(Pointcut)</td>\n<td>Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，包括 P 本身</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">cflowbelow(Pointcut)</td>\n<td>Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，不包括 P 本身</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">this(Type or Id)</td>\n<td>Join Point 所属的 this 对象是否 instanceOf Type 或者 Id 的类型</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">target(Type or Id)</td>\n<td>Join Point 所在的对象（例如 call 或 execution 操作符应用的对象）是否 instanceOf Type 或者 Id 的类型</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">args(Type or Id, …)</td>\n<td>方法或构造函数参数的类型</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">if(BooleanExpression)</td>\n<td>满足表达式的 Join Point，表达式只能使用静态属性、Pointcuts 或 Advice 暴露的参数、thisJoinPoint 对象</td>\n</tr>\n</tbody>\n</table>\n<p>​    上面 Pointcuts 的语法中涉及到一些 Pattern，下面是这些 Pattern 的规则，<code>[]</code>里的内容是可选的：</p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MethodPattern</td>\n<td>[!] [@Annotation] [public,protected,private] [static] [final] [返回值类型] [类名.]方法名(参数类型列表) [throws 异常类型]</td>\n</tr>\n<tr>\n<td>ConstructorPattern</td>\n<td>[!] [@Annotation] [public,protected,private] [final] [类名.]new(参数类型列表) [throws 异常类型]</td>\n</tr>\n<tr>\n<td>FieldPattern</td>\n<td>[!] [@Annotation] [public,protected,private] [static] [final] 属性类型 [类名.]属性名</td>\n</tr>\n<tr>\n<td>TypePattern</td>\n<td>其他 Pattern 涉及到的类型规则也是一样，可以使用 ‘!’、’<em>‘、’..’、’+’，’!’ 表示取反，’</em>‘ 匹配除 . 外的所有字符串，’*’ 单独使用事表示匹配任意类型，’..’ 匹配任意字符串，’..’ 单独使用时表示匹配任意长度任意类型，’+’ 匹配其自身及子类，还有一个 ‘…’表示不定个数</td>\n</tr>\n</tbody>\n</table>\n<p>​    Pointcut 表达式还可以 ！、&amp;&amp;、|| 来组合，!Pointcut 选取不符合 Pointcut 的 Join Point，Pointcut0 &amp;&amp; Pointcut1 选取符合 Pointcut0 和 Pointcut1 的 Join Point，Pointcut0 || Pointcut1 选取符合 Pointcut0 或 Pointcut1 的 Join Point。</p>\n<ul>\n<li><p>@Advice</p>\n<p><code>语法结构</code>：Advice(“Pointcut定义的方法”)  或者  Advice(“Pointcut表达式”)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"resume(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeOnResume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, fragment.getClass().getSimpleName() + <span class=\"string\">\" onResume\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Advice 是在切入点上织入的代码，在 AspectJ 中有五种类型：Before、After、AfterReturning、AfterThrowing、Around。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Advice</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Before</td>\n<td>在执行 Join Point 之前</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>在执行 Join Point 之后，包括正常的 return 和 throw 异常</td>\n</tr>\n<tr>\n<td>@AfterReturning</td>\n<td>Join Point 为方法调用且正常 return 时，不指定返回类型时匹配所有类型</td>\n</tr>\n<tr>\n<td>@AfterThrowing</td>\n<td>Join Point 为方法调用且抛出异常时，不指定异常类型时匹配所有类型</td>\n</tr>\n<tr>\n<td>@Around</td>\n<td>替代 Join Point 的代码，如果要执行原来代码的话，要使用 ProceedingJoinPoint.proceed()</td>\n</tr>\n</tbody>\n</table>\n<p>  Advice注解修改的方法必须是<strong><code>public</code></strong>,Before、After、AfterReturning、AfterThrowing 四种类型修饰的方法返回值也必须为 <strong><code>void</code></strong>，Around的目标因为是替换原来的Joint Point，所以他会有返回值，一般是<strong><code>Object</code></strong>。Advice 需要使用 <code>JoinPoint</code>、<code>JoinPointStaticPart</code>、<code>JoinPoint.EnclosingStaticPart</code>时，要在方法中声明为额外的参数，@Around 方法可以使用 <code>ProceedingJoinPoint</code>，用以调用 proceed() 方法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around</span>(<span class=\"string\">\"execution(* com.example.tanhuanpei.learndemo..*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">log</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Object proceed = joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> consume = System.currentTimeMillis() - start;</span><br><span class=\"line\">        Log.e(TAG, consume + <span class=\"string\">\"ms \"</span> + joinPoint.getSignature() + <span class=\"string\">\" main thread method\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，AspectJ在Android的应用入门介绍完毕。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><p>AOP，Aspect-oriented programming，面向切面编程，是一种可以通过预编译方式和运行期动态代理实现在不修改源码的情况下给程序动态统一添加功能的技术。主要用途有<strong>日志记录，行为统计，安全控制，事务处理，异常处理，系统统一的认证、权限管理</strong>等 。</p>\n<p>常见实现AOP编程库</p>\n<ul>\n<li>AspectJ：和Java语言无缝衔接的面向切面的编程的扩展工具（可用于Android）。</li>\n<li>Javassit for Android：一个移植到Android平台的非常知名的操纵字节码的java库。</li>\n<li>DexMaker：用于在Dalvik VM编译时或运行时生成代码的基于java语言的一套API。</li>\n<li>ASMDEX：一个字节码操作库（ASM），但它处理Android可执行文件（DEX字节码）。</li>\n</ul>\n<p>要学习AspectJ，先理解其中一些概念。</p>\n<p><code>Join Point</code>：连接点，程序中可切入的点，例如方法调用时、读取某个变量时。</p>\n<p><code>Pointcut</code> ：切入点，代码注入的位置，其实就是有条件限定的 Join Point，例如只在特定方法中注入代码。</p>\n<p><code>Advice</code>：在切入点注入的代码，一般有 before、after、around 三种类型。</p>\n<p><code>Target Object</code> ：被一个或多个 aspect 横切拦截操作的目标对象。</p>\n<p><code>Weaving</code>： 把 Advice 代码织入到目标对象的过程。</p>\n<p><code>Inter-type declarations</code> : 用来给一个类型声明额外的方法或属性。</p>\n<h4 id=\"工程引入\"><a href=\"#工程引入\" class=\"headerlink\" title=\"工程引入\"></a>工程引入</h4><p>集成AspectJ主要有两种方式：</p>\n<ol>\n<li><p>原始Gradle配置的方式：</p>\n<p>项目根目录的build.gradle添加配置</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    dependencies &#123;        </span><br><span class=\"line\">        classpath <span class=\"string\">'org.aspectj:aspectjtools:1.8.6'</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在app module的build.gradle文件中添加配置</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.IMessage</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.MessageHandler</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.tools.ajc.Main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> log = project.logger</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> variants = project.android.applicationVariants</span><br><span class=\"line\"><span class=\"comment\">//在构建工程时，执行编织</span></span><br><span class=\"line\">variants.all &#123; variant -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!variant.buildType.isDebuggable()) &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Skipping non-debuggable build type '$&#123;variant.buildType.name&#125;'.\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaCompile javaCompile = variant.javaCompile</span><br><span class=\"line\">    javaCompile.doLast &#123;</span><br><span class=\"line\">        String[] args = [<span class=\"string\">\"-showWeaveInfo\"</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"-1.8\"</span>,</span><br><span class=\"line\">                         <span class=\"string\">\"-inpath\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                         <span class=\"string\">\"-aspectpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                         <span class=\"string\">\"-d\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                         <span class=\"string\">\"-classpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                         <span class=\"string\">\"-bootclasspath\"</span>, project.android.bootClasspath.join(File.pathSeparator)]</span><br><span class=\"line\">        log.debug <span class=\"string\">\"ajc args: \"</span> + Arrays.toString(args)</span><br><span class=\"line\"></span><br><span class=\"line\">        MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Main().run(args, handler);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IMessage <span class=\"string\">message :</span> handler.getMessages(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (message.getKind()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ABORT:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ERROR:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">FAIL:</span></span><br><span class=\"line\">                    log.error message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">WARNING:</span></span><br><span class=\"line\">                    log.warn message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">INFO:</span></span><br><span class=\"line\">                    log.info message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">DEBUG:</span></span><br><span class=\"line\">                    log.debug message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    compile <span class=\"string\">'org.aspectj:aspectjrt:1.8.6'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>插件的方式 ：</p>\n<p>Github上的开源插件 -<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/\" target=\"_blank\" rel=\"noopener\">AspectJX</a>，一个基于AspectJ并在此基础上扩展出来可应用于Android开发平台的AOP框架，可作用于java源码，class文件及jar包，同时支持kotlin的应用，提供了AspectJ同样的功能。</p>\n</li>\n</ol>\n<p>   在项目根目录的build.gradle里依赖AspectJX</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">       classpath <span class=\"string\">'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>   在app项目的build.gradle里应用插件</p>\n   <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'android-aspectjx'</span></span><br><span class=\"line\"><span class=\"comment\">//或者这样也可以</span></span><br><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.hujiang.android-aspectjx'</span></span><br></pre></td></tr></table></figure>\n<p>   下面是使用 android-aspectjx 插件需要注意的点：</p>\n<ol>\n<li><p>android-aspectjx 插件是 使用在 application module 的插件，只能在编译 application module 的过程中织入代码。</p>\n</li>\n<li><p>AspectJ 的原理是在编译期注入代码，所以<strong>切面只能是项目代码、依赖的 jar 或 aar，不能注入 Android 平台 android.jar</strong>。例如，可以在 support 包的 Fragment 中注入代码，但是无法在 Activity 中注入代码，只能注入项目的继承自 Activity 的 XXActivity。</p>\n</li>\n<li><p>android-aspectjx 默认会遍历项目编译后所有的 .class 文件和依赖的第三方库去查找符合织入条件的切点，为了提升效率，可以加入过滤条件，具体见<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/blob/master/README-zh.md\" target=\"_blank\" rel=\"noopener\"> Android Aspectjx</a> 的文档。</p>\n</li>\n</ol>\n<h4 id=\"简单Demo\"><a href=\"#简单Demo\" class=\"headerlink\" title=\"简单Demo\"></a>简单Demo</h4><p>新建<code>FragmentAspect</code>类，添加注解，实现在Fragment调用onResume和onPause之前打印log</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"FragmentAspect\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(void android.support.v4.app.Fragment.onResume()) &amp;&amp; target(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(void android.support.v4.app.Fragment.onPause()) &amp;&amp; target(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"resume(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeOnResume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, fragment.getClass().getSimpleName() + <span class=\"string\">\" onResume\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"pause(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeOnPause</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, fragment.getClass().getSimpleName() + <span class=\"string\">\" onPause\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>编译成功后找到MainFragment.class，已经生成注入代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MainViewModel mViewModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainFragment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MainFragment <span class=\"title\">newInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainFragment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(<span class=\"number\">2131296284</span>, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mViewModel = (MainViewModel)ViewModelProviders.of(<span class=\"keyword\">this</span>).get(MainViewModel.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FragmentAspect.aspectOf().beforeOnResume(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">2000L</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException var2) &#123;</span><br><span class=\"line\">            var2.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FragmentAspect.aspectOf().beforeOnPause(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"语法详解\"><a href=\"#语法详解\" class=\"headerlink\" title=\"语法详解\"></a>语法详解</h4><p>Join Point表示连接点，即AOP可织入代码的点，下表列出了AspectJ的所有连接点：</p>\n<table>\n<thead>\n<tr>\n<th>Join Point</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Method call</td>\n<td>方法被调用</td>\n</tr>\n<tr>\n<td>Method execution</td>\n<td>方法执行</td>\n</tr>\n<tr>\n<td>Constructor call</td>\n<td>构造函数被调用</td>\n</tr>\n<tr>\n<td>Constructor execution</td>\n<td>构造函数执行</td>\n</tr>\n<tr>\n<td>Field get</td>\n<td>读取属性</td>\n</tr>\n<tr>\n<td>Field set</td>\n<td>写入属性</td>\n</tr>\n<tr>\n<td>Pre-initialization</td>\n<td>与构造函数有关，很少用到</td>\n</tr>\n<tr>\n<td>Initialization</td>\n<td>与构造函数有关，很少用到</td>\n</tr>\n<tr>\n<td>Static initialization</td>\n<td>static 块初始化</td>\n</tr>\n<tr>\n<td>Handler</td>\n<td>异常处理</td>\n</tr>\n<tr>\n<td>Advice execution</td>\n<td>所有 Advice 执行</td>\n</tr>\n</tbody>\n</table>\n<p>具体语法：</p>\n<ul>\n<li><p>@Aspect</p>\n<p>AOP中的关键单位 - 切面，开发中一般将Pointcut和Advice放一个Aspect类中，在给予Aspect注解开发方式中只需要在类的头部加上@Aspect注解即可，@Aspect不可用于修饰接口。</p>\n</li>\n<li><p>@Pointcut</p>\n<p><code>语法结构</code>：@Pointcut(“Pointcut syntax”)</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(void android.support.v4.app.Fragment.onResume()) &amp;&amp; target(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">resume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    Pointcuts 是具体的切入点，可以确定具体织入代码的地方，基本的 Pointcuts 是和 Join Point 相对应的。</p>\n<table>\n<thead>\n<tr>\n<th>Join Point</th>\n<th style=\"text-align:left\">Pointcuts syntax</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Method call</td>\n<td style=\"text-align:left\">call(MethodPattern)</td>\n<td>方法被调用</td>\n</tr>\n<tr>\n<td>Method execution</td>\n<td style=\"text-align:left\">execution(MethodPattern)</td>\n<td>方法执行</td>\n</tr>\n<tr>\n<td>Constructor call</td>\n<td style=\"text-align:left\">call(ConstructorPattern)</td>\n<td>构造函数被调用</td>\n</tr>\n<tr>\n<td>Constructor execution</td>\n<td style=\"text-align:left\">execution(ConstructorPattern)</td>\n<td>构造函数执行</td>\n</tr>\n<tr>\n<td>Field get</td>\n<td style=\"text-align:left\">get(FieldPattern)</td>\n<td>读取属性</td>\n</tr>\n<tr>\n<td>Field set</td>\n<td style=\"text-align:left\">set(FieldPattern)</td>\n<td>写入属性</td>\n</tr>\n<tr>\n<td>Pre-initialization</td>\n<td style=\"text-align:left\">initialization(ConstructorPattern)</td>\n<td>对象预先初始化</td>\n</tr>\n<tr>\n<td>Initialization</td>\n<td style=\"text-align:left\">preinitialization(ConstructorPattern)</td>\n<td>对象初始化</td>\n</tr>\n<tr>\n<td>Static initialization</td>\n<td style=\"text-align:left\">staticinitialization(TypePattern)</td>\n<td>static块初始化</td>\n</tr>\n<tr>\n<td>Handler</td>\n<td style=\"text-align:left\">handler(TypePattern)</td>\n<td>异常处理</td>\n</tr>\n<tr>\n<td>Advice execution</td>\n<td style=\"text-align:left\">adviceexcution()</td>\n<td>所有 Advice 执行</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">within(TypePattern)</td>\n<td>符合 TypePattern 的代码中的 Join Point</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">withincode(MethodPattern)</td>\n<td>符合 TypePattern 的代码中的 Join Point</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">withincode(ConstructorPattern)</td>\n<td>在某些构造函数中的 Join Point</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">cflow(Pointcut)</td>\n<td>Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，包括 P 本身</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">cflowbelow(Pointcut)</td>\n<td>Pointcut 选择出的切入点 P 的控制流中的所有 Join Point，不包括 P 本身</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">this(Type or Id)</td>\n<td>Join Point 所属的 this 对象是否 instanceOf Type 或者 Id 的类型</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">target(Type or Id)</td>\n<td>Join Point 所在的对象（例如 call 或 execution 操作符应用的对象）是否 instanceOf Type 或者 Id 的类型</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">args(Type or Id, …)</td>\n<td>方法或构造函数参数的类型</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:left\">if(BooleanExpression)</td>\n<td>满足表达式的 Join Point，表达式只能使用静态属性、Pointcuts 或 Advice 暴露的参数、thisJoinPoint 对象</td>\n</tr>\n</tbody>\n</table>\n<p>​    上面 Pointcuts 的语法中涉及到一些 Pattern，下面是这些 Pattern 的规则，<code>[]</code>里的内容是可选的：</p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MethodPattern</td>\n<td>[!] [@Annotation] [public,protected,private] [static] [final] [返回值类型] [类名.]方法名(参数类型列表) [throws 异常类型]</td>\n</tr>\n<tr>\n<td>ConstructorPattern</td>\n<td>[!] [@Annotation] [public,protected,private] [final] [类名.]new(参数类型列表) [throws 异常类型]</td>\n</tr>\n<tr>\n<td>FieldPattern</td>\n<td>[!] [@Annotation] [public,protected,private] [static] [final] 属性类型 [类名.]属性名</td>\n</tr>\n<tr>\n<td>TypePattern</td>\n<td>其他 Pattern 涉及到的类型规则也是一样，可以使用 ‘!’、’<em>‘、’..’、’+’，’!’ 表示取反，’</em>‘ 匹配除 . 外的所有字符串，’*’ 单独使用事表示匹配任意类型，’..’ 匹配任意字符串，’..’ 单独使用时表示匹配任意长度任意类型，’+’ 匹配其自身及子类，还有一个 ‘…’表示不定个数</td>\n</tr>\n</tbody>\n</table>\n<p>​    Pointcut 表达式还可以 ！、&amp;&amp;、|| 来组合，!Pointcut 选取不符合 Pointcut 的 Join Point，Pointcut0 &amp;&amp; Pointcut1 选取符合 Pointcut0 和 Pointcut1 的 Join Point，Pointcut0 || Pointcut1 选取符合 Pointcut0 或 Pointcut1 的 Join Point。</p>\n<ul>\n<li><p>@Advice</p>\n<p><code>语法结构</code>：Advice(“Pointcut定义的方法”)  或者  Advice(“Pointcut表达式”)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"resume(fragment)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeOnResume</span><span class=\"params\">(Fragment fragment)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, fragment.getClass().getSimpleName() + <span class=\"string\">\" onResume\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Advice 是在切入点上织入的代码，在 AspectJ 中有五种类型：Before、After、AfterReturning、AfterThrowing、Around。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Advice</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Before</td>\n<td>在执行 Join Point 之前</td>\n</tr>\n<tr>\n<td>@After</td>\n<td>在执行 Join Point 之后，包括正常的 return 和 throw 异常</td>\n</tr>\n<tr>\n<td>@AfterReturning</td>\n<td>Join Point 为方法调用且正常 return 时，不指定返回类型时匹配所有类型</td>\n</tr>\n<tr>\n<td>@AfterThrowing</td>\n<td>Join Point 为方法调用且抛出异常时，不指定异常类型时匹配所有类型</td>\n</tr>\n<tr>\n<td>@Around</td>\n<td>替代 Join Point 的代码，如果要执行原来代码的话，要使用 ProceedingJoinPoint.proceed()</td>\n</tr>\n</tbody>\n</table>\n<p>  Advice注解修改的方法必须是<strong><code>public</code></strong>,Before、After、AfterReturning、AfterThrowing 四种类型修饰的方法返回值也必须为 <strong><code>void</code></strong>，Around的目标因为是替换原来的Joint Point，所以他会有返回值，一般是<strong><code>Object</code></strong>。Advice 需要使用 <code>JoinPoint</code>、<code>JoinPointStaticPart</code>、<code>JoinPoint.EnclosingStaticPart</code>时，要在方法中声明为额外的参数，@Around 方法可以使用 <code>ProceedingJoinPoint</code>，用以调用 proceed() 方法。</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around</span>(<span class=\"string\">\"execution(* com.example.tanhuanpei.learndemo..*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">log</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        Object proceed = joinPoint.proceed();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> consume = System.currentTimeMillis() - start;</span><br><span class=\"line\">        Log.e(TAG, consume + <span class=\"string\">\"ms \"</span> + joinPoint.getSignature() + <span class=\"string\">\" main thread method\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，AspectJ在Android的应用入门介绍完毕。</p>\n"},{"title":"HTTPS握手过程详解与优化方法","date":"2019-01-29T08:14:23.000Z","_content":"\n#### HTTPS\n\nHTTPS协议可以简单的认为是HTTP+TLS/SSL。`SSL（Secure Socket Layer）是安全套接层，TLS（Transport Layer Security）是传输层安全协议`，建立在SSL3.0协议规范，是SSL3.0的后续版本。当前最新使用的是TLS1.2协议。1.3版本还在草案阶段。\n\n![image](/HTTPS握手过程详解与优化方法/1548387314931.png)\n\n\n\nHTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL，也可以使用其后继者—— `传输层安全(Transport Layer Security，TLS)`。由于 SSL 和 TLS 非常类似，所以我们不太严格地用术语 SSL 来表示 SSL 和 TLS。\n\n![image](/HTTPS握手过程详解与优化方法/930623111-59ed85819d22b_articlex.png)\n\n#### TLS握手过程\n\n在传输应用数据之前，客户端与服务端经过协商秘钥、加密算法等信息，服务端还要把自己的证书发送给客户端以表明身份，这些环节构成了TLS握手过程，如下两图所示：\n\n![img](https://upload-images.jianshu.io/upload_images/2111324-19f47f0a6829c6f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/409/format/webp)\n\n\n\n![](/HTTPS握手过程详解与优化方法/tsl-ssl.png)\n\n##### 第一步\n\nClientHello【client -> server】\n\n1. TLS版本\n2. Client随机数**Random1**\n3. session-id\n4. 加密算法套装列表\n5. 压缩算法\n6. 扩展字段，比如密码交换算法，请求主机名字等\n\n![1548387743050](/HTTPS握手过程详解与优化方法/1548387743050.png)\n\n##### 第二步\n\nServerHello【server -> client】\n\n1. TLS版本\n\n2. Server随机数**Random2**\n\n3. 确定的加密套件，压缩算法\n\n4. 扩展字段\n\n   ![1548388040046](/HTTPS握手过程详解与优化方法/1548388040046.png)\n\n\n\n##### 第三步\n\nCertificate, Server Key Exchange, Server Hello Done【server -> client】\n\n- Certificate，CA证书\n- Server Key Exchange，密钥交换算法和相关数据\n- Server Hello Done，事件消息\n\n![1548397164402](/HTTPS握手过程详解与优化方法/1548397164402.png)\n\n\n\n##### 第四步\n\nClient Key Exchange, Change Cipher Spec, **Encrypted Handshake Message**【client -> server】\n\n- Client Key Exchange，交换密钥参数\n\n  **这里客户端会再生成一个随机数Random3。然后使用服务端传来的公钥进行加密得到密文PreMaster Key。服务端收到这个值后，使用私钥进行解密，得到Random3。这样客户端和服务端就都拥有了Random1、Random2和Random3。这样两边的秘钥就协商好了。后面数据传输就可以用协商好的秘钥进行加密和解密。**\n\n- Change Cipher Spec，编码改变通知。\n\n  这一步是客户端通知服务端后面再发送的消息都会使用前面协商出来的秘钥加密了，是一条事件消息。\n\n- Encrypted Handshake Message\n\n  这一步对应的是 Client Finish 消息，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。\n\n  **会话秘钥 = DES(random1+random2+rsa(ramdom3))**\n\n![1548398905865](/HTTPS握手过程详解与优化方法/1548398905865.png)\n\n\n\n##### 第五步\n\nNew Session Ticket, Change Cipher Spec, **Encrypted Handshake Message**【server -> client】\n\n- New Session Ticket\n\n  包含了一个加密通信所需要的信息，这些数据采用一个只有服务端知道的密钥进行加密。目标是消除服务器需要维护每个客户端的会话状态缓存的要求。\n\n- Change Cipher Spec，编码改变通知\n\n- Encrypted Handshake Message\n\n  这一步对应的是Server Finish消息，服务端也会根据握手过程的消息生成摘要再用秘钥加密，这个服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一直的。\n\n![1548399295697](/HTTPS握手过程详解与优化方法/1548399295697.png)\n\n至此，双方SSL/TLS握手结束。\n\n\n\n#### HTTPS优化\n\n- HTTP协议优化\n\n  - HTTP2优势\n\n    升级HTTP2，HTTP2主要有以下特性：\n\n    1. 二进制分帧，数据使用二进制传输，相比于文本传输，更利于解析和优化。\n    2. 多路复用，同一域名下的请求，共用同一条链路进行传输，有效节省消耗。\n    3. 头部优化，将头部字段缓存为索引，客户端与服务端维护索引表，通信过程中尽可能采用索引进行通信，收到索引后查询索引表，才能解析出真正的头部信息。\n\n  - 兼容性问题\n\n    需要注意的是，HTTP2在TLS层的协议协商使用的是NPN（Next Protocol Negotation）协议或者ALPN（Application Layer Protocol Negotation）协议。ALPN和NPN的主要区别在于：谁来决定通信协议。在ALPN的描述中，是让客户端先发送一个协议优先级列表给服务器，由服务器最终选择一个合适的。而NPN则正好相反，客户端有着最终的决定权。**客户端和服务端都支持NPN或ALPN协商，是用上HTTP/2的大前提。**\n\n    OkHttp是Square公司开源的客户端网络请求库，天然支持HTTP2，但在最新版本上，已经移除了对NPN协议的支持，转而只支持ALPN协议。ALPN协议只支持Android 5.0以上，如果在5.0以下支持HTTP2，必须使用NPN。\n\n    服务器理论上可以对NPN和ALPN同时支持，但部分服务器配置可能只支持NPN，并且短时间内不会支持ALPN，所以要用上HTTP2，必须使用NPN。\n\n    也就是说，根据服务器支持情况和手机系统版本决定是否开启HTTP2/。\n\n- TLS握手优化\n\n  1. Session Resumption，会话复用\n\n     - Session Id，服务端开启\n     - Session ticket，服务端支持，客户端开启\n\n     Okhttp中的`Realconnection`已支持session ticket。\n\n     优化前\n\n     ![1548665022002](/HTTPS握手过程详解与优化方法/1548665022002.png)\n\n     优化后\n\n     ![1548665070317](/HTTPS握手过程详解与优化方法/1548665070317.png)\n\n     \n\n  2. False Start\n\n     False Start是指客户端在发送Change CipherSpec Finished 同时发送应用数据(如HTTP请求)，服务端在TLS握手完成时直接返回应用数据。这样，应用数据的发送时机上未等到握手全部完成。开启FS之后，只需要一次RTT就可以开始传输数据，目前大部分浏览器默认都会支持启用，但也有一些前提条件：\n\n     - 服务端和客户端支持NPN或者ALPN\n     - 服务器配置支持前向安全性(ForwardSecrecy)的加密算法\n\n     配置方法为服务器配置Nginx或者Apache开启。\n\n     \n\n  3. Certificate\n\n     证书实在握手期间发送的，由于TCP初始拥塞窗口的存在，如果证书太长可能会产生额外的往返开销。如果证书没包含中间证书，大部分浏览器可以正常工作，但会暂停验证并根据子证书指定的父证书URL自己获取中间证书。这个过程会产生额外的DNS解析、建立TCP连接等开销，非常影响性能。\n\n     配置证书的最佳实践：\n\n     - 证书链是只包含站点证书和中间证书，不要包含根证书，也不要漏掉中间证书。\n     - 减少证书大小，使用ECC（Elliptic Curve Cryptography，椭圆曲线密码学）证书。256位的ECC Key等同与3072位的RSA Key，在确保安全性的同事，体积大幅减少。\n\n     \n\n  4. 开启OCSP Stapling\n\n     OCSP（Online Certificate Status Protocol，在线证书状态协议）是用来检验证书合法性的在线查询服务，一般由证书所属CA提供。某些客户端会在TLS握手阶段进一步协商时，实时查询OCSP接口，并在获得结果前阻塞后续流程。OCSP查询本质是一次完整的HTTP请求-响应，这中间的DNS查询、建立TCP、服务端处理等环节都可能耗费很长时间，导致最终建立TLS连接时间变得更长。\n\n     而OCSP Stapling，是指服务端主动获取OCSP查询结果并随证书一起发送给客户单，从而让客户端跳过自己验证的过程，提高TLS握手效率。\n\n     此过程由服务器Nginx配置开启。\n\n     \n\n#### WireShark配合tcpdump抓手机包\n\n1. 下载tcpdump，adb push ~/Downloads/tcpdump  /data/local/tcpdump\n2. chmod 777 /data/local/tcpdump\n3. 进入root权限，su\n4. tcpdump -p -vv -s 0 -w /sdcard/capture.pcap\n5. adb pull /sdcard/capture.pcap ~/Downloads\n6. Wireshark打开pcap文件\n\n\n\n#### 名词解释\n\n- RTT(round-trip time)\n- 对称算法 DES AES\n- 非对称算法RSA DSA\n\n\n\n#### 参考链接\n\n- [TLS 握手优化详解](https://imququ.com/post/optimize-tls-handshake.html)\n- [HTTPS 原理以及优化实践](https://comsince.github.io/2017/06/14/http-over-ssl/)\n- [有货APP HTTPS优化探索和实践](https://mp.weixin.qq.com/s/1YRhXOs61u8_fRU1wMaFyA?utm_source=androidweekly.cn&utm_medium=website)\n\n","source":"_posts/HTTPS握手过程详解与优化方法.md","raw":"---\ntitle: HTTPS握手过程详解与优化方法\ndate: 2019-01-29 16:14:23\ntags: HTTPS 优化\n---\n\n#### HTTPS\n\nHTTPS协议可以简单的认为是HTTP+TLS/SSL。`SSL（Secure Socket Layer）是安全套接层，TLS（Transport Layer Security）是传输层安全协议`，建立在SSL3.0协议规范，是SSL3.0的后续版本。当前最新使用的是TLS1.2协议。1.3版本还在草案阶段。\n\n![image](/HTTPS握手过程详解与优化方法/1548387314931.png)\n\n\n\nHTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL，也可以使用其后继者—— `传输层安全(Transport Layer Security，TLS)`。由于 SSL 和 TLS 非常类似，所以我们不太严格地用术语 SSL 来表示 SSL 和 TLS。\n\n![image](/HTTPS握手过程详解与优化方法/930623111-59ed85819d22b_articlex.png)\n\n#### TLS握手过程\n\n在传输应用数据之前，客户端与服务端经过协商秘钥、加密算法等信息，服务端还要把自己的证书发送给客户端以表明身份，这些环节构成了TLS握手过程，如下两图所示：\n\n![img](https://upload-images.jianshu.io/upload_images/2111324-19f47f0a6829c6f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/409/format/webp)\n\n\n\n![](/HTTPS握手过程详解与优化方法/tsl-ssl.png)\n\n##### 第一步\n\nClientHello【client -> server】\n\n1. TLS版本\n2. Client随机数**Random1**\n3. session-id\n4. 加密算法套装列表\n5. 压缩算法\n6. 扩展字段，比如密码交换算法，请求主机名字等\n\n![1548387743050](/HTTPS握手过程详解与优化方法/1548387743050.png)\n\n##### 第二步\n\nServerHello【server -> client】\n\n1. TLS版本\n\n2. Server随机数**Random2**\n\n3. 确定的加密套件，压缩算法\n\n4. 扩展字段\n\n   ![1548388040046](/HTTPS握手过程详解与优化方法/1548388040046.png)\n\n\n\n##### 第三步\n\nCertificate, Server Key Exchange, Server Hello Done【server -> client】\n\n- Certificate，CA证书\n- Server Key Exchange，密钥交换算法和相关数据\n- Server Hello Done，事件消息\n\n![1548397164402](/HTTPS握手过程详解与优化方法/1548397164402.png)\n\n\n\n##### 第四步\n\nClient Key Exchange, Change Cipher Spec, **Encrypted Handshake Message**【client -> server】\n\n- Client Key Exchange，交换密钥参数\n\n  **这里客户端会再生成一个随机数Random3。然后使用服务端传来的公钥进行加密得到密文PreMaster Key。服务端收到这个值后，使用私钥进行解密，得到Random3。这样客户端和服务端就都拥有了Random1、Random2和Random3。这样两边的秘钥就协商好了。后面数据传输就可以用协商好的秘钥进行加密和解密。**\n\n- Change Cipher Spec，编码改变通知。\n\n  这一步是客户端通知服务端后面再发送的消息都会使用前面协商出来的秘钥加密了，是一条事件消息。\n\n- Encrypted Handshake Message\n\n  这一步对应的是 Client Finish 消息，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。\n\n  **会话秘钥 = DES(random1+random2+rsa(ramdom3))**\n\n![1548398905865](/HTTPS握手过程详解与优化方法/1548398905865.png)\n\n\n\n##### 第五步\n\nNew Session Ticket, Change Cipher Spec, **Encrypted Handshake Message**【server -> client】\n\n- New Session Ticket\n\n  包含了一个加密通信所需要的信息，这些数据采用一个只有服务端知道的密钥进行加密。目标是消除服务器需要维护每个客户端的会话状态缓存的要求。\n\n- Change Cipher Spec，编码改变通知\n\n- Encrypted Handshake Message\n\n  这一步对应的是Server Finish消息，服务端也会根据握手过程的消息生成摘要再用秘钥加密，这个服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一直的。\n\n![1548399295697](/HTTPS握手过程详解与优化方法/1548399295697.png)\n\n至此，双方SSL/TLS握手结束。\n\n\n\n#### HTTPS优化\n\n- HTTP协议优化\n\n  - HTTP2优势\n\n    升级HTTP2，HTTP2主要有以下特性：\n\n    1. 二进制分帧，数据使用二进制传输，相比于文本传输，更利于解析和优化。\n    2. 多路复用，同一域名下的请求，共用同一条链路进行传输，有效节省消耗。\n    3. 头部优化，将头部字段缓存为索引，客户端与服务端维护索引表，通信过程中尽可能采用索引进行通信，收到索引后查询索引表，才能解析出真正的头部信息。\n\n  - 兼容性问题\n\n    需要注意的是，HTTP2在TLS层的协议协商使用的是NPN（Next Protocol Negotation）协议或者ALPN（Application Layer Protocol Negotation）协议。ALPN和NPN的主要区别在于：谁来决定通信协议。在ALPN的描述中，是让客户端先发送一个协议优先级列表给服务器，由服务器最终选择一个合适的。而NPN则正好相反，客户端有着最终的决定权。**客户端和服务端都支持NPN或ALPN协商，是用上HTTP/2的大前提。**\n\n    OkHttp是Square公司开源的客户端网络请求库，天然支持HTTP2，但在最新版本上，已经移除了对NPN协议的支持，转而只支持ALPN协议。ALPN协议只支持Android 5.0以上，如果在5.0以下支持HTTP2，必须使用NPN。\n\n    服务器理论上可以对NPN和ALPN同时支持，但部分服务器配置可能只支持NPN，并且短时间内不会支持ALPN，所以要用上HTTP2，必须使用NPN。\n\n    也就是说，根据服务器支持情况和手机系统版本决定是否开启HTTP2/。\n\n- TLS握手优化\n\n  1. Session Resumption，会话复用\n\n     - Session Id，服务端开启\n     - Session ticket，服务端支持，客户端开启\n\n     Okhttp中的`Realconnection`已支持session ticket。\n\n     优化前\n\n     ![1548665022002](/HTTPS握手过程详解与优化方法/1548665022002.png)\n\n     优化后\n\n     ![1548665070317](/HTTPS握手过程详解与优化方法/1548665070317.png)\n\n     \n\n  2. False Start\n\n     False Start是指客户端在发送Change CipherSpec Finished 同时发送应用数据(如HTTP请求)，服务端在TLS握手完成时直接返回应用数据。这样，应用数据的发送时机上未等到握手全部完成。开启FS之后，只需要一次RTT就可以开始传输数据，目前大部分浏览器默认都会支持启用，但也有一些前提条件：\n\n     - 服务端和客户端支持NPN或者ALPN\n     - 服务器配置支持前向安全性(ForwardSecrecy)的加密算法\n\n     配置方法为服务器配置Nginx或者Apache开启。\n\n     \n\n  3. Certificate\n\n     证书实在握手期间发送的，由于TCP初始拥塞窗口的存在，如果证书太长可能会产生额外的往返开销。如果证书没包含中间证书，大部分浏览器可以正常工作，但会暂停验证并根据子证书指定的父证书URL自己获取中间证书。这个过程会产生额外的DNS解析、建立TCP连接等开销，非常影响性能。\n\n     配置证书的最佳实践：\n\n     - 证书链是只包含站点证书和中间证书，不要包含根证书，也不要漏掉中间证书。\n     - 减少证书大小，使用ECC（Elliptic Curve Cryptography，椭圆曲线密码学）证书。256位的ECC Key等同与3072位的RSA Key，在确保安全性的同事，体积大幅减少。\n\n     \n\n  4. 开启OCSP Stapling\n\n     OCSP（Online Certificate Status Protocol，在线证书状态协议）是用来检验证书合法性的在线查询服务，一般由证书所属CA提供。某些客户端会在TLS握手阶段进一步协商时，实时查询OCSP接口，并在获得结果前阻塞后续流程。OCSP查询本质是一次完整的HTTP请求-响应，这中间的DNS查询、建立TCP、服务端处理等环节都可能耗费很长时间，导致最终建立TLS连接时间变得更长。\n\n     而OCSP Stapling，是指服务端主动获取OCSP查询结果并随证书一起发送给客户单，从而让客户端跳过自己验证的过程，提高TLS握手效率。\n\n     此过程由服务器Nginx配置开启。\n\n     \n\n#### WireShark配合tcpdump抓手机包\n\n1. 下载tcpdump，adb push ~/Downloads/tcpdump  /data/local/tcpdump\n2. chmod 777 /data/local/tcpdump\n3. 进入root权限，su\n4. tcpdump -p -vv -s 0 -w /sdcard/capture.pcap\n5. adb pull /sdcard/capture.pcap ~/Downloads\n6. Wireshark打开pcap文件\n\n\n\n#### 名词解释\n\n- RTT(round-trip time)\n- 对称算法 DES AES\n- 非对称算法RSA DSA\n\n\n\n#### 参考链接\n\n- [TLS 握手优化详解](https://imququ.com/post/optimize-tls-handshake.html)\n- [HTTPS 原理以及优化实践](https://comsince.github.io/2017/06/14/http-over-ssl/)\n- [有货APP HTTPS优化探索和实践](https://mp.weixin.qq.com/s/1YRhXOs61u8_fRU1wMaFyA?utm_source=androidweekly.cn&utm_medium=website)\n\n","slug":"HTTPS握手过程详解与优化方法","published":1,"updated":"2019-01-29T09:01:43.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0pc000cnrvx05c6eikk","content":"<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h4><p>HTTPS协议可以简单的认为是HTTP+TLS/SSL。<code>SSL（Secure Socket Layer）是安全套接层，TLS（Transport Layer Security）是传输层安全协议</code>，建立在SSL3.0协议规范，是SSL3.0的后续版本。当前最新使用的是TLS1.2协议。1.3版本还在草案阶段。</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548387314931.png\" alt=\"image\"></p>\n<p>HTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL，也可以使用其后继者—— <code>传输层安全(Transport Layer Security，TLS)</code>。由于 SSL 和 TLS 非常类似，所以我们不太严格地用术语 SSL 来表示 SSL 和 TLS。</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/930623111-59ed85819d22b_articlex.png\" alt=\"image\"></p>\n<h4 id=\"TLS握手过程\"><a href=\"#TLS握手过程\" class=\"headerlink\" title=\"TLS握手过程\"></a>TLS握手过程</h4><p>在传输应用数据之前，客户端与服务端经过协商秘钥、加密算法等信息，服务端还要把自己的证书发送给客户端以表明身份，这些环节构成了TLS握手过程，如下两图所示：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2111324-19f47f0a6829c6f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/409/format/webp\" alt=\"img\"></p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/tsl-ssl.png\" alt=\"\"></p>\n<h5 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h5><p>ClientHello【client -&gt; server】</p>\n<ol>\n<li>TLS版本</li>\n<li>Client随机数<strong>Random1</strong></li>\n<li>session-id</li>\n<li>加密算法套装列表</li>\n<li>压缩算法</li>\n<li>扩展字段，比如密码交换算法，请求主机名字等</li>\n</ol>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548387743050.png\" alt=\"1548387743050\"></p>\n<h5 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h5><p>ServerHello【server -&gt; client】</p>\n<ol>\n<li><p>TLS版本</p>\n</li>\n<li><p>Server随机数<strong>Random2</strong></p>\n</li>\n<li><p>确定的加密套件，压缩算法</p>\n</li>\n<li><p>扩展字段</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548388040046.png\" alt=\"1548388040046\"></p>\n</li>\n</ol>\n<h5 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h5><p>Certificate, Server Key Exchange, Server Hello Done【server -&gt; client】</p>\n<ul>\n<li>Certificate，CA证书</li>\n<li>Server Key Exchange，密钥交换算法和相关数据</li>\n<li>Server Hello Done，事件消息</li>\n</ul>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548397164402.png\" alt=\"1548397164402\"></p>\n<h5 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h5><p>Client Key Exchange, Change Cipher Spec, <strong>Encrypted Handshake Message</strong>【client -&gt; server】</p>\n<ul>\n<li><p>Client Key Exchange，交换密钥参数</p>\n<p><strong>这里客户端会再生成一个随机数Random3。然后使用服务端传来的公钥进行加密得到密文PreMaster Key。服务端收到这个值后，使用私钥进行解密，得到Random3。这样客户端和服务端就都拥有了Random1、Random2和Random3。这样两边的秘钥就协商好了。后面数据传输就可以用协商好的秘钥进行加密和解密。</strong></p>\n</li>\n<li><p>Change Cipher Spec，编码改变通知。</p>\n<p>这一步是客户端通知服务端后面再发送的消息都会使用前面协商出来的秘钥加密了，是一条事件消息。</p>\n</li>\n<li><p>Encrypted Handshake Message</p>\n<p>这一步对应的是 Client Finish 消息，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。</p>\n<p><strong>会话秘钥 = DES(random1+random2+rsa(ramdom3))</strong></p>\n</li>\n</ul>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548398905865.png\" alt=\"1548398905865\"></p>\n<h5 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h5><p>New Session Ticket, Change Cipher Spec, <strong>Encrypted Handshake Message</strong>【server -&gt; client】</p>\n<ul>\n<li><p>New Session Ticket</p>\n<p>包含了一个加密通信所需要的信息，这些数据采用一个只有服务端知道的密钥进行加密。目标是消除服务器需要维护每个客户端的会话状态缓存的要求。</p>\n</li>\n<li><p>Change Cipher Spec，编码改变通知</p>\n</li>\n<li><p>Encrypted Handshake Message</p>\n<p>这一步对应的是Server Finish消息，服务端也会根据握手过程的消息生成摘要再用秘钥加密，这个服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一直的。</p>\n</li>\n</ul>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548399295697.png\" alt=\"1548399295697\"></p>\n<p>至此，双方SSL/TLS握手结束。</p>\n<h4 id=\"HTTPS优化\"><a href=\"#HTTPS优化\" class=\"headerlink\" title=\"HTTPS优化\"></a>HTTPS优化</h4><ul>\n<li><p>HTTP协议优化</p>\n<ul>\n<li><p>HTTP2优势</p>\n<p>升级HTTP2，HTTP2主要有以下特性：</p>\n<ol>\n<li>二进制分帧，数据使用二进制传输，相比于文本传输，更利于解析和优化。</li>\n<li>多路复用，同一域名下的请求，共用同一条链路进行传输，有效节省消耗。</li>\n<li>头部优化，将头部字段缓存为索引，客户端与服务端维护索引表，通信过程中尽可能采用索引进行通信，收到索引后查询索引表，才能解析出真正的头部信息。</li>\n</ol>\n</li>\n<li><p>兼容性问题</p>\n<p>需要注意的是，HTTP2在TLS层的协议协商使用的是NPN（Next Protocol Negotation）协议或者ALPN（Application Layer Protocol Negotation）协议。ALPN和NPN的主要区别在于：谁来决定通信协议。在ALPN的描述中，是让客户端先发送一个协议优先级列表给服务器，由服务器最终选择一个合适的。而NPN则正好相反，客户端有着最终的决定权。<strong>客户端和服务端都支持NPN或ALPN协商，是用上HTTP/2的大前提。</strong></p>\n<p>OkHttp是Square公司开源的客户端网络请求库，天然支持HTTP2，但在最新版本上，已经移除了对NPN协议的支持，转而只支持ALPN协议。ALPN协议只支持Android 5.0以上，如果在5.0以下支持HTTP2，必须使用NPN。</p>\n<p>服务器理论上可以对NPN和ALPN同时支持，但部分服务器配置可能只支持NPN，并且短时间内不会支持ALPN，所以要用上HTTP2，必须使用NPN。</p>\n<p>也就是说，根据服务器支持情况和手机系统版本决定是否开启HTTP2/。</p>\n</li>\n</ul>\n</li>\n<li><p>TLS握手优化</p>\n<ol>\n<li><p>Session Resumption，会话复用</p>\n<ul>\n<li>Session Id，服务端开启</li>\n<li>Session ticket，服务端支持，客户端开启</li>\n</ul>\n<p>Okhttp中的<code>Realconnection</code>已支持session ticket。</p>\n<p>优化前</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548665022002.png\" alt=\"1548665022002\"></p>\n<p>优化后</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548665070317.png\" alt=\"1548665070317\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>False Start</p>\n<p>False Start是指客户端在发送Change CipherSpec Finished 同时发送应用数据(如HTTP请求)，服务端在TLS握手完成时直接返回应用数据。这样，应用数据的发送时机上未等到握手全部完成。开启FS之后，只需要一次RTT就可以开始传输数据，目前大部分浏览器默认都会支持启用，但也有一些前提条件：</p>\n<ul>\n<li>服务端和客户端支持NPN或者ALPN</li>\n<li>服务器配置支持前向安全性(ForwardSecrecy)的加密算法</li>\n</ul>\n<p>配置方法为服务器配置Nginx或者Apache开启。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Certificate</p>\n<p>证书实在握手期间发送的，由于TCP初始拥塞窗口的存在，如果证书太长可能会产生额外的往返开销。如果证书没包含中间证书，大部分浏览器可以正常工作，但会暂停验证并根据子证书指定的父证书URL自己获取中间证书。这个过程会产生额外的DNS解析、建立TCP连接等开销，非常影响性能。</p>\n<p>配置证书的最佳实践：</p>\n<ul>\n<li>证书链是只包含站点证书和中间证书，不要包含根证书，也不要漏掉中间证书。</li>\n<li>减少证书大小，使用ECC（Elliptic Curve Cryptography，椭圆曲线密码学）证书。256位的ECC Key等同与3072位的RSA Key，在确保安全性的同事，体积大幅减少。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>开启OCSP Stapling</p>\n<p>OCSP（Online Certificate Status Protocol，在线证书状态协议）是用来检验证书合法性的在线查询服务，一般由证书所属CA提供。某些客户端会在TLS握手阶段进一步协商时，实时查询OCSP接口，并在获得结果前阻塞后续流程。OCSP查询本质是一次完整的HTTP请求-响应，这中间的DNS查询、建立TCP、服务端处理等环节都可能耗费很长时间，导致最终建立TLS连接时间变得更长。</p>\n<p>而OCSP Stapling，是指服务端主动获取OCSP查询结果并随证书一起发送给客户单，从而让客户端跳过自己验证的过程，提高TLS握手效率。</p>\n<p>此过程由服务器Nginx配置开启。</p>\n</li>\n</ol>\n<h4 id=\"WireShark配合tcpdump抓手机包\"><a href=\"#WireShark配合tcpdump抓手机包\" class=\"headerlink\" title=\"WireShark配合tcpdump抓手机包\"></a>WireShark配合tcpdump抓手机包</h4><ol>\n<li>下载tcpdump，adb push ~/Downloads/tcpdump  /data/local/tcpdump</li>\n<li>chmod 777 /data/local/tcpdump</li>\n<li>进入root权限，su</li>\n<li>tcpdump -p -vv -s 0 -w /sdcard/capture.pcap</li>\n<li>adb pull /sdcard/capture.pcap ~/Downloads</li>\n<li>Wireshark打开pcap文件</li>\n</ol>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><ul>\n<li>RTT(round-trip time)</li>\n<li>对称算法 DES AES</li>\n<li>非对称算法RSA DSA</li>\n</ul>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"https://imququ.com/post/optimize-tls-handshake.html\" target=\"_blank\" rel=\"noopener\">TLS 握手优化详解</a></li>\n<li><a href=\"https://comsince.github.io/2017/06/14/http-over-ssl/\" target=\"_blank\" rel=\"noopener\">HTTPS 原理以及优化实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/1YRhXOs61u8_fRU1wMaFyA?utm_source=androidweekly.cn&amp;utm_medium=website\" target=\"_blank\" rel=\"noopener\">有货APP HTTPS优化探索和实践</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h4><p>HTTPS协议可以简单的认为是HTTP+TLS/SSL。<code>SSL（Secure Socket Layer）是安全套接层，TLS（Transport Layer Security）是传输层安全协议</code>，建立在SSL3.0协议规范，是SSL3.0的后续版本。当前最新使用的是TLS1.2协议。1.3版本还在草案阶段。</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548387314931.png\" alt=\"image\"></p>\n<p>HTTPS 在 HTTP 下面提供了一个传输级的密码安全层——可以使用 SSL，也可以使用其后继者—— <code>传输层安全(Transport Layer Security，TLS)</code>。由于 SSL 和 TLS 非常类似，所以我们不太严格地用术语 SSL 来表示 SSL 和 TLS。</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/930623111-59ed85819d22b_articlex.png\" alt=\"image\"></p>\n<h4 id=\"TLS握手过程\"><a href=\"#TLS握手过程\" class=\"headerlink\" title=\"TLS握手过程\"></a>TLS握手过程</h4><p>在传输应用数据之前，客户端与服务端经过协商秘钥、加密算法等信息，服务端还要把自己的证书发送给客户端以表明身份，这些环节构成了TLS握手过程，如下两图所示：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2111324-19f47f0a6829c6f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/409/format/webp\" alt=\"img\"></p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/tsl-ssl.png\" alt=\"\"></p>\n<h5 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h5><p>ClientHello【client -&gt; server】</p>\n<ol>\n<li>TLS版本</li>\n<li>Client随机数<strong>Random1</strong></li>\n<li>session-id</li>\n<li>加密算法套装列表</li>\n<li>压缩算法</li>\n<li>扩展字段，比如密码交换算法，请求主机名字等</li>\n</ol>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548387743050.png\" alt=\"1548387743050\"></p>\n<h5 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h5><p>ServerHello【server -&gt; client】</p>\n<ol>\n<li><p>TLS版本</p>\n</li>\n<li><p>Server随机数<strong>Random2</strong></p>\n</li>\n<li><p>确定的加密套件，压缩算法</p>\n</li>\n<li><p>扩展字段</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548388040046.png\" alt=\"1548388040046\"></p>\n</li>\n</ol>\n<h5 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h5><p>Certificate, Server Key Exchange, Server Hello Done【server -&gt; client】</p>\n<ul>\n<li>Certificate，CA证书</li>\n<li>Server Key Exchange，密钥交换算法和相关数据</li>\n<li>Server Hello Done，事件消息</li>\n</ul>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548397164402.png\" alt=\"1548397164402\"></p>\n<h5 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h5><p>Client Key Exchange, Change Cipher Spec, <strong>Encrypted Handshake Message</strong>【client -&gt; server】</p>\n<ul>\n<li><p>Client Key Exchange，交换密钥参数</p>\n<p><strong>这里客户端会再生成一个随机数Random3。然后使用服务端传来的公钥进行加密得到密文PreMaster Key。服务端收到这个值后，使用私钥进行解密，得到Random3。这样客户端和服务端就都拥有了Random1、Random2和Random3。这样两边的秘钥就协商好了。后面数据传输就可以用协商好的秘钥进行加密和解密。</strong></p>\n</li>\n<li><p>Change Cipher Spec，编码改变通知。</p>\n<p>这一步是客户端通知服务端后面再发送的消息都会使用前面协商出来的秘钥加密了，是一条事件消息。</p>\n</li>\n<li><p>Encrypted Handshake Message</p>\n<p>这一步对应的是 Client Finish 消息，客户端将前面的握手消息生成摘要再用协商好的秘钥加密，这是客户端发出的第一条加密消息。服务端接收后会用秘钥解密，能解出来说明前面协商出来的秘钥是一致的。</p>\n<p><strong>会话秘钥 = DES(random1+random2+rsa(ramdom3))</strong></p>\n</li>\n</ul>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548398905865.png\" alt=\"1548398905865\"></p>\n<h5 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h5><p>New Session Ticket, Change Cipher Spec, <strong>Encrypted Handshake Message</strong>【server -&gt; client】</p>\n<ul>\n<li><p>New Session Ticket</p>\n<p>包含了一个加密通信所需要的信息，这些数据采用一个只有服务端知道的密钥进行加密。目标是消除服务器需要维护每个客户端的会话状态缓存的要求。</p>\n</li>\n<li><p>Change Cipher Spec，编码改变通知</p>\n</li>\n<li><p>Encrypted Handshake Message</p>\n<p>这一步对应的是Server Finish消息，服务端也会根据握手过程的消息生成摘要再用秘钥加密，这个服务端发出的第一条加密消息。客户端接收后会用秘钥解密，能解出来说明协商的秘钥是一直的。</p>\n</li>\n</ul>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548399295697.png\" alt=\"1548399295697\"></p>\n<p>至此，双方SSL/TLS握手结束。</p>\n<h4 id=\"HTTPS优化\"><a href=\"#HTTPS优化\" class=\"headerlink\" title=\"HTTPS优化\"></a>HTTPS优化</h4><ul>\n<li><p>HTTP协议优化</p>\n<ul>\n<li><p>HTTP2优势</p>\n<p>升级HTTP2，HTTP2主要有以下特性：</p>\n<ol>\n<li>二进制分帧，数据使用二进制传输，相比于文本传输，更利于解析和优化。</li>\n<li>多路复用，同一域名下的请求，共用同一条链路进行传输，有效节省消耗。</li>\n<li>头部优化，将头部字段缓存为索引，客户端与服务端维护索引表，通信过程中尽可能采用索引进行通信，收到索引后查询索引表，才能解析出真正的头部信息。</li>\n</ol>\n</li>\n<li><p>兼容性问题</p>\n<p>需要注意的是，HTTP2在TLS层的协议协商使用的是NPN（Next Protocol Negotation）协议或者ALPN（Application Layer Protocol Negotation）协议。ALPN和NPN的主要区别在于：谁来决定通信协议。在ALPN的描述中，是让客户端先发送一个协议优先级列表给服务器，由服务器最终选择一个合适的。而NPN则正好相反，客户端有着最终的决定权。<strong>客户端和服务端都支持NPN或ALPN协商，是用上HTTP/2的大前提。</strong></p>\n<p>OkHttp是Square公司开源的客户端网络请求库，天然支持HTTP2，但在最新版本上，已经移除了对NPN协议的支持，转而只支持ALPN协议。ALPN协议只支持Android 5.0以上，如果在5.0以下支持HTTP2，必须使用NPN。</p>\n<p>服务器理论上可以对NPN和ALPN同时支持，但部分服务器配置可能只支持NPN，并且短时间内不会支持ALPN，所以要用上HTTP2，必须使用NPN。</p>\n<p>也就是说，根据服务器支持情况和手机系统版本决定是否开启HTTP2/。</p>\n</li>\n</ul>\n</li>\n<li><p>TLS握手优化</p>\n<ol>\n<li><p>Session Resumption，会话复用</p>\n<ul>\n<li>Session Id，服务端开启</li>\n<li>Session ticket，服务端支持，客户端开启</li>\n</ul>\n<p>Okhttp中的<code>Realconnection</code>已支持session ticket。</p>\n<p>优化前</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548665022002.png\" alt=\"1548665022002\"></p>\n<p>优化后</p>\n<p><img src=\"/2019/01/29/HTTPS握手过程详解与优化方法/1548665070317.png\" alt=\"1548665070317\"></p>\n</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>False Start</p>\n<p>False Start是指客户端在发送Change CipherSpec Finished 同时发送应用数据(如HTTP请求)，服务端在TLS握手完成时直接返回应用数据。这样，应用数据的发送时机上未等到握手全部完成。开启FS之后，只需要一次RTT就可以开始传输数据，目前大部分浏览器默认都会支持启用，但也有一些前提条件：</p>\n<ul>\n<li>服务端和客户端支持NPN或者ALPN</li>\n<li>服务器配置支持前向安全性(ForwardSecrecy)的加密算法</li>\n</ul>\n<p>配置方法为服务器配置Nginx或者Apache开启。</p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>Certificate</p>\n<p>证书实在握手期间发送的，由于TCP初始拥塞窗口的存在，如果证书太长可能会产生额外的往返开销。如果证书没包含中间证书，大部分浏览器可以正常工作，但会暂停验证并根据子证书指定的父证书URL自己获取中间证书。这个过程会产生额外的DNS解析、建立TCP连接等开销，非常影响性能。</p>\n<p>配置证书的最佳实践：</p>\n<ul>\n<li>证书链是只包含站点证书和中间证书，不要包含根证书，也不要漏掉中间证书。</li>\n<li>减少证书大小，使用ECC（Elliptic Curve Cryptography，椭圆曲线密码学）证书。256位的ECC Key等同与3072位的RSA Key，在确保安全性的同事，体积大幅减少。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>开启OCSP Stapling</p>\n<p>OCSP（Online Certificate Status Protocol，在线证书状态协议）是用来检验证书合法性的在线查询服务，一般由证书所属CA提供。某些客户端会在TLS握手阶段进一步协商时，实时查询OCSP接口，并在获得结果前阻塞后续流程。OCSP查询本质是一次完整的HTTP请求-响应，这中间的DNS查询、建立TCP、服务端处理等环节都可能耗费很长时间，导致最终建立TLS连接时间变得更长。</p>\n<p>而OCSP Stapling，是指服务端主动获取OCSP查询结果并随证书一起发送给客户单，从而让客户端跳过自己验证的过程，提高TLS握手效率。</p>\n<p>此过程由服务器Nginx配置开启。</p>\n</li>\n</ol>\n<h4 id=\"WireShark配合tcpdump抓手机包\"><a href=\"#WireShark配合tcpdump抓手机包\" class=\"headerlink\" title=\"WireShark配合tcpdump抓手机包\"></a>WireShark配合tcpdump抓手机包</h4><ol>\n<li>下载tcpdump，adb push ~/Downloads/tcpdump  /data/local/tcpdump</li>\n<li>chmod 777 /data/local/tcpdump</li>\n<li>进入root权限，su</li>\n<li>tcpdump -p -vv -s 0 -w /sdcard/capture.pcap</li>\n<li>adb pull /sdcard/capture.pcap ~/Downloads</li>\n<li>Wireshark打开pcap文件</li>\n</ol>\n<h4 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h4><ul>\n<li>RTT(round-trip time)</li>\n<li>对称算法 DES AES</li>\n<li>非对称算法RSA DSA</li>\n</ul>\n<h4 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h4><ul>\n<li><a href=\"https://imququ.com/post/optimize-tls-handshake.html\" target=\"_blank\" rel=\"noopener\">TLS 握手优化详解</a></li>\n<li><a href=\"https://comsince.github.io/2017/06/14/http-over-ssl/\" target=\"_blank\" rel=\"noopener\">HTTPS 原理以及优化实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/1YRhXOs61u8_fRU1wMaFyA?utm_source=androidweekly.cn&amp;utm_medium=website\" target=\"_blank\" rel=\"noopener\">有货APP HTTPS优化探索和实践</a></li>\n</ul>\n"},{"title":"Android架构组件-LiveData使用与源码分析","date":"2018-12-18T07:39:37.000Z","_content":"\n## 前言\n`LiveData`是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循`Activity`,`Fragment`或者`Service`等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。\n\n只有当 Observer 的 Lifecycle 对象处于 `STARTED` 或者 `RESUMED` 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于`DESTROYED`状态的时候，Observer会被相应的移除。\n\n###  LiveData的优点\n使用LiveData具有以下的有点：\n- **UI和实时数据保持一致** 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。\n**避免内存泄漏**-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。\n**不会再产生由于Activity处于stop状态而引起的崩溃**- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。\n**不需要再解决生命周期带来的问题**-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。\n**实时数据刷新**-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。\n**解决Configuration Change问题**-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。\n**资源共享**- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。\n\n\n## 添加LiveData\n\n### 添加google maven仓库\n在项目`build.gradle`中添加：\n```\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n```\n**AndroidX**\n```\ndependencies {\n    def lifecycle_version = \"2.0.0\"\n\n    // ViewModel and LiveData\n    implementation \"androidx.lifecycle:lifecycle-extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"androidx.lifecycle:lifecycle-livedata:$lifecycle_version\"\n\t\n    // optional - ReactiveStreams support for LiveData\n    implementation \"androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version\" // use -ktx for Kotlin\n\n    // optional - Test helpers for LiveData\n    testImplementation \"androidx.arch.core:core-testing:$lifecycle_version\"\n}\n```\n\n**AndroidX之前**\n```\ndependencies {\n    def lifecycle_version = \"1.1.1\"\n\n    // ViewModel and LiveData\n    implementation \"android.arch.lifecycle:extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"android.arch.lifecycle:livedata:$lifecycle_version\"\n    // optional - ReactiveStreams support for LiveData\n    implementation \"android.arch.lifecycle:reactivestreams:$lifecycle_version\"\n\n    // optional - Test helpers for LiveData\n    testImplementation \"android.arch.core:core-testing:$lifecycle_version\"\n}\n```\n### 创建LiveData对象\n\n**MutableLiveData**\n```\npublic class NameViewModel extends ViewModel {\n\n// Create a LiveData with a String\nprivate MutableLiveData<String> mCurrentName;\n\n    public MutableLiveData<String> getCurrentName() {\n        if (mCurrentName == null) {\n            mCurrentName = new MutableLiveData<String>();\n        }\n        return mCurrentName;\n    }\n\n// Rest of the ViewModel...\n}\n```\n```\npublic class NameActivity extends AppCompatActivity {\n\n    private NameViewModel mModel;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Other code to setup the activity...\n\n        // Get the ViewModel.\n        mModel = ViewModelProviders.of(this).get(NameViewModel.class);\n\n\n        // Create the observer which updates the UI.\n        final Observer<String> nameObserver = new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable final String newName) {\n                // Update the UI, in this case, a TextView.\n                mNameTextView.setText(newName);\n            }\n        };\n\n        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.\n        mModel.getCurrentName().observe(this, nameObserver);\n    }\n}\n```\n**MediatorLiveData**\n```\n LiveData liveData1 = ...;\n LiveData liveData2 = ...;\n\n MediatorLiveData liveDataMerger = new MediatorLiveData<>();\n liveDataMerger.addSource(liveData1, value -> liveDataMerger.setValue(value));\n liveDataMerger.addSource(liveData2, value -> liveDataMerger.setValue(value));\n```\n\n**使用单例模式**\n\n```\npublic class SingletonLiveData extends MutableLiveData<String> {\n\n    private static volatile SingletonLiveData instance;\n\n    public SingletonLiveData() {\n    }\n\n    public static SingletonLiveData getInstance() {\n        if (instance != null) {\n            return instance;\n        }\n        synchronized (SingletonLiveData.class) {\n            if (instance == null) {\n                instance = new SingletonLiveData();\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    protected void onActive() {\n        super.onActive();\n    }\n\n    @Override\n    protected void onInactive() {\n        super.onInactive();\n    }\n}\n```\n```java\nSingletonLiveData.getInstance().observe(this, new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable String s) {\n\n            }\n        });\n```\n```\nSingletonLiveData.getInstance().setValue(\"single\");\n```\n简单说明LiveData中的几个重要方法：\n**onActive() **- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。\n**onInactive()**- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。\n**setValue()**- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。\n**postValue()**- :当需要在非UI线程更新数据时调用此函数。\n\n需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。\n\n**数据转换**\nLiveData 还支持简单的数据变换。目前在 `Transformations` 类中有 map 和 switchMap 两个变换函数。\n\n- map 是把一个数据类型变换为另外一个数据类型。\n- switchMap 是把一个数据变化为另外一个 LiveData\n\n```java\nLiveData<User> userLiveData = ...;\nLiveData<String> userName = Transformations.map(userLiveData, user -> {\n    user.name + \" \" + user.lastName\n});\n```\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    private final MutableLiveData<String> addressInput = new MutableLiveData();\n    public final LiveData<String> postalCode =\n            Transformations.switchMap(addressInput, (address) -> {\n                return repository.getPostCode(address);\n             });\n\n  public MyViewModel(PostalCodeRepository repository) {\n      this.repository = repository\n  }\n\n  private void setInput(String address) {\n      addressInput.setValue(address);\n  }\n}\n```\n\n##  原理分析\n\n下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下\n```java\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && existing.owner != wrapper.owner) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n```\n从这段代码看出，当观察者所在的`LifecycleOwner`状态处于DESTROYED时，注册失败。当重复注册观察者时，`会抛出IllegalArgumentException`异常。通过这些验证后，向`Lifecycle`注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。`LifecycleOwner`是一个接口，只有一个方法getLifecycle()，`在Fragment`、`FragmentActivity`、`SupportActivity`、`LifecycleService`中均实现了这个方法。\n\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n```java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n\n```\n```java\npublic class Fragment implements ComponentCallbacks, OnCreateContextMenuListener, LifecycleOwner {\n\n    LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    @Override\n    public Lifecycle getLifecycle() {\n        return mLifecycleRegistry;\n    }\n\t\n\tvoid performStart() {\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.noteStateNotSaved();\n            mChildFragmentManager.execPendingActions();\n        }\n        mState = STARTED;\n        mCalled = false;\n        onStart();\n        if (!mCalled) {\n            throw new SuperNotCalledException(\"Fragment \" + this\n                    + \" did not call through to super.onStart()\");\n        }\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.dispatchStart();\n        }\n        if (mLoaderManager != null) {\n            mLoaderManager.doReportStart();\n        }\n        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n    }\n}\n```\n**LiveData中内部类LifecycleBoundObserver**\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n**LifecycleRegistry.java**\n```java\npublic class LifecycleRegistry extends Lifecycle {\n\n    private static final String LOG_TAG = \"LifecycleRegistry\";\n\n    /**\n     * Custom list that keeps observers and can handle removals / additions during traversal.\n     *\n     * Invariant: at any moment of time for observer1 & observer2:\n     * if addition_order(observer1) < addition_order(observer2), then\n     * state(observer1) >= state(observer2),\n     */\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n    /**\n     * Current state\n     */\n    private State mState;\n    /**\n     * The provider that owns this Lifecycle.\n     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak\n     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,\n     * because it keeps strong references on all other listeners, so you'll leak all of them as\n     * well.\n     */\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    private int mAddingObserverCounter = 0;\n\n    private boolean mHandlingEvent = false;\n    private boolean mNewEventOccurred = false;\n\n    // we have to keep it for cases:\n    // void onStart() {\n    //     mRegistry.removeObserver(this);\n    //     mRegistry.add(newObserver);\n    // }\n    // newObserver should be brought only to CREATED state during the execution of\n    // this onStart method. our invariant with mObserverMap doesn't help, because parent observer\n    // is no longer in the map.\n    private ArrayList<State> mParentStates = new ArrayList<>();\n\n    /**\n     * Creates a new LifecycleRegistry for the given provider.\n     * <p>\n     * You should usually create this inside your LifecycleOwner class's constructor and hold\n     * onto the same instance.\n     *\n     * @param provider The owner LifecycleOwner\n     */\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n    /**\n     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.\n     *\n     * @param state new state\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void markState(@NonNull State state) {\n        moveToState(state);\n    }\n\n    /**\n     * Sets the current state and notifies the observers.\n     * <p>\n     * Note that if the {@code currentState} is the same state as the last call to this method,\n     * calling this method has no effect.\n     *\n     * @param event The event that was received\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        if (mHandlingEvent || mAddingObserverCounter != 0) {\n            mNewEventOccurred = true;\n            // we will figure out what to do on upper level.\n            return;\n        }\n        mHandlingEvent = true;\n        sync();\n        mHandlingEvent = false;\n    }\n\n    private boolean isSynced() {\n        if (mObserverMap.size() == 0) {\n            return true;\n        }\n        State eldestObserverState = mObserverMap.eldest().getValue().mState;\n        State newestObserverState = mObserverMap.newest().getValue().mState;\n        return eldestObserverState == newestObserverState && mState == newestObserverState;\n    }\n\n    private State calculateTargetState(LifecycleObserver observer) {\n        Entry<LifecycleObserver, ObserverWithState> previous = mObserverMap.ceil(observer);\n\n        State siblingState = previous != null ? previous.getValue().mState : null;\n        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - 1)\n                : null;\n        return min(min(mState, siblingState), parentState);\n    }\n\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n\n        if (previous != null) {\n            return;\n        }\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            // it is null we should be destroyed. Fallback quickly\n            return;\n        }\n\n        boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n        State targetState = calculateTargetState(observer);\n        mAddingObserverCounter++;\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n\n        if (!isReentrance) {\n            // we do sync only on the top level.\n            sync();\n        }\n        mAddingObserverCounter--;\n    }\n\n    private void popParentState() {\n        mParentStates.remove(mParentStates.size() - 1);\n    }\n\n    private void pushParentState(State state) {\n        mParentStates.add(state);\n    }\n\n    @Override\n    public void removeObserver(@NonNull LifecycleObserver observer) {\n        // we consciously decided not to send destruction events here in opposition to addObserver.\n        // Our reasons for that:\n        // 1. These events haven't yet happened at all. In contrast to events in addObservers, that\n        // actually occurred but earlier.\n        // 2. There are cases when removeObserver happens as a consequence of some kind of fatal\n        // event. If removeObserver method sends destruction events, then a clean up routine becomes\n        // more cumbersome. More specific example of that is: your LifecycleObserver listens for\n        // a web connection, in the usual routine in OnStop method you report to a server that a\n        // session has just ended and you close the connection. Now let's assume now that you\n        // lost an internet and as a result you removed this observer. If you get destruction\n        // events in removeObserver, you should have a special case in your onStop method that\n        // checks if your web connection died and you shouldn't try to report anything to a server.\n        mObserverMap.remove(observer);\n    }\n\n    /**\n     * The number of observers.\n     *\n     * @return The number of observers.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public int getObserverCount() {\n        return mObserverMap.size();\n    }\n\n    @Override\n    public State getCurrentState() {\n        return mState;\n    }\n\n    static State getStateAfter(Event event) {\n        switch (event) {\n            case ON_CREATE:\n            case ON_STOP:\n                return CREATED;\n            case ON_START:\n            case ON_PAUSE:\n                return STARTED;\n            case ON_RESUME:\n                return RESUMED;\n            case ON_DESTROY:\n                return DESTROYED;\n            case ON_ANY:\n                break;\n        }\n        throw new IllegalArgumentException(\"Unexpected event value \" + event);\n    }\n\n    private static Event downEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n                throw new IllegalArgumentException();\n            case CREATED:\n                return ON_DESTROY;\n            case STARTED:\n                return ON_STOP;\n            case RESUMED:\n                return ON_PAUSE;\n            case DESTROYED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private static Event upEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n            case DESTROYED:\n                return ON_CREATE;\n            case CREATED:\n                return ON_START;\n            case STARTED:\n                return ON_RESUME;\n            case RESUMED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n\n    // happens only on the top of stack (never in reentrance),\n    // so it doesn't have to take in account parents\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // no need to check eldest for nullability, because isSynced does it for us.\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    static State min(@NonNull State state1, @Nullable State state2) {\n        return state2 != null && state2.compareTo(state1) < 0 ? state2 : state1;\n    }\n\n    static class ObserverWithState {\n        State mState;\n        GenericLifecycleObserver mLifecycleObserver;\n\n        ObserverWithState(LifecycleObserver observer, State initialState) {\n            mLifecycleObserver = Lifecycling.getCallback(observer);\n            mState = initialState;\n        }\n\n        void dispatchEvent(LifecycleOwner owner, Event event) {\n            State newState = getStateAfter(event);\n            mState = min(mState, newState);\n            mLifecycleObserver.onStateChanged(owner, event);\n            mState = newState;\n        }\n    }\n}\n```\n取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()->sync()->forwardPass()->内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。\n\n到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。\n\n\n```java\nprotected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\nprotected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            //noinspection unchecked\n            setValue((T) newValue);\n        }\n    };\n```\n```java\nprivate void dispatchingValue(@Nullable LifecycleBoundObserver initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<T>, LifecycleBoundObserver>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n\nprivate void considerNotify(LifecycleBoundObserver observer) {\n        if (!observer.active) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!isActiveState(observer.owner.getLifecycle().getCurrentState())) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.lastVersion >= mVersion) {\n            return;\n        }\n        observer.lastVersion = mVersion;\n        //noinspection unchecked\n        observer.observer.onChanged((T) mData);\n    }\n```\n在`LiveData`中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。\n这里有个逻辑需要注意，在这篇[文章](https://tech.meituan.com/Android_LiveDataBus.html \"文章\")中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。\n在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。\n\n## 总结\n上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。","source":"_posts/Android架构组件-LiveData使用与源码分析.md","raw":"---\ntitle: Android架构组件-LiveData使用与源码分析\ndate: 2018-12-18 15:39:37\ntags:\n---\n\n## 前言\n`LiveData`是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循`Activity`,`Fragment`或者`Service`等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。\n\n只有当 Observer 的 Lifecycle 对象处于 `STARTED` 或者 `RESUMED` 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于`DESTROYED`状态的时候，Observer会被相应的移除。\n\n###  LiveData的优点\n使用LiveData具有以下的有点：\n- **UI和实时数据保持一致** 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。\n**避免内存泄漏**-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。\n**不会再产生由于Activity处于stop状态而引起的崩溃**- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。\n**不需要再解决生命周期带来的问题**-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。\n**实时数据刷新**-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。\n**解决Configuration Change问题**-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。\n**资源共享**- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。\n\n\n## 添加LiveData\n\n### 添加google maven仓库\n在项目`build.gradle`中添加：\n```\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n```\n**AndroidX**\n```\ndependencies {\n    def lifecycle_version = \"2.0.0\"\n\n    // ViewModel and LiveData\n    implementation \"androidx.lifecycle:lifecycle-extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"androidx.lifecycle:lifecycle-livedata:$lifecycle_version\"\n\t\n    // optional - ReactiveStreams support for LiveData\n    implementation \"androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version\" // use -ktx for Kotlin\n\n    // optional - Test helpers for LiveData\n    testImplementation \"androidx.arch.core:core-testing:$lifecycle_version\"\n}\n```\n\n**AndroidX之前**\n```\ndependencies {\n    def lifecycle_version = \"1.1.1\"\n\n    // ViewModel and LiveData\n    implementation \"android.arch.lifecycle:extensions:$lifecycle_version\"\n    // alternatively - just LiveData\n    implementation \"android.arch.lifecycle:livedata:$lifecycle_version\"\n    // optional - ReactiveStreams support for LiveData\n    implementation \"android.arch.lifecycle:reactivestreams:$lifecycle_version\"\n\n    // optional - Test helpers for LiveData\n    testImplementation \"android.arch.core:core-testing:$lifecycle_version\"\n}\n```\n### 创建LiveData对象\n\n**MutableLiveData**\n```\npublic class NameViewModel extends ViewModel {\n\n// Create a LiveData with a String\nprivate MutableLiveData<String> mCurrentName;\n\n    public MutableLiveData<String> getCurrentName() {\n        if (mCurrentName == null) {\n            mCurrentName = new MutableLiveData<String>();\n        }\n        return mCurrentName;\n    }\n\n// Rest of the ViewModel...\n}\n```\n```\npublic class NameActivity extends AppCompatActivity {\n\n    private NameViewModel mModel;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Other code to setup the activity...\n\n        // Get the ViewModel.\n        mModel = ViewModelProviders.of(this).get(NameViewModel.class);\n\n\n        // Create the observer which updates the UI.\n        final Observer<String> nameObserver = new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable final String newName) {\n                // Update the UI, in this case, a TextView.\n                mNameTextView.setText(newName);\n            }\n        };\n\n        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.\n        mModel.getCurrentName().observe(this, nameObserver);\n    }\n}\n```\n**MediatorLiveData**\n```\n LiveData liveData1 = ...;\n LiveData liveData2 = ...;\n\n MediatorLiveData liveDataMerger = new MediatorLiveData<>();\n liveDataMerger.addSource(liveData1, value -> liveDataMerger.setValue(value));\n liveDataMerger.addSource(liveData2, value -> liveDataMerger.setValue(value));\n```\n\n**使用单例模式**\n\n```\npublic class SingletonLiveData extends MutableLiveData<String> {\n\n    private static volatile SingletonLiveData instance;\n\n    public SingletonLiveData() {\n    }\n\n    public static SingletonLiveData getInstance() {\n        if (instance != null) {\n            return instance;\n        }\n        synchronized (SingletonLiveData.class) {\n            if (instance == null) {\n                instance = new SingletonLiveData();\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    protected void onActive() {\n        super.onActive();\n    }\n\n    @Override\n    protected void onInactive() {\n        super.onInactive();\n    }\n}\n```\n```java\nSingletonLiveData.getInstance().observe(this, new Observer<String>() {\n            @Override\n            public void onChanged(@Nullable String s) {\n\n            }\n        });\n```\n```\nSingletonLiveData.getInstance().setValue(\"single\");\n```\n简单说明LiveData中的几个重要方法：\n**onActive() **- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。\n**onInactive()**- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。\n**setValue()**- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。\n**postValue()**- :当需要在非UI线程更新数据时调用此函数。\n\n需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。\n\n**数据转换**\nLiveData 还支持简单的数据变换。目前在 `Transformations` 类中有 map 和 switchMap 两个变换函数。\n\n- map 是把一个数据类型变换为另外一个数据类型。\n- switchMap 是把一个数据变化为另外一个 LiveData\n\n```java\nLiveData<User> userLiveData = ...;\nLiveData<String> userName = Transformations.map(userLiveData, user -> {\n    user.name + \" \" + user.lastName\n});\n```\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    private final MutableLiveData<String> addressInput = new MutableLiveData();\n    public final LiveData<String> postalCode =\n            Transformations.switchMap(addressInput, (address) -> {\n                return repository.getPostCode(address);\n             });\n\n  public MyViewModel(PostalCodeRepository repository) {\n      this.repository = repository\n  }\n\n  private void setInput(String address) {\n      addressInput.setValue(address);\n  }\n}\n```\n\n##  原理分析\n\n下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下\n```java\n    @MainThread\n    public void observe(@NonNull LifecycleOwner owner, @NonNull Observer<T> observer) {\n        if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n            // ignore\n            return;\n        }\n        LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);\n        LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);\n        if (existing != null && existing.owner != wrapper.owner) {\n            throw new IllegalArgumentException(\"Cannot add the same observer\"\n                    + \" with different lifecycles\");\n        }\n        if (existing != null) {\n            return;\n        }\n        owner.getLifecycle().addObserver(wrapper);\n    }\n```\n从这段代码看出，当观察者所在的`LifecycleOwner`状态处于DESTROYED时，注册失败。当重复注册观察者时，`会抛出IllegalArgumentException`异常。通过这些验证后，向`Lifecycle`注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。`LifecycleOwner`是一个接口，只有一个方法getLifecycle()，`在Fragment`、`FragmentActivity`、`SupportActivity`、`LifecycleService`中均实现了这个方法。\n\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n```java\npublic interface LifecycleOwner {\n    /**\n     * Returns the Lifecycle of the provider.\n     *\n     * @return The lifecycle of the provider.\n     */\n    @NonNull\n    Lifecycle getLifecycle();\n}\n\n```\n```java\npublic class Fragment implements ComponentCallbacks, OnCreateContextMenuListener, LifecycleOwner {\n\n    LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\n    @Override\n    public Lifecycle getLifecycle() {\n        return mLifecycleRegistry;\n    }\n\t\n\tvoid performStart() {\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.noteStateNotSaved();\n            mChildFragmentManager.execPendingActions();\n        }\n        mState = STARTED;\n        mCalled = false;\n        onStart();\n        if (!mCalled) {\n            throw new SuperNotCalledException(\"Fragment \" + this\n                    + \" did not call through to super.onStart()\");\n        }\n        if (mChildFragmentManager != null) {\n            mChildFragmentManager.dispatchStart();\n        }\n        if (mLoaderManager != null) {\n            mLoaderManager.doReportStart();\n        }\n        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n    }\n}\n```\n**LiveData中内部类LifecycleBoundObserver**\n```java\nclass LifecycleBoundObserver implements GenericLifecycleObserver {\n        public final LifecycleOwner owner;\n        public final Observer<T> observer;\n        public boolean active;\n        public int lastVersion = START_VERSION;\n\n        LifecycleBoundObserver(LifecycleOwner owner, Observer<T> observer) {\n            this.owner = owner;\n            this.observer = observer;\n        }\n\n        @Override\n        public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) {\n            if (owner.getLifecycle().getCurrentState() == DESTROYED) {\n                removeObserver(observer);\n                return;\n            }\n            // immediately set active state, so we'd never dispatch anything to inactive\n            // owner\n            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));\n        }\n\n        void activeStateChanged(boolean newActive) {\n            if (newActive == active) {\n                return;\n            }\n            active = newActive;\n            boolean wasInactive = LiveData.this.mActiveCount == 0;\n            LiveData.this.mActiveCount += active ? 1 : -1;\n            if (wasInactive && active) {\n                onActive();\n            }\n            if (LiveData.this.mActiveCount == 0 && !active) {\n                onInactive();\n            }\n            if (active) {\n                dispatchingValue(this);\n            }\n        }\n    }\n```\n**LifecycleRegistry.java**\n```java\npublic class LifecycleRegistry extends Lifecycle {\n\n    private static final String LOG_TAG = \"LifecycleRegistry\";\n\n    /**\n     * Custom list that keeps observers and can handle removals / additions during traversal.\n     *\n     * Invariant: at any moment of time for observer1 & observer2:\n     * if addition_order(observer1) < addition_order(observer2), then\n     * state(observer1) >= state(observer2),\n     */\n    private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n    /**\n     * Current state\n     */\n    private State mState;\n    /**\n     * The provider that owns this Lifecycle.\n     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak\n     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,\n     * because it keeps strong references on all other listeners, so you'll leak all of them as\n     * well.\n     */\n    private final WeakReference<LifecycleOwner> mLifecycleOwner;\n\n    private int mAddingObserverCounter = 0;\n\n    private boolean mHandlingEvent = false;\n    private boolean mNewEventOccurred = false;\n\n    // we have to keep it for cases:\n    // void onStart() {\n    //     mRegistry.removeObserver(this);\n    //     mRegistry.add(newObserver);\n    // }\n    // newObserver should be brought only to CREATED state during the execution of\n    // this onStart method. our invariant with mObserverMap doesn't help, because parent observer\n    // is no longer in the map.\n    private ArrayList<State> mParentStates = new ArrayList<>();\n\n    /**\n     * Creates a new LifecycleRegistry for the given provider.\n     * <p>\n     * You should usually create this inside your LifecycleOwner class's constructor and hold\n     * onto the same instance.\n     *\n     * @param provider The owner LifecycleOwner\n     */\n    public LifecycleRegistry(@NonNull LifecycleOwner provider) {\n        mLifecycleOwner = new WeakReference<>(provider);\n        mState = INITIALIZED;\n    }\n\n    /**\n     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.\n     *\n     * @param state new state\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    @MainThread\n    public void markState(@NonNull State state) {\n        moveToState(state);\n    }\n\n    /**\n     * Sets the current state and notifies the observers.\n     * <p>\n     * Note that if the {@code currentState} is the same state as the last call to this method,\n     * calling this method has no effect.\n     *\n     * @param event The event that was received\n     */\n    public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n        State next = getStateAfter(event);\n        moveToState(next);\n    }\n\n    private void moveToState(State next) {\n        if (mState == next) {\n            return;\n        }\n        mState = next;\n        if (mHandlingEvent || mAddingObserverCounter != 0) {\n            mNewEventOccurred = true;\n            // we will figure out what to do on upper level.\n            return;\n        }\n        mHandlingEvent = true;\n        sync();\n        mHandlingEvent = false;\n    }\n\n    private boolean isSynced() {\n        if (mObserverMap.size() == 0) {\n            return true;\n        }\n        State eldestObserverState = mObserverMap.eldest().getValue().mState;\n        State newestObserverState = mObserverMap.newest().getValue().mState;\n        return eldestObserverState == newestObserverState && mState == newestObserverState;\n    }\n\n    private State calculateTargetState(LifecycleObserver observer) {\n        Entry<LifecycleObserver, ObserverWithState> previous = mObserverMap.ceil(observer);\n\n        State siblingState = previous != null ? previous.getValue().mState : null;\n        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - 1)\n                : null;\n        return min(min(mState, siblingState), parentState);\n    }\n\n    @Override\n    public void addObserver(@NonNull LifecycleObserver observer) {\n        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n\n        if (previous != null) {\n            return;\n        }\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            // it is null we should be destroyed. Fallback quickly\n            return;\n        }\n\n        boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n        State targetState = calculateTargetState(observer);\n        mAddingObserverCounter++;\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n\n        if (!isReentrance) {\n            // we do sync only on the top level.\n            sync();\n        }\n        mAddingObserverCounter--;\n    }\n\n    private void popParentState() {\n        mParentStates.remove(mParentStates.size() - 1);\n    }\n\n    private void pushParentState(State state) {\n        mParentStates.add(state);\n    }\n\n    @Override\n    public void removeObserver(@NonNull LifecycleObserver observer) {\n        // we consciously decided not to send destruction events here in opposition to addObserver.\n        // Our reasons for that:\n        // 1. These events haven't yet happened at all. In contrast to events in addObservers, that\n        // actually occurred but earlier.\n        // 2. There are cases when removeObserver happens as a consequence of some kind of fatal\n        // event. If removeObserver method sends destruction events, then a clean up routine becomes\n        // more cumbersome. More specific example of that is: your LifecycleObserver listens for\n        // a web connection, in the usual routine in OnStop method you report to a server that a\n        // session has just ended and you close the connection. Now let's assume now that you\n        // lost an internet and as a result you removed this observer. If you get destruction\n        // events in removeObserver, you should have a special case in your onStop method that\n        // checks if your web connection died and you shouldn't try to report anything to a server.\n        mObserverMap.remove(observer);\n    }\n\n    /**\n     * The number of observers.\n     *\n     * @return The number of observers.\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public int getObserverCount() {\n        return mObserverMap.size();\n    }\n\n    @Override\n    public State getCurrentState() {\n        return mState;\n    }\n\n    static State getStateAfter(Event event) {\n        switch (event) {\n            case ON_CREATE:\n            case ON_STOP:\n                return CREATED;\n            case ON_START:\n            case ON_PAUSE:\n                return STARTED;\n            case ON_RESUME:\n                return RESUMED;\n            case ON_DESTROY:\n                return DESTROYED;\n            case ON_ANY:\n                break;\n        }\n        throw new IllegalArgumentException(\"Unexpected event value \" + event);\n    }\n\n    private static Event downEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n                throw new IllegalArgumentException();\n            case CREATED:\n                return ON_DESTROY;\n            case STARTED:\n                return ON_STOP;\n            case RESUMED:\n                return ON_PAUSE;\n            case DESTROYED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private static Event upEvent(State state) {\n        switch (state) {\n            case INITIALIZED:\n            case DESTROYED:\n                return ON_CREATE;\n            case CREATED:\n                return ON_START;\n            case STARTED:\n                return ON_RESUME;\n            case RESUMED:\n                throw new IllegalArgumentException();\n        }\n        throw new IllegalArgumentException(\"Unexpected state value \" + state);\n    }\n\n    private void forwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n                mObserverMap.iteratorWithAdditions();\n        while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                pushParentState(observer.mState);\n                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));\n                popParentState();\n            }\n        }\n    }\n\n    private void backwardPass(LifecycleOwner lifecycleOwner) {\n        Iterator<Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n                mObserverMap.descendingIterator();\n        while (descendingIterator.hasNext() && !mNewEventOccurred) {\n            Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n            ObserverWithState observer = entry.getValue();\n            while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                    && mObserverMap.contains(entry.getKey()))) {\n                Event event = downEvent(observer.mState);\n                pushParentState(getStateAfter(event));\n                observer.dispatchEvent(lifecycleOwner, event);\n                popParentState();\n            }\n        }\n    }\n\n    // happens only on the top of stack (never in reentrance),\n    // so it doesn't have to take in account parents\n    private void sync() {\n        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n        if (lifecycleOwner == null) {\n            Log.w(LOG_TAG, \"LifecycleOwner is garbage collected, you shouldn't try dispatch \"\n                    + \"new events from it.\");\n            return;\n        }\n        while (!isSynced()) {\n            mNewEventOccurred = false;\n            // no need to check eldest for nullability, because isSynced does it for us.\n            if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n                backwardPass(lifecycleOwner);\n            }\n            Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n            if (!mNewEventOccurred && newest != null\n                    && mState.compareTo(newest.getValue().mState) > 0) {\n                forwardPass(lifecycleOwner);\n            }\n        }\n        mNewEventOccurred = false;\n    }\n\n    static State min(@NonNull State state1, @Nullable State state2) {\n        return state2 != null && state2.compareTo(state1) < 0 ? state2 : state1;\n    }\n\n    static class ObserverWithState {\n        State mState;\n        GenericLifecycleObserver mLifecycleObserver;\n\n        ObserverWithState(LifecycleObserver observer, State initialState) {\n            mLifecycleObserver = Lifecycling.getCallback(observer);\n            mState = initialState;\n        }\n\n        void dispatchEvent(LifecycleOwner owner, Event event) {\n            State newState = getStateAfter(event);\n            mState = min(mState, newState);\n            mLifecycleObserver.onStateChanged(owner, event);\n            mState = newState;\n        }\n    }\n}\n```\n取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()->sync()->forwardPass()->内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。\n\n到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。\n\n\n```java\nprotected void setValue(T value) {\n        assertMainThread(\"setValue\");\n        mVersion++;\n        mData = value;\n        dispatchingValue(null);\n    }\n\nprotected void postValue(T value) {\n        boolean postTask;\n        synchronized (mDataLock) {\n            postTask = mPendingData == NOT_SET;\n            mPendingData = value;\n        }\n        if (!postTask) {\n            return;\n        }\n        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);\n    }\n\n\nprivate final Runnable mPostValueRunnable = new Runnable() {\n        @Override\n        public void run() {\n            Object newValue;\n            synchronized (mDataLock) {\n                newValue = mPendingData;\n                mPendingData = NOT_SET;\n            }\n            //noinspection unchecked\n            setValue((T) newValue);\n        }\n    };\n```\n```java\nprivate void dispatchingValue(@Nullable LifecycleBoundObserver initiator) {\n        if (mDispatchingValue) {\n            mDispatchInvalidated = true;\n            return;\n        }\n        mDispatchingValue = true;\n        do {\n            mDispatchInvalidated = false;\n            if (initiator != null) {\n                considerNotify(initiator);\n                initiator = null;\n            } else {\n                for (Iterator<Map.Entry<Observer<T>, LifecycleBoundObserver>> iterator =\n                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) {\n                    considerNotify(iterator.next().getValue());\n                    if (mDispatchInvalidated) {\n                        break;\n                    }\n                }\n            }\n        } while (mDispatchInvalidated);\n        mDispatchingValue = false;\n    }\n\n\nprivate void considerNotify(LifecycleBoundObserver observer) {\n        if (!observer.active) {\n            return;\n        }\n        // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.\n        //\n        // we still first check observer.active to keep it as the entrance for events. So even if\n        // the observer moved to an active state, if we've not received that event, we better not\n        // notify for a more predictable notification order.\n        if (!isActiveState(observer.owner.getLifecycle().getCurrentState())) {\n            observer.activeStateChanged(false);\n            return;\n        }\n        if (observer.lastVersion >= mVersion) {\n            return;\n        }\n        observer.lastVersion = mVersion;\n        //noinspection unchecked\n        observer.observer.onChanged((T) mData);\n    }\n```\n在`LiveData`中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。\n这里有个逻辑需要注意，在这篇[文章](https://tech.meituan.com/Android_LiveDataBus.html \"文章\")中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。\n在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。\n\n## 总结\n上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。","slug":"Android架构组件-LiveData使用与源码分析","published":1,"updated":"2018-12-18T13:10:04.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrizz0pr000hnrvx14utoo4o","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>LiveData</code>是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循<code>Activity</code>,<code>Fragment</code>或者<code>Service</code>等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。</p>\n<p>只有当 Observer 的 Lifecycle 对象处于 <code>STARTED</code> 或者 <code>RESUMED</code> 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于<code>DESTROYED</code>状态的时候，Observer会被相应的移除。</p>\n<h3 id=\"LiveData的优点\"><a href=\"#LiveData的优点\" class=\"headerlink\" title=\"LiveData的优点\"></a>LiveData的优点</h3><p>使用LiveData具有以下的有点：</p>\n<ul>\n<li><strong>UI和实时数据保持一致</strong> 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。<br><strong>避免内存泄漏</strong>-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。<br><strong>不会再产生由于Activity处于stop状态而引起的崩溃</strong>- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。<br><strong>不需要再解决生命周期带来的问题</strong>-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。<br><strong>实时数据刷新</strong>-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。<br><strong>解决Configuration Change问题</strong>-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。<br><strong>资源共享</strong>- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。</li>\n</ul>\n<h2 id=\"添加LiveData\"><a href=\"#添加LiveData\" class=\"headerlink\" title=\"添加LiveData\"></a>添加LiveData</h2><h3 id=\"添加google-maven仓库\"><a href=\"#添加google-maven仓库\" class=\"headerlink\" title=\"添加google maven仓库\"></a>添加google maven仓库</h3><p>在项目<code>build.gradle</code>中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;2.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-livedata:$lifecycle_version&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version&quot; // use -ktx for Kotlin</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;androidx.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX之前</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;1.1.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:livedata:$lifecycle_version&quot;</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:reactivestreams:$lifecycle_version&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;android.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建LiveData对象\"><a href=\"#创建LiveData对象\" class=\"headerlink\" title=\"创建LiveData对象\"></a>创建LiveData对象</h3><p><strong>MutableLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameViewModel extends ViewModel &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// Create a LiveData with a String</span><br><span class=\"line\">private MutableLiveData&lt;String&gt; mCurrentName;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MutableLiveData&lt;String&gt; getCurrentName() &#123;</span><br><span class=\"line\">        if (mCurrentName == null) &#123;</span><br><span class=\"line\">            mCurrentName = new MutableLiveData&lt;String&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mCurrentName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Rest of the ViewModel...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private NameViewModel mModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Other code to setup the activity...</span><br><span class=\"line\"></span><br><span class=\"line\">        // Get the ViewModel.</span><br><span class=\"line\">        mModel = ViewModelProviders.of(this).get(NameViewModel.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Create the observer which updates the UI.</span><br><span class=\"line\">        final Observer&lt;String&gt; nameObserver = new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onChanged(@Nullable final String newName) &#123;</span><br><span class=\"line\">                // Update the UI, in this case, a TextView.</span><br><span class=\"line\">                mNameTextView.setText(newName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span><br><span class=\"line\">        mModel.getCurrentName().observe(this, nameObserver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>MediatorLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData liveData1 = ...;</span><br><span class=\"line\">LiveData liveData2 = ...;</span><br><span class=\"line\"></span><br><span class=\"line\">MediatorLiveData liveDataMerger = new MediatorLiveData&lt;&gt;();</span><br><span class=\"line\">liveDataMerger.addSource(liveData1, value -&gt; liveDataMerger.setValue(value));</span><br><span class=\"line\">liveDataMerger.addSource(liveData2, value -&gt; liveDataMerger.setValue(value));</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用单例模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingletonLiveData extends MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static volatile SingletonLiveData instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SingletonLiveData() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SingletonLiveData getInstance() &#123;</span><br><span class=\"line\">        if (instance != null) &#123;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        synchronized (SingletonLiveData.class) &#123;</span><br><span class=\"line\">            if (instance == null) &#123;</span><br><span class=\"line\">                instance = new SingletonLiveData();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onActive() &#123;</span><br><span class=\"line\">        super.onActive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onInactive() &#123;</span><br><span class=\"line\">        super.onInactive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().observe(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable String s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().setValue(&quot;single&quot;);</span><br></pre></td></tr></table></figure>\n<p>简单说明LiveData中的几个重要方法：<br><strong>onActive() </strong>- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。<br><strong>onInactive()</strong>- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。<br><strong>setValue()</strong>- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。<br><strong>postValue()</strong>- :当需要在非UI线程更新数据时调用此函数。</p>\n<p>需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。</p>\n<p><strong>数据转换</strong><br>LiveData 还支持简单的数据变换。目前在 <code>Transformations</code> 类中有 map 和 switchMap 两个变换函数。</p>\n<ul>\n<li>map 是把一个数据类型变换为另外一个数据类型。</li>\n<li>switchMap 是把一个数据变化为另外一个 LiveData</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData&lt;User&gt; userLiveData = ...;</span><br><span class=\"line\">LiveData&lt;String&gt; userName = Transformations.map(userLiveData, user -&gt; &#123;</span><br><span class=\"line\">    user.name + <span class=\"string\">\" \"</span> + user.lastName</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;String&gt; addressInput = <span class=\"keyword\">new</span> MutableLiveData();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;String&gt; postalCode =</span><br><span class=\"line\">            Transformations.switchMap(addressInput, (address) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.repository = repository</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setInput</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">      addressInput.setValue(address);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">    LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; existing.owner != wrapper.owner) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot add the same observer\"</span></span><br><span class=\"line\">                + <span class=\"string\">\" with different lifecycles\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这段代码看出，当观察者所在的<code>LifecycleOwner</code>状态处于DESTROYED时，注册失败。当重复注册观察者时，<code>会抛出IllegalArgumentException</code>异常。通过这些验证后，向<code>Lifecycle</code>注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。<code>LifecycleOwner</code>是一个接口，只有一个方法getLifecycle()，<code>在Fragment</code>、<code>FragmentActivity</code>、<code>SupportActivity</code>、<code>LifecycleService</code>中均实现了这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComponentCallbacks</span>, <span class=\"title\">OnCreateContextMenuListener</span>, <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleRegistry mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.noteStateNotSaved();</span><br><span class=\"line\">            mChildFragmentManager.execPendingActions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = STARTED;</span><br><span class=\"line\">        mCalled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        onStart();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mCalled) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(<span class=\"string\">\"Fragment \"</span> + <span class=\"keyword\">this</span></span><br><span class=\"line\">                    + <span class=\"string\">\" did not call through to super.onStart()\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.dispatchStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLoaderManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mLoaderManager.doReportStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>LiveData中内部类LifecycleBoundObserver</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>LifecycleRegistry.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOG_TAG = <span class=\"string\">\"LifecycleRegistry\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Custom list that keeps observers and can handle removals / additions during traversal.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Invariant: at any moment of time for observer1 &amp; observer2:</span></span><br><span class=\"line\"><span class=\"comment\">     * if addition_order(observer1) &lt; addition_order(observer2), then</span></span><br><span class=\"line\"><span class=\"comment\">     * state(observer1) &gt;= state(observer2),</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> FastSafeIterableMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Current state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The provider that owns this Lifecycle.</span></span><br><span class=\"line\"><span class=\"comment\">     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak</span></span><br><span class=\"line\"><span class=\"comment\">     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,</span></span><br><span class=\"line\"><span class=\"comment\">     * because it keeps strong references on all other listeners, so you'll leak all of them as</span></span><br><span class=\"line\"><span class=\"comment\">     * well.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mAddingObserverCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// we have to keep it for cases:</span></span><br><span class=\"line\">    <span class=\"comment\">// void onStart() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.removeObserver(this);</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.add(newObserver);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// newObserver should be brought only to CREATED state during the execution of</span></span><br><span class=\"line\">    <span class=\"comment\">// this onStart method. our invariant with mObserverMap doesn't help, because parent observer</span></span><br><span class=\"line\">    <span class=\"comment\">// is no longer in the map.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;State&gt; mParentStates = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new LifecycleRegistry for the given provider.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You should usually create this inside your LifecycleOwner class's constructor and hold</span></span><br><span class=\"line\"><span class=\"comment\">     * onto the same instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provider The owner LifecycleOwner</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(@NonNull LifecycleOwner provider)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state new state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(@NonNull State state)</span> </span>&#123;</span><br><span class=\"line\">        moveToState(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the current state and notifies the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that if the &#123;<span class=\"doctag\">@code</span> currentState&#125; is the same state as the last call to this method,</span></span><br><span class=\"line\"><span class=\"comment\">     * calling this method has no effect.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> event The event that was received</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        State next = getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mHandlingEvent || mAddingObserverCounter != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// we will figure out what to do on upper level.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSynced</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mObserverMap.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        State eldestObserverState = mObserverMap.eldest().getValue().mState;</span><br><span class=\"line\">        State newestObserverState = mObserverMap.newest().getValue().mState;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eldestObserverState == newestObserverState &amp;&amp; mState == newestObserverState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> State <span class=\"title\">calculateTargetState</span><span class=\"params\">(LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;LifecycleObserver, ObserverWithState&gt; previous = mObserverMap.ceil(observer);</span><br><span class=\"line\"></span><br><span class=\"line\">        State siblingState = previous != <span class=\"keyword\">null</span> ? previous.getValue().mState : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - <span class=\"number\">1</span>)</span><br><span class=\"line\">                : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(min(mState, siblingState), parentState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class=\"line\">        ObserverWithState statefulObserver = <span class=\"keyword\">new</span> ObserverWithState(observer, initialState);</span><br><span class=\"line\">        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// it is null we should be destroyed. Fallback quickly</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isReentrance = mAddingObserverCounter != <span class=\"number\">0</span> || mHandlingEvent;</span><br><span class=\"line\">        State targetState = calculateTargetState(observer);</span><br><span class=\"line\">        mAddingObserverCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isReentrance) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we do sync only on the top level.</span></span><br><span class=\"line\">            sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mAddingObserverCounter--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">popParentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.remove(mParentStates.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pushParentState</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.add(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// we consciously decided not to send destruction events here in opposition to addObserver.</span></span><br><span class=\"line\">        <span class=\"comment\">// Our reasons for that:</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. These events haven't yet happened at all. In contrast to events in addObservers, that</span></span><br><span class=\"line\">        <span class=\"comment\">// actually occurred but earlier.</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. There are cases when removeObserver happens as a consequence of some kind of fatal</span></span><br><span class=\"line\">        <span class=\"comment\">// event. If removeObserver method sends destruction events, then a clean up routine becomes</span></span><br><span class=\"line\">        <span class=\"comment\">// more cumbersome. More specific example of that is: your LifecycleObserver listens for</span></span><br><span class=\"line\">        <span class=\"comment\">// a web connection, in the usual routine in OnStop method you report to a server that a</span></span><br><span class=\"line\">        <span class=\"comment\">// session has just ended and you close the connection. Now let's assume now that you</span></span><br><span class=\"line\">        <span class=\"comment\">// lost an internet and as a result you removed this observer. If you get destruction</span></span><br><span class=\"line\">        <span class=\"comment\">// events in removeObserver, you should have a special case in your onStop method that</span></span><br><span class=\"line\">        <span class=\"comment\">// checks if your web connection died and you shouldn't try to report anything to a server.</span></span><br><span class=\"line\">        mObserverMap.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getObserverCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObserverMap.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">getStateAfter</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_CREATE:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_STOP:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CREATED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_START:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_PAUSE:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> STARTED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESUME:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> RESUMED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_DESTROY:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DESTROYED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_ANY:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected event value \"</span> + event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">downEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_DESTROY;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_STOP;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_PAUSE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">upEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_CREATE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_START;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_RESUME;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// happens only on the top of stack (never in reentrance),</span></span><br><span class=\"line\">    <span class=\"comment\">// so it doesn't have to take in account parents</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">\"LifecycleOwner is garbage collected, you shouldn't try dispatch \"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"new events from it.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// no need to check eldest for nullability, because isSynced does it for us.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">min</span><span class=\"params\">(@NonNull State state1, @Nullable State state2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state2 != <span class=\"keyword\">null</span> &amp;&amp; state2.compareTo(state1) &lt; <span class=\"number\">0</span> ? state2 : state1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWithState</span> </span>&#123;</span><br><span class=\"line\">        State mState;</span><br><span class=\"line\">        GenericLifecycleObserver mLifecycleObserver;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class=\"line\">            mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class=\"line\">            mState = initialState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchEvent</span><span class=\"params\">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class=\"line\">            State newState = getStateAfter(event);</span><br><span class=\"line\">            mState = min(mState, newState);</span><br><span class=\"line\">            mLifecycleObserver.onStateChanged(owner, event);</span><br><span class=\"line\">            mState = newState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()-&gt;sync()-&gt;forwardPass()-&gt;内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。</p>\n<p>到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">\"setValue\"</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(@Nullable LifecycleBoundObserver initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, LifecycleBoundObserver&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(LifecycleBoundObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.active) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we've not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isActiveState(observer.owner.getLifecycle().getCurrentState())) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.lastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.lastVersion = mVersion;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        observer.observer.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>LiveData</code>中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。<br>这里有个逻辑需要注意，在这篇<a href=\"https://tech.meituan.com/Android_LiveDataBus.html\" title=\"文章\" target=\"_blank\" rel=\"noopener\">文章</a>中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。<br>在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>LiveData</code>是一个可以被观察的数据装载类。跟普通的被观察者不一样的，LiveData是具有生命周期感知功能，这意味它可以感知并遵循<code>Activity</code>,<code>Fragment</code>或者<code>Service</code>等组件的生命周期。这样的设计保证了LiveData仅当组件处于激活状态时才更新数据。</p>\n<p>只有当 Observer 的 Lifecycle 对象处于 <code>STARTED</code> 或者 <code>RESUMED</code> 状态的时候， LiveData 才处于活动状态，只有在活动状态数据变化事件才会通知到 Observer。当处于<code>DESTROYED</code>状态的时候，Observer会被相应的移除。</p>\n<h3 id=\"LiveData的优点\"><a href=\"#LiveData的优点\" class=\"headerlink\" title=\"LiveData的优点\"></a>LiveData的优点</h3><p>使用LiveData具有以下的有点：</p>\n<ul>\n<li><strong>UI和实时数据保持一致</strong> 因为LiveData采用的是观察者模式，这样一来就可以在数据发生改变时获得通知，更新UI。<br><strong>避免内存泄漏</strong>-  观察者被绑定到组件的生命周期上，当被绑定的组件销毁（destroy）时，观察者会立刻自动清理自身的数据。<br><strong>不会再产生由于Activity处于stop状态而引起的崩溃</strong>- 例如：当Activity处于后台状态时，是不会收到LiveData的任何事件的。<br><strong>不需要再解决生命周期带来的问题</strong>-  LiveData可以感知被绑定的组件的生命周期，只有在活跃状态才会通知数据变化。<br><strong>实时数据刷新</strong>-  当组件处于活跃状态或者从不活跃状态到活跃状态时总是能收到最新的数据。<br><strong>解决Configuration Change问题</strong>-  在屏幕发生旋转或者被回收再次启动，立刻就能收到最新的数据。<br><strong>资源共享</strong>- 通过使用单例模式和继承LiveData，可以实现一次发送，多个观察者更新数据。</li>\n</ul>\n<h2 id=\"添加LiveData\"><a href=\"#添加LiveData\" class=\"headerlink\" title=\"添加LiveData\"></a>添加LiveData</h2><h3 id=\"添加google-maven仓库\"><a href=\"#添加google-maven仓库\" class=\"headerlink\" title=\"添加google maven仓库\"></a>添加google maven仓库</h3><p>在项目<code>build.gradle</code>中添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;2.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-livedata:$lifecycle_version&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version&quot; // use -ktx for Kotlin</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;androidx.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>AndroidX之前</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    def lifecycle_version = &quot;1.1.1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // ViewModel and LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:extensions:$lifecycle_version&quot;</span><br><span class=\"line\">    // alternatively - just LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:livedata:$lifecycle_version&quot;</span><br><span class=\"line\">    // optional - ReactiveStreams support for LiveData</span><br><span class=\"line\">    implementation &quot;android.arch.lifecycle:reactivestreams:$lifecycle_version&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // optional - Test helpers for LiveData</span><br><span class=\"line\">    testImplementation &quot;android.arch.core:core-testing:$lifecycle_version&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建LiveData对象\"><a href=\"#创建LiveData对象\" class=\"headerlink\" title=\"创建LiveData对象\"></a>创建LiveData对象</h3><p><strong>MutableLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameViewModel extends ViewModel &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">// Create a LiveData with a String</span><br><span class=\"line\">private MutableLiveData&lt;String&gt; mCurrentName;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MutableLiveData&lt;String&gt; getCurrentName() &#123;</span><br><span class=\"line\">        if (mCurrentName == null) &#123;</span><br><span class=\"line\">            mCurrentName = new MutableLiveData&lt;String&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mCurrentName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Rest of the ViewModel...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class NameActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private NameViewModel mModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        // Other code to setup the activity...</span><br><span class=\"line\"></span><br><span class=\"line\">        // Get the ViewModel.</span><br><span class=\"line\">        mModel = ViewModelProviders.of(this).get(NameViewModel.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Create the observer which updates the UI.</span><br><span class=\"line\">        final Observer&lt;String&gt; nameObserver = new Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onChanged(@Nullable final String newName) &#123;</span><br><span class=\"line\">                // Update the UI, in this case, a TextView.</span><br><span class=\"line\">                mNameTextView.setText(newName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Observe the LiveData, passing in this activity as the LifecycleOwner and the observer.</span><br><span class=\"line\">        mModel.getCurrentName().observe(this, nameObserver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>MediatorLiveData</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData liveData1 = ...;</span><br><span class=\"line\">LiveData liveData2 = ...;</span><br><span class=\"line\"></span><br><span class=\"line\">MediatorLiveData liveDataMerger = new MediatorLiveData&lt;&gt;();</span><br><span class=\"line\">liveDataMerger.addSource(liveData1, value -&gt; liveDataMerger.setValue(value));</span><br><span class=\"line\">liveDataMerger.addSource(liveData2, value -&gt; liveDataMerger.setValue(value));</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用单例模式</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingletonLiveData extends MutableLiveData&lt;String&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static volatile SingletonLiveData instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SingletonLiveData() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static SingletonLiveData getInstance() &#123;</span><br><span class=\"line\">        if (instance != null) &#123;</span><br><span class=\"line\">            return instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        synchronized (SingletonLiveData.class) &#123;</span><br><span class=\"line\">            if (instance == null) &#123;</span><br><span class=\"line\">                instance = new SingletonLiveData();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onActive() &#123;</span><br><span class=\"line\">        super.onActive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onInactive() &#123;</span><br><span class=\"line\">        super.onInactive();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().observe(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> Observer&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable String s)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SingletonLiveData.getInstance().setValue(&quot;single&quot;);</span><br></pre></td></tr></table></figure>\n<p>简单说明LiveData中的几个重要方法：<br><strong>onActive() </strong>- ：当 LiveData 具有活动状态的 Observer 的时候会调用这个函数。在这个函数中，我们开始监听位置变化。<br><strong>onInactive()</strong>- ：当 LiveData 没有活动状态的 Observer 的时候会调用这个函数。所以在这个函数中取消更新位置来避免无所谓的耗电。<br><strong>setValue()</strong>- ： 当 LiveData 的数据变化的时候，调用这个函数。然后 LiveData 会通知活动状态的 Observer 数据变化了。<br><strong>postValue()</strong>- :当需要在非UI线程更新数据时调用此函数。</p>\n<p>需要注意的是，当使用 LiveData 时，由于CREATED 和 RESUMED 状态都被认为是激活状态，所以我们需要在 onCreate 中设置 LiveData并开始监听，如果监听放到 onResume 函数中的话，当 Activity 暂停再次恢复的时候，会调用 onStart 和 onResume 导致 LiveData 的 onActive() 函数分别被调用两次。</p>\n<p><strong>数据转换</strong><br>LiveData 还支持简单的数据变换。目前在 <code>Transformations</code> 类中有 map 和 switchMap 两个变换函数。</p>\n<ul>\n<li>map 是把一个数据类型变换为另外一个数据类型。</li>\n<li>switchMap 是把一个数据变化为另外一个 LiveData</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData&lt;User&gt; userLiveData = ...;</span><br><span class=\"line\">LiveData&lt;String&gt; userName = Transformations.map(userLiveData, user -&gt; &#123;</span><br><span class=\"line\">    user.name + <span class=\"string\">\" \"</span> + user.lastName</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;String&gt; addressInput = <span class=\"keyword\">new</span> MutableLiveData();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;String&gt; postalCode =</span><br><span class=\"line\">            Transformations.switchMap(addressInput, (address) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.repository = repository</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setInput</span><span class=\"params\">(String address)</span> </span>&#123;</span><br><span class=\"line\">      addressInput.setValue(address);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>下面，我们深入源码，简单分析LiveData如何做到生命周期感知。先从注册观察者入手，源码中LiveData的observe方法如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MainThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ignore</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class=\"line\">    LifecycleBoundObserver existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; existing.owner != wrapper.owner) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot add the same observer\"</span></span><br><span class=\"line\">                + <span class=\"string\">\" with different lifecycles\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    owner.getLifecycle().addObserver(wrapper);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>从这段代码看出，当观察者所在的<code>LifecycleOwner</code>状态处于DESTROYED时，注册失败。当重复注册观察者时，<code>会抛出IllegalArgumentException</code>异常。通过这些验证后，向<code>Lifecycle</code>注册观察者observer，LifecycleBoundObserver只是observer的一个包装类。<code>LifecycleOwner</code>是一个接口，只有一个方法getLifecycle()，<code>在Fragment</code>、<code>FragmentActivity</code>、<code>SupportActivity</code>、<code>LifecycleService</code>中均实现了这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns the Lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The lifecycle of the provider.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"function\">Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title\">ComponentCallbacks</span>, <span class=\"title\">OnCreateContextMenuListener</span>, <span class=\"title\">LifecycleOwner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    LifecycleRegistry mLifecycleRegistry = <span class=\"keyword\">new</span> LifecycleRegistry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Lifecycle <span class=\"title\">getLifecycle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mLifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.noteStateNotSaved();</span><br><span class=\"line\">            mChildFragmentManager.execPendingActions();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = STARTED;</span><br><span class=\"line\">        mCalled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        onStart();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mCalled) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SuperNotCalledException(<span class=\"string\">\"Fragment \"</span> + <span class=\"keyword\">this</span></span><br><span class=\"line\">                    + <span class=\"string\">\" did not call through to super.onStart()\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mChildFragmentManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mChildFragmentManager.dispatchStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLoaderManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mLoaderManager.doReportStart();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>LiveData中内部类LifecycleBoundObserver</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleBoundObserver</span> <span class=\"keyword\">implements</span> <span class=\"title\">GenericLifecycleObserver</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LifecycleOwner owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Observer&lt;T&gt; observer;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> active;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> lastVersion = START_VERSION;</span><br><span class=\"line\"></span><br><span class=\"line\">        LifecycleBoundObserver(LifecycleOwner owner, Observer&lt;T&gt; observer) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.owner = owner;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.observer = observer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(LifecycleOwner source, Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class=\"line\">                removeObserver(observer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></span><br><span class=\"line\">            <span class=\"comment\">// owner</span></span><br><span class=\"line\">            activeStateChanged(isActiveState(owner.getLifecycle().getCurrentState()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newActive == active) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            active = newActive;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</span><br><span class=\"line\">            LiveData.<span class=\"keyword\">this</span>.mActiveCount += active ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wasInactive &amp;&amp; active) &#123;</span><br><span class=\"line\">                onActive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !active) &#123;</span><br><span class=\"line\">                onInactive();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (active) &#123;</span><br><span class=\"line\">                dispatchingValue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>LifecycleRegistry.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LifecycleRegistry</span> <span class=\"keyword\">extends</span> <span class=\"title\">Lifecycle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOG_TAG = <span class=\"string\">\"LifecycleRegistry\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Custom list that keeps observers and can handle removals / additions during traversal.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Invariant: at any moment of time for observer1 &amp; observer2:</span></span><br><span class=\"line\"><span class=\"comment\">     * if addition_order(observer1) &lt; addition_order(observer2), then</span></span><br><span class=\"line\"><span class=\"comment\">     * state(observer1) &gt;= state(observer2),</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> FastSafeIterableMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Current state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> State mState;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The provider that owns this Lifecycle.</span></span><br><span class=\"line\"><span class=\"comment\">     * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won't leak</span></span><br><span class=\"line\"><span class=\"comment\">     * the whole Fragment / Activity. However, to leak Lifecycle object isn't great idea neither,</span></span><br><span class=\"line\"><span class=\"comment\">     * because it keeps strong references on all other listeners, so you'll leak all of them as</span></span><br><span class=\"line\"><span class=\"comment\">     * well.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mAddingObserverCounter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// we have to keep it for cases:</span></span><br><span class=\"line\">    <span class=\"comment\">// void onStart() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.removeObserver(this);</span></span><br><span class=\"line\">    <span class=\"comment\">//     mRegistry.add(newObserver);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// newObserver should be brought only to CREATED state during the execution of</span></span><br><span class=\"line\">    <span class=\"comment\">// this onStart method. our invariant with mObserverMap doesn't help, because parent observer</span></span><br><span class=\"line\">    <span class=\"comment\">// is no longer in the map.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;State&gt; mParentStates = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates a new LifecycleRegistry for the given provider.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * You should usually create this inside your LifecycleOwner class's constructor and hold</span></span><br><span class=\"line\"><span class=\"comment\">     * onto the same instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> provider The owner LifecycleOwner</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LifecycleRegistry</span><span class=\"params\">(@NonNull LifecycleOwner provider)</span> </span>&#123;</span><br><span class=\"line\">        mLifecycleOwner = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(provider);</span><br><span class=\"line\">        mState = INITIALIZED;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Moves the Lifecycle to the given state and dispatches necessary events to the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> state new state</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">markState</span><span class=\"params\">(@NonNull State state)</span> </span>&#123;</span><br><span class=\"line\">        moveToState(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Sets the current state and notifies the observers.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that if the &#123;<span class=\"doctag\">@code</span> currentState&#125; is the same state as the last call to this method,</span></span><br><span class=\"line\"><span class=\"comment\">     * calling this method has no effect.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> event The event that was received</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleLifecycleEvent</span><span class=\"params\">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class=\"line\">        State next = getStateAfter(event);</span><br><span class=\"line\">        moveToState(next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveToState</span><span class=\"params\">(State next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mState == next) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mState = next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mHandlingEvent || mAddingObserverCounter != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// we will figure out what to do on upper level.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        mHandlingEvent = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSynced</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mObserverMap.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        State eldestObserverState = mObserverMap.eldest().getValue().mState;</span><br><span class=\"line\">        State newestObserverState = mObserverMap.newest().getValue().mState;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eldestObserverState == newestObserverState &amp;&amp; mState == newestObserverState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> State <span class=\"title\">calculateTargetState</span><span class=\"params\">(LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        Entry&lt;LifecycleObserver, ObserverWithState&gt; previous = mObserverMap.ceil(observer);</span><br><span class=\"line\"></span><br><span class=\"line\">        State siblingState = previous != <span class=\"keyword\">null</span> ? previous.getValue().mState : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        State parentState = !mParentStates.isEmpty() ? mParentStates.get(mParentStates.size() - <span class=\"number\">1</span>)</span><br><span class=\"line\">                : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min(min(mState, siblingState), parentState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class=\"line\">        ObserverWithState statefulObserver = <span class=\"keyword\">new</span> ObserverWithState(observer, initialState);</span><br><span class=\"line\">        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// it is null we should be destroyed. Fallback quickly</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isReentrance = mAddingObserverCounter != <span class=\"number\">0</span> || mHandlingEvent;</span><br><span class=\"line\">        State targetState = calculateTargetState(observer);</span><br><span class=\"line\">        mAddingObserverCounter++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class=\"line\">            pushParentState(statefulObserver.mState);</span><br><span class=\"line\">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class=\"line\">            popParentState();</span><br><span class=\"line\">            <span class=\"comment\">// mState / subling may have been changed recalculate</span></span><br><span class=\"line\">            targetState = calculateTargetState(observer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isReentrance) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we do sync only on the top level.</span></span><br><span class=\"line\">            sync();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mAddingObserverCounter--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">popParentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.remove(mParentStates.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">pushParentState</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        mParentStates.add(state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// we consciously decided not to send destruction events here in opposition to addObserver.</span></span><br><span class=\"line\">        <span class=\"comment\">// Our reasons for that:</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. These events haven't yet happened at all. In contrast to events in addObservers, that</span></span><br><span class=\"line\">        <span class=\"comment\">// actually occurred but earlier.</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. There are cases when removeObserver happens as a consequence of some kind of fatal</span></span><br><span class=\"line\">        <span class=\"comment\">// event. If removeObserver method sends destruction events, then a clean up routine becomes</span></span><br><span class=\"line\">        <span class=\"comment\">// more cumbersome. More specific example of that is: your LifecycleObserver listens for</span></span><br><span class=\"line\">        <span class=\"comment\">// a web connection, in the usual routine in OnStop method you report to a server that a</span></span><br><span class=\"line\">        <span class=\"comment\">// session has just ended and you close the connection. Now let's assume now that you</span></span><br><span class=\"line\">        <span class=\"comment\">// lost an internet and as a result you removed this observer. If you get destruction</span></span><br><span class=\"line\">        <span class=\"comment\">// events in removeObserver, you should have a special case in your onStop method that</span></span><br><span class=\"line\">        <span class=\"comment\">// checks if your web connection died and you shouldn't try to report anything to a server.</span></span><br><span class=\"line\">        mObserverMap.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> The number of observers.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"WeakerAccess\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getObserverCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mObserverMap.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getCurrentState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">getStateAfter</span><span class=\"params\">(Event event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_CREATE:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_STOP:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CREATED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_START:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_PAUSE:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> STARTED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_RESUME:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> RESUMED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_DESTROY:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DESTROYED;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ON_ANY:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected event value \"</span> + event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">downEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_DESTROY;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_STOP;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_PAUSE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Event <span class=\"title\">upEvent</span><span class=\"params\">(State state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> INITIALIZED:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DESTROYED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_CREATE;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> CREATED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_START;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> STARTED:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ON_RESUME;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RESUMED:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Unexpected state value \"</span> + state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">forwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class=\"line\">                mObserverMap.iteratorWithAdditions();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &lt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                pushParentState(observer.mState);</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">backwardPass</span><span class=\"params\">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class=\"line\">        Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class=\"line\">                mObserverMap.descendingIterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class=\"line\">            ObserverWithState observer = entry.getValue();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((observer.mState.compareTo(mState) &gt; <span class=\"number\">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class=\"line\">                    &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class=\"line\">                Event event = downEvent(observer.mState);</span><br><span class=\"line\">                pushParentState(getStateAfter(event));</span><br><span class=\"line\">                observer.dispatchEvent(lifecycleOwner, event);</span><br><span class=\"line\">                popParentState();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// happens only on the top of stack (never in reentrance),</span></span><br><span class=\"line\">    <span class=\"comment\">// so it doesn't have to take in account parents</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycleOwner == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Log.w(LOG_TAG, <span class=\"string\">\"LifecycleOwner is garbage collected, you shouldn't try dispatch \"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"new events from it.\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isSynced()) &#123;</span><br><span class=\"line\">            mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// no need to check eldest for nullability, because isSynced does it for us.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                backwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                forwardPass(lifecycleOwner);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mNewEventOccurred = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> State <span class=\"title\">min</span><span class=\"params\">(@NonNull State state1, @Nullable State state2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> state2 != <span class=\"keyword\">null</span> &amp;&amp; state2.compareTo(state1) &lt; <span class=\"number\">0</span> ? state2 : state1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverWithState</span> </span>&#123;</span><br><span class=\"line\">        State mState;</span><br><span class=\"line\">        GenericLifecycleObserver mLifecycleObserver;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class=\"line\">            mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class=\"line\">            mState = initialState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchEvent</span><span class=\"params\">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class=\"line\">            State newState = getStateAfter(event);</span><br><span class=\"line\">            mState = min(mState, newState);</span><br><span class=\"line\">            mLifecycleObserver.onStateChanged(owner, event);</span><br><span class=\"line\">            mState = newState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>取Fragment举例，当Fragment状态切换调用perforStart()时，会执行LifecycleRegistry的handleLifecycleEvent()，然后依次调用moveToState()-&gt;sync()-&gt;forwardPass()-&gt;内部类ObserverWithState.dispatchEvent(LifecycleOwner owner, Event event)，然后调用LiveData中内部类LifecycleBoundObserver的onStateChanged()，当状态为DESTROYED时，自动解除绑定observer，实现了生命周期感知，避免内存泄露。</p>\n<p>到这里，我们已经了解到LiveData绑定观察者和解绑观察者的流程。下面我们看下数据是怎么实现更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        assertMainThread(<span class=\"string\">\"setValue\"</span>);</span><br><span class=\"line\">        mVersion++;</span><br><span class=\"line\">        mData = value;</span><br><span class=\"line\">        dispatchingValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> postTask;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">            postTask = mPendingData == NOT_SET;</span><br><span class=\"line\">            mPendingData = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!postTask) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Object newValue;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</span><br><span class=\"line\">                newValue = mPendingData;</span><br><span class=\"line\">                mPendingData = NOT_SET;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">            setValue((T) newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(@Nullable LifecycleBoundObserver initiator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            mDispatchInvalidated = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                considerNotify(initiator);</span><br><span class=\"line\">                initiator = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;T&gt;, LifecycleBoundObserver&gt;&gt; iterator =</span><br><span class=\"line\">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class=\"line\">                    considerNotify(iterator.next().getValue());</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</span><br><span class=\"line\">        mDispatchingValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(LifecycleBoundObserver observer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observer.active) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class=\"line\">        <span class=\"comment\">// the observer moved to an active state, if we've not received that event, we better not</span></span><br><span class=\"line\">        <span class=\"comment\">// notify for a more predictable notification order.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isActiveState(observer.owner.getLifecycle().getCurrentState())) &#123;</span><br><span class=\"line\">            observer.activeStateChanged(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (observer.lastVersion &gt;= mVersion) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        observer.lastVersion = mVersion;</span><br><span class=\"line\">        <span class=\"comment\">//noinspection unchecked</span></span><br><span class=\"line\">        observer.observer.onChanged((T) mData);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>LiveData</code>中setVaule和postValue方法最终结果都是一样的，只是postValue提供给在非UI线程中调用。<br>这里有个逻辑需要注意，在这篇<a href=\"https://tech.meituan.com/Android_LiveDataBus.html\" title=\"文章\" target=\"_blank\" rel=\"noopener\">文章</a>中已经讲的很清晰，当LifeCircleOwner的状态发生变化的时候，会调用LiveData.ObserverWrapper的activeStateChanged函数，如果这个时候ObserverWrapper的状态是active，就会调用LiveData的dispatchingValue，接着调用considerNotify方法。<br>在LiveData的considerNotify方法中，如果ObserverWrapper的mLastVersion小于LiveData的mVersion，就会去回调mObserver的onChanged方法。而每个新的订阅者，其version都是-1，LiveData一旦设置过其version是大于-1的（每次LiveData设置值都会使其version加1），这样就会导致LiveDataBus每注册一个新的订阅者，这个订阅者立刻会收到一个回调，即使这个设置的动作发生在订阅之前。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面已经介绍了LiveData的使用方法和通过源码分析一遍实现原理。通过LifecycleRegistry类将Fragment、Activity和Service组件的生命周期绑定到LiveData上，并通过观察者模式实现了数据的更新。</p>\n"}],"PostAsset":[{"_id":"source/_posts/使用AS开发gradle插件入门/1.png","post":"cjrizz0ow0005nrvxvwkuo9cd","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/使用AS开发gradle插件入门/2.png","post":"cjrizz0ow0005nrvxvwkuo9cd","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/使用AS开发gradle插件入门/3.png","post":"cjrizz0ow0005nrvxvwkuo9cd","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/使用AS开发gradle插件入门/4.png","post":"cjrizz0ow0005nrvxvwkuo9cd","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548387314931.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548387314931.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548387314934.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548387314934.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548387743050.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548387743050.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548388040046.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548388040046.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548397164402.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548397164402.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548398905865.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548398905865.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548399295697.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548399295697.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548665022002.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548665022002.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/1548665070317.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"1548665070317.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/930623111-59ed85819d22b_articlex.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"930623111-59ed85819d22b_articlex.png","modified":1,"renderable":1},{"_id":"source/_posts/HTTPS握手过程详解与优化方法/tsl-ssl.png","post":"cjrizz0pc000cnrvx05c6eikk","slug":"tsl-ssl.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjrizz0or0001nrvxdzz52y6h","tag_id":"cjrizz0ot0003nrvxg77blmm9","_id":"cjrizz0oy0008nrvx3mdihqmj"},{"post_id":"cjrizz0ow0005nrvxvwkuo9cd","tag_id":"cjrizz0ox0007nrvxp02hajrr","_id":"cjrizz0oz0009nrvx857rrpxa"},{"post_id":"cjrizz0pa000anrvx88ck2ouz","tag_id":"cjrizz0pf000dnrvxwnuhfpk5","_id":"cjrizz0pg000fnrvxs7kj9pz8"},{"post_id":"cjrizz0pc000cnrvx05c6eikk","tag_id":"cjrizz0pf000enrvxnpzi4n7z","_id":"cjrizz0pg000gnrvxlu2z4p4f"}],"Tag":[{"name":"性能优化 源码分析  白屏优化","_id":"cjrizz0ot0003nrvxg77blmm9"},{"name":"gradle插件","_id":"cjrizz0ox0007nrvxp02hajrr"},{"name":"AspectJ 进阶","_id":"cjrizz0pf000dnrvxwnuhfpk5"},{"name":"HTTPS 优化","_id":"cjrizz0pf000enrvxnpzi4n7z"}]}}